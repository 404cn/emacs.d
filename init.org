#+PROPERTY: header-args:emacs-lisp :tangle (concat (file-name-directory (buffer-file-name)) "init.new.el")

#+OPTIONS: ':nil *:t -:t ::t <:t H:5 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: Emacs Configuration
#+DATE: <2018-10-09 Tue>
#+AUTHOR: Nasy
#+EMAIL: nasyxx@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>

#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

#+HTML_HEAD: <style>kbd {border-style: outset;} pre.src:before {top: -4px; box-shadow: 3px 3px 3px #eee; border-color: #ccc; padding: 0;}</style>
#+HTML_HEAD: <style>#content {background-color: #fff0f8;} body,pre.src {background-color: #f7f4e3;}</style>

* About

An Straightforward Emacs Configuration Bundle.

This is my Emacs configuration in literate form, and it is towards macOS.  I am
not sure if it would work well well in Linux or Windows.

** *NOTICE*

+ Almost all in one file.
+ Use straight.el to manage packages.
+ For GUI.
+ Now only tested with GNU Emacs 27.0.50 in macOS 10.14.
+ Font
    - Fira Code Symbol

* Dependencies

+ Emacs
+ git
+ make (optional)
+ ...

* Installation

To install, clone this repo to @@html: <span> @@ ~~/.emacs.d~ @@html: </span> @@:

#+BEGIN_SRC shell
  git clone https://github.com/nasyxx/emacs.d.git ~/.emacs.d
#+END_SRC

Upon the first time staring up emacs, other third-party packages will be
automatically clone to the @@html: <span> @@ ~straight~: @@html: </span> @@ folder
and installed.  If you encounter any errors at that stage, try restarting Emacs,
and maybe running ~make clean-all~ before doing so.

* Updates

Update this config with running ~make update~ or ~git pull~ after a ~make
clean-build~ and restart Emacs.

And I guess you'll need to update third-party packages regularly too if you
have not modificated the ~straight-check-for-modifications~ in @@html: <span> @@
~config/nasy-config.el~: @@html: </span> @@


+ @@html: <kbd>M-x</kbd> <kbd>straight-pull-all</kbd> <kbd>RET</kbd> @@
+ @@html: <kbd>M-x</kbd> <kbd>straight-rebuild-all</kbd> <kbd>RET</kbd> @@

If you encounter any errors while updating, you may need to kill Emacs and run
~make clean~. If you still meet errors after doing that, you probably need to run
~make clean-all~ and restart Emacs.

* The Configuration

One thing to note is that this file generates a file named @@html: <span> @@
~init.el~. @@html: </span> @@ You *should not* edit that file directly and make any
changes here and regenerate it from Emacs org-mode using @@html: <kbd>C-c</kbd>
<kbd>C-v</kbd> <kbd>t</kbd> @@.

** Bootstrap

In this section, the configuration needs to occur early in emacs startup.

*** File Header

This includes some necessary headers.

#+BEGIN_SRC emacs-lisp
  ;;; init.el --- Nasy's emacs.d init file.            -*- lexical-binding: t; -*-
  ;; Copyright (C) 2018  Nasy

  ;; Author: Nasy <nasyxx+emacs@gmail.com>

  ;;; Commentary:

  ;; Nasy's emacs.d init file.  For macOS and Emacs 26, Emacs 27.
#+END_SRC

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; DO NOT EDIT THIS FILE DIRECTLY
  ;; This is a file generated from a literate programing source file located at
  ;; init.org
  ;; You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t
  ;;----------------------------------------------------------------------------

  ;;; Code:
#+END_SRC

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Bootstrap
  ;; In this section, the configuration needs to occur early in emacs startup.
  ;;----------------------------------------------------------------------------
#+END_SRC

*** Lexical Binding

This makes it so that the file that is produced from tangling this file uses
lexical scoping.

#+BEGIN_SRC emacs-lisp
  (setq-default lexical-binding t)
#+END_SRC

*** Some Default Settings

Some default settings are here, including ~debug-on-error~, ~message-log-max~,
~load-prefer-newer~ and ~ad-redefinition-action~.

#+BEGIN_SRC emacs-lisp
  (setq-default debug-on-error         t
                message-log-max        t
                load-prefer-newer      t
                ad-redefinition-action 'accept)
#+END_SRC

*** Is A Mac?

If this os is macOS?

#+BEGIN_SRC emacs-lisp
  (defconst *is-a-mac* (eq system-type 'darwin))
#+END_SRC

*** Packages Manager

I use [[https://github.com/raxod502/straight.el][straight.el]] as my packages manager.

#+BEGIN_SRC emacs-lisp
  (setq straight-recipes-gnu-elpa-use-mirror t
        straight-repository-branch           "develop")

  (defvar bootstrap-version)

  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

At the same time, I use [[https://github.com/jwiegley/use-package][use-package]] to manage packages in one file.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
#+END_SRC

*** Garbage Collection

Adjust garbage collection thresholds during startup, and thereafter

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Garbage Collection
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (let ((normal-gc-cons-threshold (* 256 1024 1024))
        (init-gc-cons-threshold (* 512 1024 1024)))
    (setq gc-cons-threshold init-gc-cons-threshold)
    (add-hook 'after-init-hook
              (lambda ()
                (setq gc-cons-threshold normal-gc-cons-threshold))))

  (add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC

*** Benchmark

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Benchmark
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package benchmark-init
    :demand   t
    :straight t
    :hook ((after-init . benchmark-init/deactivate)))
#+END_SRC

*** Expand load-path

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; load-path
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (expand-file-name "lisp"   user-emacs-directory))
  (add-to-list 'load-path (expand-file-name "config" user-emacs-directory))
#+END_SRC

** Basic Configs

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Configs
  ;; Some basic configurations.
  ;;----------------------------------------------------------------------------
#+END_SRC

*** Compile

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Compile
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package async
    :straight t
    :config
    (dired-async-mode            1)
    (async-bytecomp-package-mode 1))

  (use-package auto-compile
    :demand   t
    :straight t
    :config
    (auto-compile-on-load-mode)
    (auto-compile-on-save-mode))

  (setq-default compilation-scroll-output t)

  (use-package alert
    :demand   t
    :straight t
    :preface
    (defun alert-after-compilation-finish (buf result)
      "Use `alert' to report compilation RESULT if BUF is hidden."
      (when (buffer-live-p buf)
        (unless (catch 'is-visible
                  (walk-windows (lambda (w)
                                  (when (eq (window-buffer w) buf)
                                    (throw 'is-visible t))))
                  nil)
          (alert (concat "Compilation " result)
                 :buffer buf
                 :category 'compilation)))))


  (use-package compile
    :demand t
    :preface
    (defvar nasy:last-compilation-buffer nil
      "The last buffer in which compilation took place.")

    (defun nasy:save-compilation-buffer (&rest _)
      "Save the compilation buffer to find it later."
      (setq nasy:last-compilation-buffer next-error-last-buffer))
    (advice-add 'compilation-start :after 'nasy:save-compilation-buffer)

    (defun nasy:find-prev-compilation (orig &rest args)
      "Find the previous compilation buffer, if present, and recompile there."
      (if (and (null edit-command)
               (not (derived-mode-p 'compilation-mode))
               nasy:last-compilation-buffer
               (buffer-live-p (get-buffer nasy:last-compilation-buffer)))
          (with-current-buffer nasy:last-compilation-buffer
            (apply orig args))
        (apply orig args)))
    :bind (([f6] . recompile))
    :hook ((compilation-finish-functions . alert-after-compilation-finish)))


  (use-package ansi-color
    :demand   t
    :after    compile
    :straight t
    :hook ((compilation-filter . colourise-compilation-buffer))
    :config
    (defun colourise-compilation-buffer ()
      (when (eq major-mode 'compilation-mode)
        (ansi-color-apply-on-region compilation-filter-start (point-max)))))
#+END_SRC

*** Shell

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Shell
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'shell)

  (use-package cmd-to-echo
    :defer    t
    :straight t)


  (use-package command-log-mode
    :demand   t
    :straight t)


  (defun nasy:shell-command-in-view-mode (start end command &optional output-buffer replace &rest other-args)
    "Put \"*Shell Command Output*\" buffers into view-mode."
    (unless (or output-buffer replace)
      (with-current-buffer "*Shell Command Output*"
        (view-mode 1))))
  (advice-add 'shell-command-on-region :after 'nasy:shell-command-in-view-mode)


  (use-package exec-path-from-shell
    :demand   *is-a-mac*
    :straight t
    :preface
    ;; Non-Forking Shell Command To String
    ;; https://github.com/bbatsov/projectile/issues/1044
    ;;--------------------------------------------------------------------------

    (defun call-process-to-string (program &rest args)
      (with-temp-buffer
        (apply 'call-process program nil (current-buffer) nil args)
        (buffer-string)))

    (defun get-call-process-args-from-shell-command (command)
      (cl-destructuring-bind
          (the-command . args) (split-string command " ")
        (let ((binary-path (executable-find the-command)))
          (when binary-path
            (cons binary-path args)))))

    (defun shell-command-to-string (command)
      (let ((call-process-args
             (get-call-process-args-from-shell-command command)))
        (if call-process-args
            (apply 'call-process-to-string call-process-args)
          (shell-command-to-string command))))

    (defun try-call-process (command)
      (let ((call-process-args
             (get-call-process-args-from-shell-command command)))
        (if call-process-args
            (apply 'call-process-to-string call-process-args))))

    (advice-add 'shell-command-to-string :before-until 'try-call-process)

    (defun call-with-quick-shell-command (fn &rest args)
      (noflet ((shell-command-to-string
                (&rest args)
                (or (apply 'try-call-process args) (apply this-fn args))))
              (apply fn args)))

    (advice-add 'projectile-find-file :around 'call-with-quick-shell-command)
    :init (setq shell-command-switch "-ic")
    :config
    (when nil (message "PATH: %s, INFO: %s" (getenv "PATH")
                     (getenv "ENVIRONMENT_SETUP_DONE"))
          (setq exec-path-from-shell-debug t))
    (setq exec-path-from-shell-arguments (list "-l"))
    (setq exec-path-from-shell-check-startup-files nil)
    (add-to-list 'exec-path-from-shell-variables "SHELL")
    (add-to-list 'exec-path-from-shell-variables "GOPATH")
    (add-to-list 'exec-path-from-shell-variables "ENVIRONMENT_SETUP_DONE")
    (add-to-list 'exec-path-from-shell-variables "PYTHONPATH")
    (exec-path-from-shell-initialize))
#+END_SRC

*** Custom configs

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Custom configs
#+END_SRC

**** nasy-config.el

This file includes all of the customizable variables of my configuration.

You can find it in @@html: <span> @@ ~config/nasy-config.el~ @@html: </span> @@

***** Header

#+BEGIN_SRC emacs-lisp :tangle (concat (file-name-directory (buffer-file-name)) "config/nasy-config.new.el")
  ;;; config.el --- User config file.                    -*- lexical-binding: t; -*-

  ;; Author: Nasy <nasyxx+emacs@gmail.com>

  ;;; Commentary:

  ;; Nasy's Custom Config file.

  ;;; Code:
#+END_SRC

***** Constants

#+BEGIN_SRC emacs-lisp :tangle (concat (file-name-directory (buffer-file-name)) "config/nasy-config.new.el")
  (defconst *is-a-mac* (eq system-type 'darwin))
#+END_SRC

***** UI Settings

#+BEGIN_SRC emacs-lisp :tangle (concat (file-name-directory (buffer-file-name)) "config/nasy-config.new.el")
  ;; Theme
  (setq-default nasy:theme 'doom-dracula)

  (when *is-a-mac*
    (add-to-list 'default-frame-alist
                 '(ns-transparent-titlebar . t))

    (add-to-list 'default-frame-alist
                 '(ns-appearance . dark))

    (add-to-list 'default-frame-alist
                 '(alpha . (80 . 75)))

    (add-to-list 'default-frame-alist
                 '(font . "OperatorMonoLig Nerd Font-14"))

    (defun stop-minimizing-window ()
    "Stop minimizing window under macOS."
    (interactive)
    (unless (and *is-a-mac*
                 window-system)
      (suspend-frame)))

    (global-set-key (kbd "C-z") 'stop-minimizing-window))
#+END_SRC

***** Default Settings

+ Cursor

#+BEGIN_SRC emacs-lisp :tangle (concat (file-name-directory (buffer-file-name)) "config/nasy-config.new.el")
  (setq-default
    blink-cursor-interval .6
    blink-matching-paren  t)
#+END_SRC

+ Visual

#+BEGIN_SRC emacs-lisp :tangle (concat (file-name-directory (buffer-file-name)) "config/nasy-config.new.el")
  (setq-default
   fill-column                    80
   visual-fill-column-width       100
   word-wrap                      t
   highlight-indent-guides-method 'column
   tab-width                      8
   tooltip-delay                  1.5)
#+END_SRC

+ Company

#+BEGIN_SRC emacs-lisp :tangle (concat (file-name-directory (buffer-file-name)) "config/nasy-config.new.el")
  (setq-default
   company-idle-delay .5)
#+END_SRC

+ Helm

#+BEGIN_SRC emacs-lisp :tangle (concat (file-name-directory (buffer-file-name)) "config/nasy-config.new.el")
  (setq-default
   ;; brew install rg   if you'd like to use rg as my doing
   helm-ag-base-command "rg --no-heading --smart-case")
#+END_SRC

+ Shell

#+BEGIN_SRC emacs-lisp :tangle (concat (file-name-directory (buffer-file-name)) "config/nasy-config.new.el")
  (setq-default
   shell-file-name "/bin/zsh")
#+END_SRC

+ Languages

#+BEGIN_SRC emacs-lisp :tangle (concat (file-name-directory (buffer-file-name)) "config/nasy-config.new.el")
  (setq-default
   haskell-stylish-on-save nil
   ,*intero*                t
   ,*blacken*               t
   blacken-line-length     80
   ,*clangd*                (or (executable-find "clangd")  ;; usually
                               (executable-find "/usr/local/opt/llvm/bin/clangd"))  ;; macOS
   ,*nix*                   (executable-find "nix")
   ,*rust*                  (or (executable-find "rustc")
                               (executable-find "cargo")
                               (executable-find "rustup"))
   ,*rls*                   (or (executable-find "rls")
                               (executable-find "~/.cargo/bin/rls"))
   lsp-rust-rls-command    '("rls"))
#+END_SRC

+ Parens

#+BEGIN_SRC emacs-lisp :tangle (concat (file-name-directory (buffer-file-name)) "config/nasy-config.new.el")
  (setq-default
   show-paren-style                                'expression
   sp-autoinsert-quote-if-followed-by-closing-pair t
   sp-base-key-bindings                            'paredit
   sp-show-pair-from-inside                        t)
#+END_SRC

+ Whitespace

#+BEGIN_SRC emacs-lisp :tangle (concat (file-name-directory (buffer-file-name)) "config/nasy-config.new.el")
  (setq-default
   whitespace-line-column 80
   whitespace-style       '(face spaces tabs newline
                            space-mark tab-mark newline-mark
                            lines-tail empty))
#+END_SRC

+ Straight.el

#+BEGIN_SRC emacs-lisp :tangle (concat (file-name-directory (buffer-file-name)) "config/nasy-config.new.el")
  ;; The original one is `(find-at-startup find-when-checking) which is so slow.
  ;; straight-check-for-modifications '(find-at-startup find-when-checking)
  (setq-default
   straight-check-for-modifications '(check-on-save find-when-checking))
#+END_SRC

+ Start

#+BEGIN_SRC emacs-lisp :tangle (concat (file-name-directory (buffer-file-name)) "config/nasy-config.new.el")
  (setq-default
   initial-scratch-message     (concat ";; Happy hacking, " user-login-name " - Emacs ♥ you!\n\n")
   dashboard-banner-logo-title (concat ";; Happy hacking, " user-login-name " - Emacs ♥ you!\n\n")
   ;; initial-buffer-choice       #'(lambda () (get-buffer "*dashboard*"))  ;; It will cause error if you start emacs from Command line with file name
                                                                            ;; https://github.com/rakanalh/emacs-dashboard/issues/69
  )
#+END_SRC

+ Config After initialization

#+BEGIN_SRC emacs-lisp :tangle (concat (file-name-directory (buffer-file-name)) "config/nasy-config.new.el")
  (defun nasy:config-after ()
    "Set configuration need to be set after init."
    (setq-default
     helm-allow-mouse                  t
     helm-follow-mode-persistent       t
     helm-move-to-line-cycle-in-source nil
     helm-source-names-using-follow    '("Buffers" "kill-buffer" "Occur")))


  (add-hook 'nasy:config-after-hook  #'nasy:config-after)
#+END_SRC

***** Custom Faces

#+BEGIN_SRC emacs-lisp :tangle (concat (file-name-directory (buffer-file-name)) "config/nasy-config.new.el")
  (defun nasy:set-face ()
    "Set custom face."
    (set-face-attribute 'custom-comment              nil                                             :slant   'italic)
    (set-face-attribute 'font-lock-keyword-face      nil                                             :slant   'italic)
    (set-face-attribute 'mode-line                   nil :background "#a1de93" :foreground "#2f3e75" :box     nil)
    (set-face-attribute 'mode-line-inactive          nil :background "#333"    :foreground "#96A7A9" :box     nil)
    (set-face-attribute 'powerline-active0           nil :background "#ffffc1"                       :inherit 'mode-line )
    (set-face-attribute 'powerline-active1           nil :background "#aa96da" :foreground "#2f3e75" :inherit 'mode-line )
    (set-face-attribute 'powerline-active2           nil :background "#d0efb5" :foreground "black"   :inherit 'mode-line)
    (set-face-attribute 'show-paren-match            nil :background "#bfcfff" :foreground "#dc322f" :weight  'ultra-bold)
    (set-face-attribute 'show-paren-match-expression nil :background "#543e5c"                       :inherit 'unspecified)
    (set-face-attribute 'which-func                  nil                       :foreground "#333"))

  (add-hook 'nasy:config-before-hook #'nasy:set-face)
#+END_SRC

***** Key Bindings

#+BEGIN_SRC emacs-lisp :tangle (concat (file-name-directory (buffer-file-name)) "config/nasy-config.new.el")
  (when *is-a-mac*
    ;; cursor Movement
    (global-set-key (kbd "s-<up>")   'beginning-of-buffer)
    (global-set-key (kbd "s-<down>") 'end-of-buffer)
    ;; text Operations
    (global-set-key (kbd "M-¥")
                    (lambda ()
                      (interactive)
                      (insert "\\")))
    (global-set-key (kbd "s-<backspace>")
                    (lambda ()
                      (interactive)
                      (kill-line 0)))
  )
#+END_SRC

***** Footer

#+BEGIN_SRC emacs-lisp :tangle (concat (file-name-directory (buffer-file-name)) "config/nasy-config.new.el")
  (provide 'nasy-config)
  ;;; nasy-config.el ends here
#+END_SRC

**** Hooks & Require
#+BEGIN_SRC emacs-lisp
  (defvar nasy:config-before-hook nil
    "Hooks to run config functions before load custom.el.")

  (defvar nasy:config-after-hook nil
    "Hooks to run config functions after." )

  (add-hook 'nasy:config-after-hook
            #'(lambda () (message "Hi~ Hoop you have fun with this config.")))
  (add-hook 'after-init-hook
            #'(lambda () (run-hooks 'nasy:config-after-hook)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'nasy-config nil t)
  (require 'user-config nil t)
#+END_SRC

**** Disable Some Features

#+BEGIN_SRC emacs-lisp
  (setq use-file-dialog        nil
        use-dialog-box         nil
        inhibit-startup-screen t)

  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))

  (when (fboundp 'set-scroll-bar-mode)
    (set-scroll-bar-mode nil))
#+END_SRC

**** Nice Scrolling

#+BEGIN_SRC emacs-lisp
  (setq scroll-margin                   0
        scroll-conservatively           100000
        scroll-preserve-screen-position 'always)
#+END_SRC

**** Text Scale

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'default-text-scale)
#+END_SRC

*** Theme

I use doom-themes.

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Themes
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :demand   t
    :straight t
    :config
    (load-theme nasy:theme t)
    ;; (doom-themes-treemacs-config)  ;; The doom themes havn't finished it yet.
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
#+END_SRC

*** Scratch Message

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Scratch Message
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package scratch
    :demand   t
    :straight t)
#+END_SRC

*** Dashboard

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Dashboard
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :after    org  ;; Well, if not, it will load the old one org.
    :demand   t
    :straight t
    :init (setq dashboard-startup-banner 'official
                dashboard-items '((recents   . 10)
                                  (bookmarks . 3 )
                                  (projects  . 2 )
                                  (agenda    . 5 )
                                  (registers . 5 )))
    :config (dashboard-setup-startup-hook))
#+END_SRC

*** Window

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Window
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'winner-mode)

  (use-package switch-window
    :straight t
    :init (setq-default switch-window-shortcut-style 'alphabet
                        switch-window-timeout nil)
    :bind (("C-x o" . switch-window)))

  ;; When splitting window, show (other-buffer) in the new window
  (defun split-window-func-with-other-buffer (split-function)
    (lambda (&optional arg)
      "Split this window and switch to the new window unless ARG is provided."
      (interactive "P")
      (funcall split-function)
      (let ((target-window (next-window)))
        (set-window-buffer target-window (other-buffer))
        (unless arg
          (select-window target-window)))))

  (global-set-key (kbd "C-x 2")
                  (split-window-func-with-other-buffer 'split-window-vertically))
  (global-set-key (kbd "C-x 3")
                  (split-window-func-with-other-buffer 'split-window-horizontally))


  (defun toggle-delete-other-windows ()
    "Delete other windows in frame if any, or restore previous window config."
    (interactive)
    (if (and winner-mode
             (equal (selected-window) (next-window)))
        (winner-undo)
      (delete-other-windows)))

  (global-set-key (kbd "C-x 1") 'toggle-delete-other-windows)
#+END_SRC

*** Session

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Session
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq desktop-path              (list user-emacs-directory)
        desktop-auto-save-timeout 600)
  (desktop-save-mode 1)


  (defun nasy:desktop-time-restore (orig &rest args)
    (let ((start-time (current-time)))
      (prog1
          (apply orig args)
        (message "Desktop restored in %.2fms"
                 (benchmark-init/time-subtract-millis (current-time)
                                                 start-time)))))
  (advice-add 'desktop-read :around 'nasy:desktop-time-restore)

  (defun nasy:desktop-time-buffer-create (orig ver filename &rest args)
    (let ((start-time (current-time)))
      (prog1
          (apply orig ver filename args)
        (message "Desktop: %.2fms to restore %s"
                 (benchmark-init/time-subtract-millis (current-time)
                                                 start-time)
                 (when filename
                   (abbreviate-file-name filename))))))
  (advice-add 'desktop-create-buffer :around 'nasy:desktop-time-buffer-create)


  (setq-default history-length 1000)
  (add-hook 'after-init-hook 'savehist-mode)


  (use-package session
    :defer    t
    :straight t
    :hook ((after-init . session-initialize))
    :init
    (setq session-save-file (expand-file-name ".session" user-emacs-directory)
          session-name-disable-regexp "\\(?:\\`'/tmp\\|\\.git/[A-Z_]+\\'\\)"
          session-save-file-coding-system 'utf-8
          desktop-globals-to-save
          (append '((comint-input-ring        . 50)
                    (compile-history          . 30)
                    desktop-missing-file-warning
                    (dired-regexp-history     . 20)
                    (extended-command-history . 30)
                    (face-name-history        . 20)
                    (file-name-history        . 100)
                    (grep-find-history        . 30)
                    (grep-history             . 30)
                    (ido-buffer-history       . 100)
                    (ido-last-directory-list  . 100)
                    (ido-work-directory-list  . 100)
                    (ido-work-file-list       . 100)
                    (ivy-history              . 100)
                    (magit-read-rev-history   . 50)
                    (minibuffer-history       . 50)
                    (org-clock-history        . 50)
                    (org-refile-history       . 50)
                    (org-tags-history         . 50)
                    (query-replace-history    . 60)
                    (read-expression-history  . 60)
                    (regexp-history           . 60)
                    (regexp-search-ring       . 20)
                    register-alist
                    (search-ring              . 20)
                    (shell-command-history    . 50)
                    tags-file-name
                    tags-table-list))))
#+END_SRC

*** Disable Mouse

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Disable Mouse
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package disable-mouse
    :straight t
    :bind (([mouse-4] . (lambda ()
                          (interactive)
                          (scroll-down 1)))
           ([mouse-5] . (lambda ()
                          (interactive)
                          (scroll-up 1)))))
#+END_SRC

** Custom Functions

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Custom Functions
  ;;----------------------------------------------------------------------------
#+END_SRC

*** Reload the init-file

#+BEGIN_SRC emacs-lisp
  (defun radian-reload-init ()
    "Reload init.el."
    (interactive)
    (straight-transaction
      (straight-mark-transaction-as-init)
      (message "Reloading init.el...")
      (load user-init-file nil 'nomessage)
      (message "Reloading init.el... done.")))

  (defun radian-eval-buffer ()
    "Evaluate the current buffer as Elisp code."
    (interactive)
    (message "Evaluating %s..." (buffer-name))
    (straight-transaction
      (if (null buffer-file-name)
          (eval-buffer)
        (when (string= buffer-file-name user-init-file)
          (straight-mark-transaction-as-init))
        (load-file buffer-file-name)))
    (message "Evaluating %s... done." (buffer-name)))
#+END_SRC

*** Insert Date

#+BEGIN_SRC emacs-lisp
  (defun nasy:insert-current-date ()
    "Insert current date."
    (interactive)
    (insert (shell-command-to-string "echo -n $(date +'%b %d, %Y')")))

  (defun nasy:insert-current-filename ()
    "Insert current buffer filename."
    (interactive)
    (insert (file-relative-name buffer-file-name)))
#+END_SRC

*** Rearrange split windows

#+BEGIN_SRC emacs-lisp
  (defun split-window-horizontally-instead ()
    "Kill any other windows and re-split such that the current window is on the
  top half of the frame."
    (interactive)
    (let ((other-buffer (and (next-window) (window-buffer (next-window)))))
      (delete-other-windows)
      (split-window-horizontally)
      (when other-buffer
        (set-window-buffer (next-window) other-buffer))))

  (defun split-window-vertically-instead ()
    "Kill any other windows and re-split such that the current window is on the
  left half of the frame."
    (interactive)
    (let ((other-buffer (and (next-window) (window-buffer (next-window)))))
      (delete-other-windows)
      (split-window-vertically)
      (when other-buffer
        (set-window-buffer (next-window) other-buffer))))

  (global-set-key (kbd "C-x |") 'split-window-horizontally-instead)
  (global-set-key (kbd "C-x _") 'split-window-vertically-instead)

  ;; Borrowed from http://postmomentum.ch/blog/201304/blog-on-emacs
  (defun nasy:split-window()
    "Split the window to see the most recent buffer in the other window.
  Call a second time to restore the original window configuration."
    (interactive)
    (if (eq last-command 'nasy:split-window)
        (progn
          (jump-to-register :nasy:split-window)
          (setq this-command 'nasy:unsplit-window))
      (window-configuration-to-register :nasy:split-window)
      (switch-to-buffer-other-window nil)))

  (global-set-key (kbd "<f7>") 'nasy:split-window)
#+END_SRC

** Editor

Here is the editor config, including some features and functions.

#+BEGIN_SRC emacs-lisp
  ;;----------------------------------------------------------------------------
  ;; Editor
  ;;----------------------------------------------------------------------------
#+END_SRC

*** Default Settings

Default settings for editor.

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Default Settings
  (setq-default
   bookmark-default-file (expand-file-name ".bookmarks.el" user-emacs-directory)
   buffers-menu-max-size 30
   case-fold-search      t
   column-number-mode    t
   cursor-in-non-selected-windows t
   dired-dwim-target     t
   ediff-split-window-function 'split-window-horizontally
   ediff-window-setup-function 'ediff-setup-windows-plain
   indent-tabs-mode      nil
   line-move-visual      t
   make-backup-files     nil
   mouse-yank-at-point   t
   require-final-newline t
   save-interprogram-paste-before-kill t
   set-mark-command-repeat-pop    t
   tab-always-indent              'complete
   truncate-lines                 nil
   truncate-partial-width-windows nil)

  (delete-selection-mode t)

  (fset 'yes-or-no-p 'y-or-n-p)

  (global-auto-revert-mode t)

  (blink-cursor-mode t)
#+END_SRC

*** Diminish

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Diminish
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :demand   t
    :straight t)
#+END_SRC

*** Beginend

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Beginend
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package beginend
    :straight t
    :hook ((after-init . beginend-global-mode)))
#+END_SRC

*** Carbon Now sh

Emacs to carbon.now.sh integration.

https://github.com/veelenga/carbon-now-sh.el

Try: @@html: <kbd>M-x</kbd> <kbd>carbon-now-sh</kbd> <kbd>RET</kbd> @@

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Carbon Now sh
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; Emacs to carbon.now.sh integration
  ;; https://github.com/veelenga/carbon-now-sh.el
  ;; (carbon-now-sh)
  (straight-use-package 'carbon-now-sh)
#+END_SRC

*** Cheat Sh

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Cheat-Sh
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'cheat-sh)
#+END_SRC

*** Dash

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Dash
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'dash)
#+END_SRC

*** Dired

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Dired
#+END_SRC

**** Dired

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :init
    (let ((gls (executable-find "gls")))
      (when gls (setq insert-directory-program gls)))
    (setq dired-recursive-deletes 'top)
    :bind (:map dired-mode-map
                ([mouse-2] . dired-find-file             )
                ("C-c C-p" . wdired-change-to-wdired-mode)))
#+END_SRC

**** Diredfl

#+BEGIN_SRC emacs-lisp
  (use-package diredfl
    :after dired
    :straight t
    :hook ((after-init . diredfl-global-mode)))
#+END_SRC

**** Uniquify

#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :init  ;; nicer naming of buffers for files with identical names
    (setq uniquify-buffer-name-style   'reverse
          uniquify-separator           " • "
          uniquify-after-kill-buffer-p t
          uniquify-ignore-buffers-re   "^\\*"))
#+END_SRC

**** Diff-hl

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :after dired
    :straight t
    :hook ((dired-mode . diff-hl-dired-mode)))
#+END_SRC

*** Fill Column

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Fill Column
#+END_SRC

**** Unfill

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'unfill)
#+END_SRC

**** Visual-fill-column

#+BEGIN_SRC emacs-lisp
  (use-package visual-fill-column
    :straight t
    :preface
    (defun maybe-adjust-visual-fill-column ()
      "Readjust visual fill column when the global font size is modified.
  This is helpful for writeroom-mode, in particular."
      (if visual-fill-column-mode
          (add-hook 'after-setting-font-hook 'visual-fill-column--adjust-window nil t)
        (remove-hook 'after-setting-font-hook 'visual-fill-column--adjust-window t)))
    :hook ((visual-line-mode        . visual-fill-column-mode        )
           (visual-fill-column-mode . maybe-adjust-visual-fill-column)))
#+END_SRC

*** Grep

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Grep
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq-default grep-highlight-matches t
                grep-scroll-output t)

  (when *is-a-mac*
    (setq-default locate-command "mdfind"))
#+END_SRC

*** Highlight

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Highlight
#+END_SRC

**** hl-line

#+BEGIN_SRC emacs-lisp
  (use-package hl-line
    :hook ((after-init . global-hl-line-mode)))
#+END_SRC

**** Highlight Indent Guides

#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :straight t
    :hook (((prog-mode text-mode) . highlight-indent-guides-mode)))
#+END_SRC

*** iSearch

I only use ~rg~ to search, so I disabled the key-map of isearch.

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; isearch
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package isearch
    :preface
    ;; Search back/forth for the symbol at point
    ;; See http://www.emacswiki.org/emacs/SearchAtPoint
    (defun isearch-yank-symbol ()
      "*Put symbol at current point into search string."
      (interactive)
      (let ((sym (thing-at-point 'symbol)))
        (if sym
            (progn
              (setq isearch-regexp t
                    isearch-string (concat "\\_<" (regexp-quote sym) "\\_>")
                    isearch-message (mapconcat 'isearch-text-char-description isearch-string "")
                    isearch-yank-flag t))
          (ding)))
      (isearch-search-and-update))

    ;; http://www.emacswiki.org/emacs/ZapToISearch
    (defun isearch-exit-other-end (rbeg rend)
      "Exit isearch, but at the other end of the search string.
  This is useful when followed by an immediate kill."
      (interactive "r")
      (isearch-exit)
      (goto-char isearch-other-end))

    :bind (:map isearch-mode-map
                ([remap isearch-delete-char] . isearch-del-char)
                ("C-M-w" . isearch-yank-symbol)
                ([(control return)] . isearch-exit-other-end))
    :config
    (when (fboundp 'isearch-occur)
      ;; to match ivy conventions
      (define-key isearch-mode-map (kbd "C-c C-o") 'isearch-occur)))
#+END_SRC

*** Large File

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Large File
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package vlf
    :straight t
    :init
    (defun ffap-vlf ()
      "Find file at point with VLF."
      (interactive)
      (let ((file (ffap-file-at-point)))
        (unless (file-exists-p file)
          (error "File does not exist: %s" file))
        (vlf file))))
#+END_SRC

*** List Unicode Display

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; List Unicode Display
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'list-unicode-display)
#+END_SRC

*** mmm-mode

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; mmm-mode
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package mmm-auto
    :demand t
    :straight mmm-mode
    :init (setq
           mmm-global-mode              'buffers-with-submode-classes
           mmm-submode-decoration-level 2))
#+END_SRC

*** Multiple Cursors

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Multiple Cursors
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :straight t
    :bind (("C-<"     . mc/mark-previous-like-this)
           ("C->"     . mc/mark-next-like-this)
           ("C-+"     . mc/mark-next-like-this)
           ("C-c C-<" . mc/mark-all-like-this)
           ;; From active region to multiple cursors:
           ("C-c m r" . set-rectangular-region-anchor)
           ("C-c m c" . mc/edit-lines)
           ("C-c m e" . mc/edit-ends-of-lines)
           ("C-c m a" . mc/edit-beginnings-of-lines)))
#+END_SRC

*** Paper Break Lines

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Page Break Lines
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :straight t
    :hook ((after-init . global-page-break-lines-mode))
    :diminish page-break-lines-mode)
#+END_SRC

*** Parens

I use ~smartparens~ with ~rainbow-delimiters~ instead of ~paredit~.

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Parens
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'show-paren-mode)
#+END_SRC

**** Smartparens

#+BEGIN_SRC emacs-lisp
  (use-package smartparens-config
    :straight smartparens
    :hook ((after-init . show-smartparens-global-mode)
           (after-init . smartparens-global-mode))
    :init (setq sp-hybrid-kill-entire-symbol nil))
#+END_SRC

**** Rainbow Delimiters

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook (((prog-mode text-mode) . rainbow-delimiters-mode)))
#+END_SRC

*** PDF Tools

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; PDF Tools
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :straight t
    :config
    (setq-default pdf-view-display-size 'fit-width)
    (bind-keys :map pdf-view-mode-map
               ("\\" . hydra-pdftools/body)
               ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
               ("g"  . pdf-view-first-page)
               ("G"  . pdf-view-last-page)
               ("l"  . image-forward-hscroll)
               ("h"  . image-backward-hscroll)
               ("j"  . pdf-view-next-page)
               ("k"  . pdf-view-previous-page)
               ("e"  . pdf-view-goto-page)
               ("u"  . pdf-view-revert-buffer)
               ("al" . pdf-annot-list-annotations)
               ("ad" . pdf-annot-delete)
               ("aa" . pdf-annot-attachment-dired)
               ("am" . pdf-annot-add-markup-annotation)
               ("at" . pdf-annot-add-text-annotation)
               ("y"  . pdf-view-kill-ring-save)
               ("i"  . pdf-misc-display-metadata)
               ("s"  . pdf-occur)
               ("b"  . pdf-view-set-slice-from-bounding-box)
               ("r"  . pdf-view-reset-slice)))
#+END_SRC

*** Projectil

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Projectil
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :defer    t
    :straight t
    :diminish
    :bind (("C-c TAB" . projectile-find-other-file))
    :bind-keymap ("C-c C-p" . projectile-command-map)
    :hook ((after-init . projectile-global-mode))
    :config (setq projectile-require-project-root nil
                  projectile-project-root-files-top-down-recurring
                  (append '("compile_commands.json"
                            ".cquery")
                          projectile-project-root-files-top-down-recurring)))
#+END_SRC

*** Recentf

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Recentf
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :hook ((after-init . recentf-mode))
    :init (setq-default
           recentf-save-file       "~/.emacs.d/recentf"
           recentf-max-saved-items 100
           recentf-exclude         '("/tmp/" "/ssh:")))
#+END_SRC

*** Smex

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Smex
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :straight t
    :init (setq-default smex-save-file (expand-file-name ".smex-items" user-emacs-directory))
    :bind (("<remap> <execute-extended-command>" . smex)))
#+END_SRC

*** Subword

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Subword
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package subword
    :defer t
    :diminish (subword-mode))
#+END_SRC

*** Which Function

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Which Function
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package which-func
    :demand t
    :hook ((after-init . which-function-mode)))
#+END_SRC

*** Which Key

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Which Key
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :straight t
    :hook ((after-init . which-key-mode)))
#+END_SRC

*** Whitespace

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Whitespace
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :preface
    (defun no-trailing-whitespace ()
      "Turn off display of trailing whitespace in this buffer."
      (setq show-trailing-whitespace nil))
    :init
    (setq-default show-trailing-whitespace t
                  whitespace-style         '(face tabs empty trailing lines-tail))

    ;; But don't show trailing whitespace in SQLi, inf-ruby etc.
    (dolist (hook '(special-mode-hook
                    Info-mode-hook
                    eww-mode-hook
                    term-mode-hook
                    comint-mode-hook
                    compilation-mode-hook
                    twittering-mode-hook
                    minibuffer-setup-hook))
      (add-hook hook #'no-trailing-whitespace))
    :diminish whitespace-mode)


  (use-package whitespace-cleanup-mode
    :straight t
    :init (setq whitespace-cleanup-mode-only-if-initially-clean nil)
    :hook ((after-init . global-whitespace-cleanup-mode))
    :diminish (whitespace-cleanup-mode)
    :bind (("<remap> <just-one-space>" . cycle-spacing)))
#+END_SRC

*** Writeroom Mode

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Writeroom Mode
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package writeroom-mode
    :defer t
    :straight t
    :preface
    (define-minor-mode prose-mode
      "Set up a buffer for prose editing.
  This enables or modifies a number of settings so that the
  experience of editing prose is a little more like that of a
  typical word processor."
      nil " Prose" nil
      (if prose-mode
          (progn
            (when (fboundp 'writeroom-mode)
              (writeroom-mode 1))
            (setq truncate-lines nil)
            (setq word-wrap t)
            (setq cursor-type 'bar)
            (when (eq major-mode 'org)
              (kill-local-variable 'buffer-face-mode-face))
            (buffer-face-mode 1)
            ;;(delete-selection-mode 1)
            (set (make-local-variable 'blink-cursor-interval) 0.6)
            (set (make-local-variable 'show-trailing-whitespace) nil)
            (set (make-local-variable 'line-spacing) 0.2)
            (set (make-local-variable 'electric-pair-mode) nil)
            (ignore-errors (flyspell-mode 1))
            (visual-line-mode 1))
        (kill-local-variable 'truncate-lines)
        (kill-local-variable 'word-wrap)
        (kill-local-variable 'cursor-type)
        (kill-local-variable 'show-trailing-whitespace)
        (kill-local-variable 'line-spacing)
        (kill-local-variable 'electric-pair-mode)
        (buffer-face-mode -1)
        ;; (delete-selection-mode -1)
        (flyspell-mode -1)
        (visual-line-mode -1)
        (when (fboundp 'writeroom-mode)
          (writeroom-mode 0)))))
#+END_SRC

** Languages

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Languages
  ;;----------------------------------------------------------------------------
#+END_SRC

*** Simple Supported Languages

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Simple Supported Languages
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (let ((languages '(elvish-mode
                     fish-mode
                     toml-mode
                     yaml-mode))
        (extras    '(fish-completion
                     ob-elvish)))
    (dolist (language languages)
      (straight-use-package language))
    (dolist (extra extras)
      (straight-use-package extra)))
#+END_SRC

** Org Mode

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Org Mode
  ;;----------------------------------------------------------------------------
#+END_SRC

*** Load

I use ~org~ with ~org-plus-contrib~

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Load
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight org-plus-contrib)
#+END_SRC

*** Basic Configs

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Basic Configs
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org
    :preface
    (advice-add 'org-refile :after (lambda (&rest _) (org-save-all-org-buffers)))

    ;; Exclude DONE state tasks from refile targets
    (defun verify-refile-target ()
      "Exclude todo keywords with a done state from refile targets."
      (not (member (nth 2 (org-heading-components)) org-done-keywords)))
    (setq org-refile-target-verify-function 'verify-refile-target)

    (defun org-refile-anywhere (&optional goto default-buffer rfloc msg)
      "A version of `org-refile' which allows refiling to any subtree."
      (interactive "P")
      (let ((org-refile-target-verify-function))
        (org-refile goto default-buffer rfloc msg)))

    (defun org-agenda-refile-anywhere (&optional goto rfloc no-update)
      "A version of `org-agenda-refile' which allows refiling to any subtree."
      (interactive "P")
      (let ((org-refile-target-verify-function))
        (org-agenda-refile goto rfloc no-update)))

    ;; The original from spacemacs chinese layer shows as follow.
    ;;   (defadvice org-html-paragraph (before org-html-paragraph-advice
    ;;                                         (paragraph contents info) activate)
    ;;     "Join consecutive Chinese lines into a single long line without
    ;; unwanted space when exporting org-mode to html."
    ;;     (let* ((origin-contents (ad-get-arg 1))
    ;;            (fix-regexp "[[:multibyte:]]")
    ;;            (fixed-contents
    ;;             (replace-regexp-in-string
    ;;              (concat
    ;;               "\\(" fix-regexp "\\) *\n *\\(" fix-regexp "\\)") "\\1\\2" origin-contents)))
    ;;       (ad-set-arg 1 fixed-contents)))

    (defun nasy:org-html-paragraph-advice (orig paragraph contents &rest args)
      "Join consecutive Chinese lines into a single long line without
  unwanted space when exporting org-mode to html."
      (let* ((fix-regexp "[[:multibyte:]]")
             (fixed-contents
              (replace-regexp-in-string
               (concat
                "\\(" fix-regexp "\\) *\n *\\(" fix-regexp "\\)") "\\1\\2" contents)))
        (apply orig paragraph fixed-contents args)))
    (advice-add #'org-html-paragraph :around #'nasy:org-html-paragraph-advice)

    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c c" . org-capture)
           :map org-mode-map
           ("C-M-<up>" . org-up-element)
           ("M-h"      . nil)
           ("C-c g"    . org-mac-grab-link))
    :hook ((org-mode-hook . auto-fill-mode))
    :init
    (setq
     org-archive-mark-done nil
     org-archive-location  "%s_archive::* Archive"
     org-archive-mark-done nil

     org-catch-invisible-edits 'show

     org-default-notes-file "~/notes/default.org"

     org-edit-timestamp-down-means-later t

     org-export-coding-system                      'utf-8
     org-export-kill-product-buffer-when-displayed t

     org-fast-tag-selection-single-key 'expert

     org-hide-emphasis-markers t
     org-hide-leading-stars    nil

     org-html-checkbox-type       'html
     org-html-doctype             "html5"
     org-html-html5-fancy         t
     org-html-htmlize-output-type 'css
     org-html-klipsify-src        t
     org-html-mathjax-options     '((path "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-AMS-MML_HTMLorMML")
                                    (scale "100")
                                    (align "center")
                                    (font "Neo-Euler")
                                    (linebreaks "false")
                                    (autonumber "AMS")
                                    (indent "0em")
                                    (multlinewidth "85%")
                                    (tagindent ".8em")
                                    (tagside "right"))
     org-html-with-latex          'mathjax
     org-html-validation-link     nil

     org-indent-mode-turns-on-hiding-stars nil

     org-pretty-entities t

     ;; org latex
     org-latex-compiler "lualatex"
     org-latex-default-packages-alist
     (quote
      (("AUTO" "inputenc" t
        ("pdflatex"))
       ("T1" "fontenc" t
        ("pdflatex"))
       ("" "graphicx" t nil)
       ("" "grffile" t nil)
       ("" "longtable" t nil)
       ("" "wrapfig" nil nil)
       ("" "rotating" nil nil)
       ("normalem" "ulem" t nil)
       ("" "amsmath" t nil)
       ("" "textcomp" t nil)
       ("" "amssymb" t nil)
       ("" "capt-of" nil nil)
       ("colorlinks,linkcolor=blue,anchorcolor=blue,citecolor=green,filecolor=black,urlcolor=blue"
        "hyperref" t nil)
       ("" "luatexja-fontspec" t nil)
       ("" "listings" t nil)))
     org-latex-default-table-environment "longtable"
     org-latex-listings t
     org-latex-listings-langs
     (quote
      ((emacs-lisp "Lisp")
       (lisp "Lisp")
       (clojure "Lisp")
       (c "C")
       (cc "C++")
       (fortran "fortran")
       (perl "Perl")
       (cperl "Perl")
       (Python "python")
       (python "Python")
       (ruby "Ruby")
       (html "HTML")
       (xml "XML")
       (tex "TeX")
       (latex "[LaTeX]TeX")
       (sh "bash")
       (shell-script "bash")
       (gnuplot "Gnuplot")
       (ocaml "Caml")
       (caml "Caml")
       (sql "SQL")
       (sqlite "sql")
       (makefile "make")
       (R "r")))
     org-latex-pdf-process
     (quote
      ("lualatex -shell-escape -interaction nonstopmode %f"
       "lualatex -shell-escape -interaction nonstopmode %f"))
     org-latex-tables-booktabs t

     org-level-color-stars-only nil
     org-list-indent-offset 2
     org-log-done t

     org-outline-path-complete-in-steps nil

     org-refile-allow-creating-parent-nodes 'confirm
     org-refile-targets                     '((nil :maxlevel . 5) (org-agenda-files :maxlevel . 5))
     org-refile-use-cache                   nil
     org-refile-use-outline-path            t

     org-startup-indented  t
     org-startup-folded    'content
     org-startup-truncated nil

     org-support-shift-select t

     org-tags-column 80

     ;; to-do settings
     org-todo-keywords        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)")
                                      (sequence "PROJECT(p)" "|" "DONE(d!/!)" "CANCELLED(c@/!)")
                                      (sequence "WAITING(w@/!)" "DELEGATED(e!)" "HOLD(h)" "|" "CANCELLED(c@/!)")))
     org-todo-repeat-to-state "NEXT"
     org-todo-keyword-faces   (quote (("NEXT" :inherit warning)
                                      ("PROJECT" :inherit font-lock-string-face)))

     org-use-sub-superscripts '{})
    :config
    ;; --------
    (org-babel-do-load-languages
     'org-babel-load-languages
     `((ditaa      . t)
       (dot        . t)
       (elvish     . t)
       (emacs-lisp . t)
       (gnuplot    . t)
       (haskell    . nil)
       (latex      . t)
       (ledger     . t)
       (ocaml      . nil)
       (octave     . t)
       (plantuml   . t)
       (python     . t)
       (R          . t)
       (ruby       . t)
       (screen     . nil)
       (,(if (locate-library "ob-sh") 'sh 'shell) . t)
       (sql . nil)
       (sqlite . t)))

    ;; --------
    (setq luamagick
        '(luamagick
          :programs ("lualatex" "convert")
          :description "pdf > png"
          :message "you need to install lualatex and imagemagick."
          :use-xcolor t
          :image-input-type "pdf"
          :image-output-type "png"
          :image-size-adjust (1.0 . 1.0)
          :latex-compiler ("lualatex -interaction nonstopmode -output-directory %o %f")
          :image-converter ("convert -density %D -trim -antialias %f -quality 100 %O")))
    (add-to-list 'org-preview-latex-process-alist luamagick)

    (setq luasvg
        '(luasvg
          :programs ("lualatex" "dvisvgm")
          :description "dvi > svg"
          :message "you need to install lualatex and dvisvgm."
          :use-xcolor t
          :image-input-type "dvi"
          :image-output-type "svg"
          :image-size-adjust (1.7 . 1.5)
          :latex-compiler ("lualatex -interaction nonstopmode -output-format dvi -output-directory %o %f")
          :image-converter ("dvisvgm %f -n -b min -c %S -o %O")))
    (add-to-list 'org-preview-latex-process-alist luasvg)
    (setq org-preview-latex-default-process 'luasvg))
#+END_SRC

*** Org-Agenda

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Org Agenda
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org-agenda
    :after org
    :init (setq-default org-agenda-clockreport-parameter-plist '(:link t :maxlevel 3))
    :hook ((org-agenda-mode . (lambda () (add-hook 'window-configuration-change-hook 'org-agenda-align-tags nil t)))
           (org-agenda-mode . hl-line-mode))
    :config (add-to-list 'org-agenda-after-show-hook 'org-show-entry)
    (let ((active-project-match "-INBOX/PROJECT"))

      (setq org-stuck-projects
            `(,active-project-match ("NEXT")))

      (setq org-agenda-compact-blocks t
            org-agenda-sticky t
            org-agenda-start-on-weekday nil
            org-agenda-span 'day
            org-agenda-include-diary nil
            org-agenda-sorting-strategy
            '((agenda habit-down time-up user-defined-up effort-up category-keep)
              (todo category-up effort-up)
              (tags category-up effort-up)
              (search category-up))
            org-agenda-window-setup 'current-window
            org-agenda-custom-commands
            `(("N" "Notes" tags "NOTE"
               ((org-agenda-overriding-header "Notes")
                (org-tags-match-list-sublevels t)))
              ("g" "GTD"
               ((agenda "" nil)
                (tags "INBOX"
                      ((org-agenda-overriding-header "Inbox")
                       (org-tags-match-list-sublevels nil)))
                (stuck ""
                       ((org-agenda-overriding-header "Stuck Projects")
                        (org-agenda-tags-todo-honor-ignore-options t)
                        (org-tags-match-list-sublevels t)
                        (org-agenda-todo-ignore-scheduled 'future)))
                (tags-todo "-INBOX"
                           ((org-agenda-overriding-header "Next Actions")
                            (org-agenda-tags-todo-honor-ignore-options t)
                            (org-agenda-todo-ignore-scheduled 'future)
                            (org-agenda-skip-function
                             '(lambda ()
                                (or (org-agenda-skip-subtree-if 'todo '("HOLD" "WAITING"))
                                    (org-agenda-skip-entry-if 'nottodo '("NEXT")))))
                            (org-tags-match-list-sublevels t)
                            (org-agenda-sorting-strategy
                             '(todo-state-down effort-up category-keep))))
                (tags-todo ,active-project-match
                           ((org-agenda-overriding-header "Projects")
                            (org-tags-match-list-sublevels t)
                            (org-agenda-sorting-strategy
                             '(category-keep))))
                (tags-todo "-INBOX/-NEXT"
                           ((org-agenda-overriding-header "Orphaned Tasks")
                            (org-agenda-tags-todo-honor-ignore-options t)
                            (org-agenda-todo-ignore-scheduled 'future)
                            (org-agenda-skip-function
                             '(lambda ()
                                (or (org-agenda-skip-subtree-if 'todo '("PROJECT" "HOLD" "WAITING" "DELEGATED"))
                                    (org-agenda-skip-subtree-if 'nottododo '("TODO")))))
                            (org-tags-match-list-sublevels t)
                            (org-agenda-sorting-strategy
                             '(category-keep))))
                (tags-todo "/WAITING"
                           ((org-agenda-overriding-header "Waiting")
                            (org-agenda-tags-todo-honor-ignore-options t)
                            (org-agenda-todo-ignore-scheduled 'future)
                            (org-agenda-sorting-strategy
                             '(category-keep))))
                (tags-todo "/DELEGATED"
                           ((org-agenda-overriding-header "Delegated")
                            (org-agenda-tags-todo-honor-ignore-options t)
                            (org-agenda-todo-ignore-scheduled 'future)
                            (org-agenda-sorting-strategy
                             '(category-keep))))
                (tags-todo "-INBOX"
                           ((org-agenda-overriding-header "On Hold")
                            (org-agenda-skip-function
                             '(lambda ()
                                (or (org-agenda-skip-subtree-if 'todo '("WAITING"))
                                    (org-agenda-skip-entry-if 'nottodo '("HOLD")))))
                            (org-tags-match-list-sublevels nil)
                            (org-agenda-sorting-strategy
                             '(category-keep))))))))))
#+END_SRC

*** Org Bullets

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Org Bullets
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :after org
    :straight t
    :hook ((org-mode . (lambda () (org-bullets-mode 1)))))
#+END_SRC

*** Org Capture

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Org Capture
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :after org
    :demand t
    :init
    (unless (boundp 'org-capture-templates)
      (defvar org-capture-templates nil))

    (add-to-list 'org-capture-templates '("t" "Tasks"))
    (add-to-list 'org-capture-templates
                 '("tr" "Book Reading Task" entry
                   (file+olp "~/notes/task.org" "Reading" "Book")
                   "* TODO %^{book name}\n%u\n%a\n" :clock-in t :clock-resume t))
    (add-to-list 'org-capture-templates
                 '("tw" "Work Task" entry
                   (file+headline "~/notes/task.org" "Work")
                   "* TODO %^{task name}\n%u\n%a\n" :clock-in t :clock-resume t))

    (add-to-list 'org-capture-templates
                 '("j" "Journal" entry
                   (file "~/notes/journal.org")
                   "* %U - %^{heading}\n  %?"))

    (add-to-list 'org-capture-templates
                 '("i" "Inbox" entry
                   (file "~/notes/inbox.org")
                   "* %U - %^{heading} %^g\n %?\n"))

    (add-to-list 'org-capture-templates
                 '("n" "Notes" entry
                   (file "~/notes/notes.org")
                   "* %^{heading} %t %^g\n  %?\n")))
#+END_SRC

*** Org Cliplink

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Org Cliplink
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'org-cliplink)
#+END_SRC

*** Org Clock

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Org Clock
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org-clock
    :after org
    :preface
    (defun show-org-clock-in-header-line ()
      "Show the clocked-in task in header line"
      (setq-default header-line-format '((" " org-mode-line-string ""))))

    (defun hide-org-clock-from-header-line ()
      "Hide the clocked-in task from header line"
      (setq-default header-line-format nil))
    :init
    (setq org-clock-persist t)
    (setq org-clock-in-resume t)
    ;; Save clock data and notes in the LOGBOOK drawer
    (setq org-clock-into-drawer t)
    ;; Save state changes in the LOGBOOK drawer
    (setq org-log-into-drawer t)
    ;; Removes clocked tasks with 0:00 duration
    (setq org-clock-out-remove-zero-time-clocks t)
    ;; Show clock sums as hours and minutes, not "n days" etc.
    (setq org-time-clocksum-format
          '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))
    :hook ((org-clock-in . show-org-clock-in-header-line)
           ((org-clock-out . org-clock-cancel) . hide-org-clock-from-header))
    :bind (:map org-clock-mode-line-map
               ([header-line mouse-2] . org-clock-goto)
               ([header-line mouse-1] . org-clock-menu))
    :config
    (when (and *is-a-mac* (file-directory-p "/Applications/org-clock-statusbar.app"))
      (add-hook 'org-clock-in-hook
                (lambda () (call-process "/usr/bin/osascript" nil 0 nil "-e"
                                    (concat "tell application \"org-clock-statusbar\" to clock in \""
                                            org-clock-current-task "\""))))
      (add-hook 'org-clock-out-hook
                (lambda () (call-process "/usr/bin/osascript" nil 0 nil "-e"
                                    "tell application \"org-clock-statusbar\" to clock out")))))
#+END_SRC

*** Org Extra Jar -- ob-ditaa & ob-plantuml

Include ob-ditaa and ob-plantuml

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Org Extra Jar
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org
    :preface
    (defun grab-ditaa (url jar-name)
      "Download URL and extract JAR-NAME as `org-ditaa-jar-path'."
      (message "Grabbing " jar-name " for org.")
      (let ((zip-temp (make-temp-name "emacs-ditaa")))
        (unwind-protect
            (progn
              (when (executable-find "unzip")
                (url-copy-file url zip-temp)
                (shell-command (concat "unzip -p " (shell-quote-argument zip-temp)
                                       " " (shell-quote-argument jar-name) " > "
                                       (shell-quote-argument org-ditaa-jar-path)))))
          (when (file-exists-p zip-temp)
            (delete-file zip-temp)))))
    :config
    (unless (and (boundp 'org-ditaa-jar-path)
                 (file-exists-p org-ditaa-jar-path))
      (let ((jar-name "ditaa0_9.jar")
            (url "http://jaist.dl.sourceforge.net/project/ditaa/ditaa/0.9/ditaa0_9.zip"))
        (setq org-ditaa-jar-path (expand-file-name jar-name (file-name-directory user-init-file)))
        (unless (file-exists-p org-ditaa-jar-path)
          (grab-ditaa url jar-name))))

    (let ((jar-name "plantuml.jar")
          (url "http://jaist.dl.sourceforge.net/project/plantuml/plantuml.jar"))
      (setq org-plantuml-jar-path (expand-file-name jar-name (file-name-directory user-init-file)))
      (unless (file-exists-p org-plantuml-jar-path)
        (url-copy-file url org-plantuml-jar-path))))
#+END_SRC

*** Org Pdfview

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Org Pdfview
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'org-pdfview)
#+END_SRC

*** Org Pomodoro

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Org Pomodoro
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro
    :after org-agenda
    :init (setq org-pomodoro-keep-killed-pomodoro-time t)
    :bind (:map org-agenda-mode-map
                ("P" . org-pomodoro)))
#+END_SRC

*** Org Toc

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Org Toc
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'toc-org)
#+END_SRC

*** Org Wc

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Org Wc
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'org-wc)
#+END_SRC
