#+PROPERTY: header-args:emacs-lisp :tangle (concat (file-name-sans-extension (buffer-file-name)) ".new.el")

#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: Emacs Configuration
#+DATE: <2018-10-09 Tue>
#+AUTHOR: Nasy
#+EMAIL: nasyxx@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

* About

An Straightforward Emacs Configuration Bundle.

This is my Emacs configuration in literate form, and it is towards macOS.  I am
not sure if it would work well well in Linux or Windows.

** *NOTICE*

+ Almost all in one file.
+ Use straight.el to manage packages.
+ For GUI.
+ Now only tested with GNU Emacs 27.0.50 in macOS 10.14.
+ Font
    - Fira Code Symbol

* Dependencies

+ Emacs
+ git
+ make (optional)
+ ...

* Installation

To install, clone this repo to @@html:<span>@@ ~/.emacs.d @@html:</span>@@:

#+BEGIN_SRC shell
  git clone https://github.com/nasyxx/emacs.d.git ~/.emacs.d
#+END_SRC

Upon the first time staring up emacs, other third-party packages will be
automatically clone to the @@html:<span>@@ ~straight~: @@html</span>@@ folder and
installed.  If you encounter any errors at that stage, try restarting Emacs, and
maybe running ~make clean-all~ before doing so.

* Updates

Update this config with running ~make update~ or ~git pull~ after a ~make
clean-build~ and restart Emacs.

And I guess you'll need to update third-party packages regularly too if you
have not modificated the ~straight-check-for-modifications~ in @@html:<span>@@
~config/nasy-config.el~: @@html:</span>@@

#+BEGIN_SRC emacs-lisp :tangle no
  M-x straight-pull-all
  M-x straight-rebuild-all
#+END_SRC

If you encounter any errors while updating, you may need to kill Emacs and run
~make clean~. If you still meet errors after doing that, you probably need to run
~make clean-all~ and restart Emacs.

* The Configuration

One thing to note is that this file generates a file named @@html: <span> @@
~init.el~. @@html: </span> @@ *You should not edit that file directly and make any
changes here and regenerate it from Emacs org-mode using ~C-c C-v t~.

** Bootstrap

In this section, the configuration needs to occur early in emacs startup.

*** File Header

This includes some necessary headers.

#+BEGIN_SRC emacs-lisp
  ;;; init.el --- Nasy's emacs.d init file.            -*- lexical-binding: t; -*-
  ;; Copyright (C) 2018  Nasy

  ;; Author: Nasy <nasyxx+emacs@gmail.com>

  ;;; Commentary:

  ;; Nasy's emacs.d init file.  For macOS and Emacs 26, Emacs 27.
#+END_SRC

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; DO NOT EDIT THIS FILE DIRECTLY
  ;; This is a file generated from a literate programing source file located at
  ;; init.org
  ;; You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t
  ;;----------------------------------------------------------------------------

  ;;; Code:
#+END_SRC

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Bootstrap
  ;; In this section, the configuration needs to occur early in emacs startup.
  ;;----------------------------------------------------------------------------
#+END_SRC

*** Lexical Binding

This makes it so that the file that is produced from tangling this file uses
lexical scoping.

#+BEGIN_SRC emacs-lisp
  (setq-default lexical-binding t)
#+END_SRC

*** Some Default Settings

Some default settings are here, including ~debug-on-error~, ~message-log-max~,
~load-prefer-newer~ and ~ad-redefinition-action~.

#+BEGIN_SRC emacs-lisp
  (setq-default debug-on-error         t
                message-log-max        t
                load-prefer-newer      t
                ad-redefinition-action 'accept)
#+END_SRC

*** Is A Mac?

If this os is macOS?

#+BEGIN_SRC emacs-lisp
  (defconst *is-a-mac* (eq system-type 'darwin))
#+END_SRC

*** Packages Manager

I use [[https://github.com/raxod502/straight.el][straight.el]] as my packages manager.

#+BEGIN_SRC emacs-lisp
  (setq straight-recipes-gnu-elpa-use-mirror t
        straight-repository-branch           "develop")

  (defvar bootstrap-version)

  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

At the same time, I use [[https://github.com/jwiegley/use-package][use-package]] to manage packages in one file.

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
#+END_SRC

*** Garbage Collection

Adjust garbage collection thresholds during startup, and thereafter

#+BEGIN_SRC emacs-lisp
  ;;----------------------------------------------------------------------------
  ;; Garbage Collection
  (let ((normal-gc-cons-threshold (* 256 1024 1024))
        (init-gc-cons-threshold (* 512 1024 1024)))
    (setq gc-cons-threshold init-gc-cons-threshold)
    (add-hook 'after-init-hook
              (lambda ()
                (setq gc-cons-threshold normal-gc-cons-threshold))))

  (add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC

*** Benchmark

#+BEGIN_SRC emacs-lisp
  ;;----------------------------------------------------------------------------
  (use-package benchmark-init
    :demand t
    :straight t
    :hook ((after-init . benchmark-init/deactivate)))
#+END_SRC

*** Expand load-path

#+BEGIN_SRC emacs-lisp
  ;;----------------------------------------------------------------------------
  ;; load-path
  (add-to-list 'load-path (expand-file-name "lisp"   user-emacs-directory))
  (add-to-list 'load-path (expand-file-name "config" user-emacs-directory))
#+END_SRC

** Basic Configs

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Configs
  ;; Some basic configurations.
  ;;----------------------------------------------------------------------------
#+END_SRC

*** Custom configs

First, define hooks.

#+BEGIN_SRC emacs-lisp
  ;;----------------------------------------------------------------------------
  ;; Custom configs
  (defvar nasy:config-before-hook nil
    "Hooks to run config functions before load custom.el.")

  (defvar nasy:config-after-hook nil
    "Hooks to run config functions after." )

  (add-hook 'nasy:config-after-hook
            #'(lambda () (message "Hi~ Hoop you have fun with this config.")))
  (add-hook 'after-init-hook
            #'(lambda () (run-hooks 'nasy:config-after-hook)))
#+END_SRC

And then, load them.

#+BEGIN_SRC emacs-lisp
  (require 'nasy-config nil t)
  (require 'user-config nil t)
#+END_SRC

*** Theme

I use doom-themes.

#+BEGIN_SRC emacs-lisp
  ;;----------------------------------------------------------------------------
  ;; Themes
  (use-package doom-themes
    :demand t
    :straight t
    :config
    (load-theme nasy:theme t)
    ;; (doom-themes-treemacs-config)  ;; The doom themes havn't finished it yet.
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
#+END_SRC

** Custom Functions

#+BEGIN_SRC emacs-lisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Custom Functions
  ;;----------------------------------------------------------------------------
#+END_SRC

*** Reload the init-file

#+BEGIN_SRC emacs-lisp
  (defun radian-reload-init ()
    "Reload init.el."
    (interactive)
    (straight-transaction
      (straight-mark-transaction-as-init)
      (message "Reloading init.el...")
      (load user-init-file nil 'nomessage)
      (message "Reloading init.el... done.")))

  (defun radian-eval-buffer ()
    "Evaluate the current buffer as Elisp code."
    (interactive)
    (message "Evaluating %s..." (buffer-name))
    (straight-transaction
      (if (null buffer-file-name)
          (eval-buffer)
        (when (string= buffer-file-name user-init-file)
          (straight-mark-transaction-as-init))
        (load-file buffer-file-name)))
    (message "Evaluating %s... done." (buffer-name)))
#+END_SRC

*** Insert Date

#+BEGIN_SRC emacs-lisp
  (defun nasy:insert-current-date ()
    "Insert current date."
    (interactive)
    (insert (shell-command-to-string "echo -n $(date +'%b %d, %Y')")))

  (defun nasy:insert-current-filename ()
    "Insert current buffer filename."
    (interactive)
    (insert (file-relative-name buffer-file-name)))
#+END_SRC

*** Rearrange split windows

#+BEGIN_SRC emacs-lisp
  (defun split-window-horizontally-instead ()
    "Kill any other windows and re-split such that the current window is on the
  top half of the frame."
    (interactive)
    (let ((other-buffer (and (next-window) (window-buffer (next-window)))))
      (delete-other-windows)
      (split-window-horizontally)
      (when other-buffer
        (set-window-buffer (next-window) other-buffer))))

  (defun split-window-vertically-instead ()
    "Kill any other windows and re-split such that the current window is on the
  left half of the frame."
    (interactive)
    (let ((other-buffer (and (next-window) (window-buffer (next-window)))))
      (delete-other-windows)
      (split-window-vertically)
      (when other-buffer
        (set-window-buffer (next-window) other-buffer))))

  (global-set-key (kbd "C-x |") 'split-window-horizontally-instead)
  (global-set-key (kbd "C-x _") 'split-window-vertically-instead)

  ;; Borrowed from http://postmomentum.ch/blog/201304/blog-on-emacs
  (defun nasy:split-window()
    "Split the window to see the most recent buffer in the other window.
  Call a second time to restore the original window configuration."
    (interactive)
    (if (eq last-command 'nasy:split-window)
        (progn
          (jump-to-register :nasy:split-window)
          (setq this-command 'nasy:unsplit-window))
      (window-configuration-to-register :nasy:split-window)
      (switch-to-buffer-other-window nil)))

  (global-set-key (kbd "<f7>") 'nasy:split-window)
#+END_SRC
