#+begin_src elisp :exports none
;;----------------------------------------------------------------------------
;; Core
#+end_src

* macOS Frame

#+begin_src elisp
  (when *is-a-mac*
    (add-to-list 'default-frame-alist
                 '(ns-transparent-titlebar . t))

    (add-to-list 'default-frame-alist
                 '(ns-appearance . dark))

    (add-to-list 'default-frame-alist
                 '(alpha . (80 . 75)))

    (defun stop-minimizing-window ()
      "Stop minimizing window under macOS."
      (interactive)
      (unless (and *is-a-mac*
                   window-system)
        (suspend-frame))))
#+end_src

* Disable Some Features

#+begin_src elisp
  (setq use-file-dialog        nil
        use-dialog-box         nil
        inhibit-startup-screen t)

  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))

  (when (fboundp 'set-scroll-bar-mode)
    (set-scroll-bar-mode nil))
#+end_src

* Compile

#+begin_src elisp
  ;; https://github.com/jwiegley/emacs-async
  (straight-use-package 'async)
  (use-package dired-async
    :commands dired-async-mode)
  (use-package async-bytecomp
    :config
    (gsetq async-bytecomp-allowed-packages '(all))
    (async-bytecomp-package-mode))

  ;; (straight-use-package 'auto-compile)
  ;; (require 'auto-compile)
  ;; (auto-compile-on-load-mode)
  ;; (auto-compile-on-save-mode)

  (setq-default compilation-scroll-output t)

  ;; https://github.com/jwiegley/alert
  (straight-use-package 'alert)
  (use-package alert
    :defer    t
    :preface
    (defun alert-after-compilation-finish (buf result)
      "Use `alert' to report compilation RESULT if BUF is hidden."
      (when (buffer-live-p buf)
        (unless (catch 'is-visible
                  (walk-windows (lambda (w)
                                  (when (eq (window-buffer w) buf)
                                    (throw 'is-visible t))))
                  nil)
          (alert (concat "Compilation " result)
                 :buffer buf
                 :category 'compilation)))))


  (use-package compile
    :defer t
    :preface
    (defvar nasy/last-compilation-buffer nil
      "The last buffer in which compilation took place.")

    (defun nasy/save-compilation-buffer (&rest _)
      "Save the compilation buffer to find it later."
      (setq nasy/last-compilation-buffer next-error-last-buffer))
    (advice-add 'compilation-start :after 'nasy/save-compilation-buffer)

    (defun nasy/find-prev-compilation (orig &rest args)
      "Find the previous compilation buffer, if present, and recompile there."
      (if (and (null edit-command)
               (not (derived-mode-p 'compilation-mode))
               nasy:last-compilation-buffer
               (buffer-live-p (get-buffer nasy/last-compilation-buffer)))
          (with-current-buffer nasy/last-compilation-buffer
            (apply orig args))
        (apply orig args)))
    :bind (([f6] . recompile))
    :hook ((compilation-finish-functions . alert-after-compilation-finish)))

  (use-package ansi-color
    :defer    t
    :preface
    (defun colourise-compilation-buffer ()
      (when (eq major-mode 'compilation-mode)
        (ansi-cOLOR-APPLY-on-region compilation-filter-start (point-max))))
    :hook ((compilation-filter . colourise-compilation-buffer)))
#+end_src

* Auto Compression

#+begin_src elisp
  (require 'jka-compr)
  (auto-compression-mode)
#+end_src

* History, Saving and Session

#+begin_src elisp :exports none
  ;;----------------------------------------------------------------------------
  ;; History, Saving and Session
#+end_src

#+begin_src elisp
  (gsetq desktop-path              (list user-emacs-directory no-littering-var-directory)
         desktop-dirname           (list user-emacs-directory no-littering-var-directory)
         desktop-auto-save-timeout 600)
  (desktop-save-mode t)
  (gsetq desktop-save 'if-exists)


  (defun nasy/desktop-time-restore (orig &rest args)
    (let ((start-time (current-time)))
      (prog1
          (apply orig args)
        (message "Desktop restored in %.2fms"
                 (benchmark-init/time-subtract-millis (current-time)
                                                 start-time)))))
  (advice-add 'desktop-read :around 'nasy/desktop-time-restore)

  (defun nasy/desktop-time-buffer-create (orig ver filename &rest args)
    (let ((start-time (current-time)))
      (prog1
          (apply orig ver filename args)
        (message "Desktop: %.2fms to restore %s"
                 (benchmark-init/time-subtract-millis (current-time)
                                                 start-time)
                 (when filename
                   (abbreviate-file-name filename))))))
  (advice-add 'desktop-create-buffer :around 'nasy/desktop-time-buffer-create)

  (gsetq kill-ring-max 300)

  (gsetq history-length 3000
         history-delete-duplicates t
         savehist-additional-variables
         '(mark-ring
           global-mark-ring
           search-ring
           regexp-search-ring
           extended-command-history)
         savehist-autosave-interval 60)

  (add-hook #'after-init-hook #'savehist-mode)

  (straight-use-package 'session)
  (use-package session
    :defer    t
    :hook ((after-init . session-initialize))
    :init
    (gsetq session-save-file (no-littering-expand-var-file-name ".session")
           session-name-disable-regexp "\\(?:\\`'/tmp\\|\\.git/[A-Z_]+\\'\\)"
           session-save-file-coding-system 'utf-8
           desktop-globals-to-save
           (append '((comint-input-ring        . 50)
                     (compile-history          . 30)
                     desktop-missing-file-warning
                     (dired-regexp-history     . 20)
                     (extended-command-history . 30)
                     (face-name-history        . 20)
                     (file-name-history        . 100)
                     (grep-find-history        . 30)
                     (grep-history             . 30)
                     (ivy-history              . 100)
                     (magit-revision-history   . 50)
                     (minibuffer-history       . 50)
                     (org-clock-history        . 50)
                     (org-refile-history       . 50)
                     (org-tags-history         . 50)
                     (query-replace-history    . 60)
                     (read-expression-history  . 60)
                     (regexp-history           . 60)
                     (regexp-search-ring       . 20)
                     register-alist
                     (search-ring              . 20)
                     (shell-command-history    . 50)
                     tags-file-name
                     tags-table-list
                     kill-ring))))
#+end_src

* Auto Save (Super Save)

#+begin_src elisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Auto Save
  ;; I use super save to auto save files.
#+end_src

I use super save to auto save files.

#+begin_src elisp
  (straight-use-package 'super-save)
  (use-package super-save
    :ghook 'after-init-hook
    :gfhook '(lambda () (remove-hook #'mouse-leave-buffer-hook #'super-save-command))
    :init (gsetq super-save-auto-save-when-idle nil
                 super-save-remote-files        nil
                 super-save-hook-triggers       nil
                 super-save-triggers
                 '(ibuffer other-window windmove-up windmove-down windmove-left windmove-right next-buffer previous-buffer)))
#+end_src

* Text Scale

#+begin_src elisp
  (straight-use-package 'default-text-scale)
  (use-package default-text-scale
    :commands default-text-scale-mode
    :ghook 'after-init-hook)
#+end_src
