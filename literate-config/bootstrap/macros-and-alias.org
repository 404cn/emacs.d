#+begin_src elisp :exports none
;;----------------------------------------------------------------------------
;; Macros & Alias.
#+end_src

Useful Macros and Alias.

#+begin_src elisp
  (defmacro λ! (&rest body)
    "A shortcut for inline interactive lambdas."
    (declare (doc-string 1))
    `(lambda () (interactive) ,@body))

  (defalias 'lambda! 'λ!)

  (defmacro after! (package &rest body)
    "Evaluate BODY after PACKAGE have loaded.
  PACKAGE is a symbol or list of them. These are package names, not modes,
  functions or variables. It can be:
  - An unquoted package symbol (the name of a package)
      (after! helm BODY...)
  - An unquoted list of package symbols (i.e. BODY is evaluated once both magit
    and git-gutter have loaded)
      (after! (magit git-gutter) BODY...)
  - An unquoted, nested list of compound package lists, using any combination of
    :or/:any and :and/:all
      (after! (:or package-a package-b ...)  BODY...)
      (after! (:and package-a package-b ...) BODY...)
      (after! (:and package-a (:or package-b package-c) ...) BODY...)
    Without :or/:any/:and/:all, :and/:all are implied.
  This is a wrapper around `eval-after-load' that:
  1. Suppresses warnings for disabled packages at compile-time
  2. No-ops for package that are disabled by the user (via `package!')
  3. Supports compound package statements (see below)
  4. Prevents eager expansion pulling in autoloaded macros all at once"
    (declare (indent defun) (debug t))
    (if (symbolp package)
        (list (if (or (not (bound-and-true-p byte-compile-current-file))
                      (require package nil 'noerror))
                  #'progn
                #'with-no-warnings)
              (let ((body (macroexp-progn body)))
                `(if (featurep ',package)
                     ,body
                   ;; We intentionally avoid `with-eval-after-load' to prevent
                   ;; eager macro expansion from pulling (or failing to pull) in
                   ;; autoloaded macros/packages.
                   (eval-after-load ',package ',body))))
      (let ((p (car package)))
        (cond ((not (keywordp p))
               `(after! (:and ,@package) ,@body))
              ((memq p '(:or :any))
               (macroexp-progn
                (cl-loop for next in (cdr package)
                         collect `(after! ,next ,@body))))
              ((memq p '(:and :all))
               (dolist (next (cdr package))
                 (setq body `((after! ,next ,@body))))
               (car body))))))

  (defmacro prependq! (sym &rest lists)
    "Prepend LISTS to SYM in place."
    `(setq ,sym (append ,@lists ,sym)))

  (defmacro appendq! (sym &rest lists)
    "Append LISTS to SYM in place."
    `(setq ,sym (append ,sym ,@lists)))

  (defmacro delq! (elt list &optional fetcher)
    "`delq' ELT from LIST in-place.
  If FETCHER is a function, ELT is used as the key in LIST (an alist)."
    `(setq ,list
           (delq ,(if fetcher
                      `(funcall ,fetcher ,elt ,list)
                    elt)
                 ,list)))

  (defmacro defadvice! (symbol arglist &optional docstring &rest body)
    "Define an advice called SYMBOL and add it to PLACES.
  ARGLIST is as in `defun'. WHERE is a keyword as passed to `advice-add', and
  PLACE is the function to which to add the advice, like in `advice-add'.
  DOCSTRING and BODY are as in `defun'.
  \(fn SYMBOL ARGLIST &optional DOCSTRING &rest [WHERE PLACES...] BODY\)"
    (declare (doc-string 3) (indent defun))
    (unless (stringp docstring)
      (push docstring body)
      (setq docstring nil))
    (let (where-alist)
      (while (keywordp (car body))
        (push `(cons ,(pop body) (nasy-enlist ,(pop body)))
              where-alist))
      `(progn
         (defun ,symbol ,arglist ,docstring ,@body)
         (dolist (targets (list ,@(nreverse where-alist)))
           (dolist (target (cdr targets))
             (advice-add target (car targets) #',symbol))))))

  (defmacro undefadvice! (symbol _arglist &optional docstring &rest body)
    "Undefine an advice called SYMBOL.
  This has the same signature as `defadvice!' an exists as an easy undefiner when
  testing advice (when combined with `rotate-text').
  \(fn SYMBOL ARGLIST &optional DOCSTRING &rest [WHERE PLACES...] BODY\)"
    (declare (doc-string 3) (indent defun))
    (let (where-alist)
      (unless (stringp docstring)
        (push docstring body))
      (while (keywordp (car body))
        (push `(cons ,(pop body) (nasy-enlist ,(pop body)))
              where-alist))
      `(dolist (targets (list ,@(nreverse where-alist)))
         (dolist (target (cdr targets))
           (advice-remove target #',symbol)))))
#+end_src
