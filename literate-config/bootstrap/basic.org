* Disable Mouse

#+begin_src elisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Disable Mouse
#+end_src

#+begin_src elisp
  (straight-use-package 'disable-mouse)
#+end_src

* Minibuffer

#+begin_src elisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Minibuffer
#+end_src

#+begin_src elisp
  (setq enable-recursive-minibuffers t)

  (minibuffer-depth-indicate-mode)

  ;; https://www.reddit.com/r/emacs/comments/4d8gvt/how_do_i_automatically_close_the_minibuffer_after/
  (defun helper/kill-minibuffer ()
    "Exit the minibuffer if it is active."
    (when (and (>= (recursion-depth) 1)
             (active-minibuffer-window))
      (abort-recursive-edit)))

  (add-hook #'mouse-leave-buffer-hook #'helper/kill-minibuffer)
#+end_src

* Scratch Message

#+begin_src elisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Scratch Message
#+end_src

#+begin_src elisp
  (straight-use-package 'scratch)
#+end_src

* Shell & Term

#+begin_src elisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Shell & Term
#+end_src

** Shell

#+begin_src elisp
  (straight-use-package 'shell)

  (straight-use-package 'cmd-to-echo)


  (straight-use-package 'command-log-mode)

  (straight-use-package 'noflet)

  (use-package noflet
    :commands (noflet)
    :defer t)

  (defun nasy:shell-command-in-view-mode (start end command &optional output-buffer replace &rest other-args)
    "Put \"*Shell Command Output*\" buffers into view-mode."
    (unless (or output-buffer replace)
      (with-current-buffer "*Shell Command Output*"
        (view-mode 1))))
  (advice-add 'shell-command-on-region :after 'nasy:shell-command-in-view-mode)


  (straight-use-package 'exec-path-from-shell)
  (use-package exec-path-from-shell
    :demand   *is-a-mac*
    :preface
    ;; Non-Forking Shell Command To String
    ;; https://github.com/bbatsov/projectile/issues/1044
    ;;--------------------------------------------------------------------------

    (defun call-process-to-string (program &rest args)
      (with-temp-buffer
        (apply 'call-process program nil (current-buffer) nil args)
        (buffer-string)))

    (defun get-call-process-args-from-shell-command (command)
      (cl-destructuring-bind
          (the-command . args) (split-string command " ")
        (let ((binary-path (executable-find the-command)))
          (when binary-path
            (cons binary-path args)))))

    (defun shell-command-to-string (command)
      (let ((call-process-args
             (get-call-process-args-from-shell-command command)))
        (if call-process-args
            (apply 'call-process-to-string call-process-args)
          (shell-command-to-string command))))

    (defun try-call-process (command)
      (let ((call-process-args
             (get-call-process-args-from-shell-command command)))
        (if call-process-args
            (apply 'call-process-to-string call-process-args))))

    (advice-add 'shell-command-to-string :before-until 'try-call-process)

    (defun call-with-quick-shell-command (fn &rest args)
      (noflet ((shell-command-to-string
                (&rest args)
                (or (apply 'try-call-process args) (apply this-fn args))))
              (apply fn args)))

    (advice-add 'projectile-find-file :around 'call-with-quick-shell-command)
    :init (gsetq shell-command-switch "-ic"
                 shell-file-name      "zsh")
    :config
    ;; (when nil (message "PATH: %s, INFO: %s" (getenv "PATH")
    ;;                    (getenv "ENVIRONMENT_SETUP_DONE"))
    ;;       (setq exec-path-from-shell-debug t))
    (gsetq exec-path-from-shell-arguments nil
           exec-path-from-shell-check-startup-files nil)
    (add-to-list 'exec-path-from-shell-variables "SHELL")
    (exec-path-from-shell-initialize)
    (add-to-list 'exec-path "~/.pyenv/shims/"))
#+end_src

** Term

#+begin_src elisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Term
#+end_src

Emacs libvterm intergration

https://github.com/akermu/emacs-libvterm

#+begin_src elisp
  (when *vterm*
    (straight-use-package 'vterm))
#+end_src
