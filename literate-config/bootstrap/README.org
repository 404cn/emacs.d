* File Header

This includes some necessary headers.

#+begin_src elisp
  ;;; init.el --- Nasy's emacs.d init file.            -*- lexical-binding: t; -*-
  ;; Copyright (C) 2018  Nasy

  ;; Author: Nasy <nasyxx+emacs@gmail.com>

  ;;; Commentary:

  ;; Nasy's emacs.d init file.  For macOS and Emacs 26, Emacs 27.
#+end_src

#+begin_src elisp :exports none
  ;;----------------------------------------------------------------------------
  ;; DO NOT EDIT THIS FILE DIRECTLY
  ;; This is a file generated from a literate programing source file located at
  ;; README.org
  ;;
  ;; You should make any changes there and regenerate it from Emacs org-mode
  ;; using C-c C-v t
  ;;----------------------------------------------------------------------------

  ;;; Code:
#+end_src

#+begin_src elisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Bootstrap
  ;; In this section, the configuration needs to occur early in emacs startup.
  ;;----------------------------------------------------------------------------
#+end_src

* Lexical Binding

This makes it so that the file that is produced from tangling this file uses
lexical scoping.

#+begin_src elisp
  (setq-default lexical-binding t)
#+end_src

* Some Default Settings

Some default settings are here, including ~debug-on-error~, ~message-log-max~,
~load-prefer-newer~ and ~ad-redefinition-action~.

#+begin_src elisp
  (setq-default debug-on-error         t
                message-log-max        t
                load-prefer-newer      t
                ad-redefinition-action 'accept)
#+end_src

* Macros & Alias

#+include: "macros-and-alias.org" :minlevel 2

* Is A Mac?

If this os is macOS?

#+begin_src elisp
  (defconst *is-a-mac* (eq system-type 'darwin))
#+end_src

* Packages Manager

#+include: "package-manager.org" :minlevel 2

* Garbage Collection

Adjust garbage collection thresholds during startup, and thereafter

#+begin_src elisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Garbage Collection
#+end_src

#+begin_src elisp
  (let ((normal-gc-cons-threshold (* 256 1024 1024))
        (init-gc-cons-threshold (* 512 1024 1024)))
    (setq gc-cons-threshold init-gc-cons-threshold)
    (add-hook #'after-init-hook
              (lambda! (setq gc-cons-threshold normal-gc-cons-threshold))))

  (add-hook 'focus-out-hook #'garbage-collect)
#+end_src

* Benchmark

#+begin_src elisp
  (use-package benchmark-init
    :demand   t
    :straight t
    :hook ((after-init . benchmark-init/deactivate)))
#+end_src

* Expand load-path

#+begin_src elisp
  (add-to-list 'load-path (expand-file-name "lisp"   user-emacs-directory))
  (add-to-list 'load-path (expand-file-name "custom" user-emacs-directory))
#+end_src

* No Littering

#+begin_src elisp
  (use-package no-littering
    :straight t)
#+end_src

* Key Definition

#+include: "keydef.org" :minlevel 2

* Load Org

#+include: "early-load-org-mode.org" :minlevel 2

* Core

#+include: "core.org" :minlevel 2

* Basic

#+include: "basic.org" :minlevel 2
