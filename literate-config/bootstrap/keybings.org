* global map

#+begin_src elisp
  (general-define-key
   "C-."  #'imenu

   ;;; newlines
   [remap newline]  #'newline-and-indent
   "C-j"            #'default/newline

   ;;; search
   "C-s"    (cond
             ((eq *ivy-or-helm* 'ivy)
              #'swiper-isearch)
             ((eq *ivy-or-helm* 'helm)
              #'swiper-helm)
             (t #'isearch-forward))
   "C-S-s"  (cond
             ((eq *ivy-or-helm* 'ivy)
              #'swiper-isearch-thing-at-point))
   "C-r"    (cond
             ((eq *ivy-or-helm* 'ivy)
              #'ivy-resume)
             ((eq *ivy-or-helm* 'helm)
              #'helm-resume)
             (t #'isearch-backward))

   ;;; buffers
   "C-x b"    #'switch-to-buffer
   "C-x 4 b"  #'switch-to-buffer-other-window
   "C-x C-b"  #'ibuffer-list-buffers
   "C-x K"    #'nasy/kill-this-buffer-in-all-windows)
#+end_src

* define nasy-map

#+begin_src elisp
  (defvar nasy-map
    (let ((map (make-sparse-keymap)))
      map)
    "Nasy Keymaps.")

  (general-create-definer nasy-def
    :prefix "C-c"
    :prefix-map 'nasy-map)


  (defmacro n/map (key name desc &rest rest)
    "Nasy keymap define macro."
    (let ((n/name (format "nasy/%s" name)))
      (let ((keymap (intern (concat n/name "-map")))
            (def    (intern (concat n/name "-def"))))
       `(progn
          (defvar ,keymap (make-sparse-keymap) ,desc)
          (nasy-def ,key '(:keymap ,keymap :wk ,n/name))
          (general-create-definer ,def
            :keymaps ',keymap)
          (,def ,@rest)))))
#+end_src

* code map

#+begin_src elisp
  (n/map
   "c" "code" "Nasy code keymap"
   "c" #'compile
   "C" #'recompile
   "k" #'nasy/lookup/documentation

   "x" #'flycheck-list-errors

   "a" #'lsp-excute-code-action
   "f" #'nasy/lsp-format-region-or-buffer
   "i" #'lsp-organize-imports
   "r" #'lsp-rename
   "j" (cond
        ((eq *ivy-or-helm* 'ivy)
         #'lsp-ivy-workspace-symbol)
        ((eq *ivy-or-helm* 'helm)
         #'helm-ivy-workspace-symbol))
   "J" (cond
        ((eq *ivy-or-helm* 'ivy)
         #'lsp-ivy-global-workspace-symbol)
        ((eq *ivy-or-helm* 'helm)
         #'helm-ivy-global-workspace-symbol)))
#+end_src

* Company

#+begin_src elisp
  (general-define-key
   "C-;"  #'nasy/company-complete)

  (general-define-key
   :keymaps 'company-active-map
   "C-o"        #'company-search-kill-others
   "C-n"        #'company-select-next
   "C-p"        #'company-select-previous
   "C-h"        #'company-quickhelp-manual-begin
   "C-S-h"      #'company-show-doc-buffer
   "C-s"        #'company-search-candidates
   "M-s"        #'company-filter-candidates
   [C-tab]      #'nasy/company-complete
   [tab]        #'company-complete-common-or-cycle
   [backtab]    #'company-select-previous
   [C-return]   #'counsel-company)

  (general-define-key
   :keymaps 'company-search-map
   "C-n"        #'company-search-repeat-forward
   "C-p"        #'company-search-repeat-backward
   "C-s"        (Î»! (company-search-abort) (company-filter-candidates)))
#+end_src

* file map

#+begin_src elisp
  (n/map
   "f" "file" "Nasy file keymap")
#+end_src

