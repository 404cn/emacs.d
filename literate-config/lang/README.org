#+begin_src elisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Languages
  ;;----------------------------------------------------------------------------
#+end_src

* Packages

#+begin_src elisp
  (nasy/s-u-p
   company-restclient
   elvish-mode
   fish-completion
   fish-mode
   markdown-mode
   ob-elvish
   ob-restclient
   pandoc-mode
   restclient
   toml-mode
   yaml-mode)

  (when *rust*
    (nasy/s-u-p cargo rust-mode))
#+end_src

* Configs

** English

#+include: "english.org"

** Language Server Protocol & Debug Adapter Protocol

#+include: "lsp-dap.org"

** C/C++/Object-C (Clangd or ccls)

#+include: "c.org"

** Haskell

#+include: "haskell.org"

** HTML

#+begin_src elisp
  (use-package lsp-html
    :hook ((html-mode . lsp-deferred)))
#+end_src

** JavaScript & TypeScript

#+begin_src elisp
  (use-package lsp-mode
    :disabled t
    :hook ((javascript-mode . lsp-deferred)))
#+end_src

** Lisp

#+include: "lisp.org"

** Markdown

#+begin_src elisp
  (use-package markdown-mode
    :defer t
    :mode ("INSTALL\\'"
           "CONTRIBUTORS\\'"
           "LICENSE\\'"
           "README\\'"
           "\\.markdown\\'"
           "\\.md\\'"))
#+end_src

** Python

#+include: "python.org"

** restclient.el

HTTP REST client tool for emacs

https://github.com/pashky/restclient.el

#+begin_src elisp
  (use-package restclient
    :defer t
    :init
    (nasy/add-company-backend
      'restclient-mode
      '(company-restclient company-files)))
#+end_src

** Rust

Include rust-mode, rls and Cargo.

#+begin_src elisp
  (when *rust*
    (use-package rust-mode
      :defer t
      :hook ((rust-mode . (lambda () (setq-local tab-width 4)))
             (rust-mode . lsp-deferred))
      :config
      (when *rls*
        (add-hook #'rust-mode-hook #'(lambda () (add-to-list 'flycheck-disabled-checkers 'rust-cargo)))))

    (use-package cargo
      :after rust-mode
      :hook ((toml-mode . cargo-minor-mode)
             (rust-mode . cargo-minor-mode))))
#+end_src

** Yaml

#+begin_src elisp
  (use-package lsp-yaml
    :defer t
    :hook ((yaml-mode . lsp-deferred)))
#+end_src
