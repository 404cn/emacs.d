#+begin_src elisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Languages
  ;;----------------------------------------------------------------------------
#+end_src

* English

#+include: "english.org"

* Simple Supported Languages

#+begin_src elisp
  (let ((languages '(elvish-mode
                     fish-mode
                     toml-mode
                     yaml-mode))
        (extras    '(fish-completion
                     ob-elvish)))
    (dolist (language languages)
      (straight-use-package language)
      (require language nil t))
    (dolist (extra extras)
      (straight-use-package extra)
      (require extra nil t)))
#+end_src

* Language Server Protocol & Debug Adapter Protocol

#+include: "lsp-dap.org"

* C/C++/Object-C (Clangd or ccls)

Clangd or ccls.

** clangd

#+begin_src elisp
  (when *clangd*
    (use-package lsp-mode
      :straight t
      :hook (((c-mode c++-mode objc-mode) . lsp-deferred))
      :init (setq-default lsp-clients-clangd-executable *clangd*)))
#+end_src

** ccls

#+begin_src elisp
  (when *ccls*
    (use-package ccls
      :straight t
      :hook (((c-mode c++-mode objc-mode) . (lambda () (require 'ccls) (lsp-deferred))))
      :init (gsetq ccls-executable *ccls*
                   ccls-initialization-options
                   '(:clang (:extraArgs
                             ["-isysroot"
                              "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"]))
                   ccls-sem-highlight-method 'font-lock)
      :config
      (ccls-use-default-rainbow-sem-highlight)
      (defun ccls/callee ()
        (interactive)
        (lsp-ui-peek-find-custom "$ccls/call" '(:callee t)))
      (defun ccls/caller ()
        (interactive)
        (lsp-ui-peek-find-custom "$ccls/call"))
      (defun ccls/vars (kind)
        (lsp-ui-peek-find-custom "$ccls/vars" `(:kind ,kind)))
      (defun ccls/base (levels)
        (lsp-ui-peek-find-custom "$ccls/inheritance" `(:levels ,levels)))
      (defun ccls/derived (levels)
        (lsp-ui-peek-find-custom "$ccls/inheritance" `(:levels ,levels :derived t)))
      (defun ccls/member (kind)
        (lsp-ui-peek-find-custom "$ccls/member" `(:kind ,kind)))

      ;; The meaning of :role corresponds to https://github.com/maskray/ccls/blob/master/src/symbol.h

      ;; References w/ Role::Address bit (e.g. variables explicitly being taken addresses)
      (defun ccls/references-address ()
        (interactive)
        (lsp-ui-peek-find-custom "textDocument/references"
         (plist-put (lsp--text-document-position-params) :role 128)))

      ;; References w/ Role::Dynamic bit (macro expansions)
      (defun ccls/references-macro ()
        (interactive)
        (lsp-ui-peek-find-custom "textDocument/references"
         (plist-put (lsp--text-document-position-params) :role 64)))

      ;; References w/o Role::Call bit (e.g. where functions are taken addresses)
      (defun ccls/references-not-call ()
        (interactive)
        (lsp-ui-peek-find-custom "textDocument/references"
         (plist-put (lsp--text-document-position-params) :excludeRole 32)))

      ;; References w/ Role::Read
      (defun ccls/references-read ()
        (interactive)
        (lsp-ui-peek-find-custom "textDocument/references"
         (plist-put (lsp--text-document-position-params) :role 8)))

      ;; References w/ Role::Write
      (defun ccls/references-write ()
        (interactive)
        (lsp-ui-peek-find-custom "textDocument/references"
         (plist-put (lsp--text-document-position-params) :role 16)))

      ;; xref-find-apropos (workspace/symbol)

      (defun my/highlight-pattern-in-text (pattern line)
        (when (> (length pattern) 0)
          (let ((i 0))
           (while (string-match pattern line i)
             (setq i (match-end 0))
             (add-face-text-property (match-beginning 0) (match-end 0) 'isearch t line))

           line)))

      (with-eval-after-load 'lsp-methods
        ;;; Override
        ;; This deviated from the original in that it highlights pattern appeared in symbol
        (defun lsp--symbol-information-to-xref (pattern symbol)
         "Return a `xref-item' from SYMBOL information."
         (let* ((location (gethash "location" symbol))
                (uri (gethash "uri" location))
                (range (gethash "range" location))
                (start (gethash "start" range))
                (name (gethash "name" symbol)))
           (xref-make (format "[%s] %s"
                              (alist-get (gethash "kind" symbol) lsp--symbol-kind)
                              (my/highlight-pattern-in-text (regexp-quote pattern) name))
                      (xref-make-file-location (string-remove-prefix "file://" uri)
                                               (1+ (gethash "line" start))
                                               (gethash "character" start)))))

        (cl-defmethod xref-backend-apropos ((_backend (eql xref-lsp)) pattern)
          (let ((symbols (lsp--send-request (lsp--make-request
                                             "workspace/symbol"
                                             `(:query ,pattern)))))
            (mapcar (lambda (x) (lsp--symbol-information-to-xref pattern x)) symbols))))))
#+end_src

* Haskell

#+include: "haskell.org"

* HTML

#+begin_src elisp
  (use-package lsp-html
    :straight lsp-mode
    :hook ((html-mode . lsp)))
#+end_src

* JavaScript & TypeScript

#+begin_src elisp
  (use-package lsp-mode
    :disabled t
    :straight t
    :hook ((javascript-mode . lsp)))
#+end_src

* Lisp

#+include: "lisp.org"

* Markdown

#+begin_src elisp
  (use-package markdown-mode
    :defer t
    :straight t
    :mode ("INSTALL\\'"
           "CONTRIBUTORS\\'"
           "LICENSE\\'"
           "README\\'"
           "\\.markdown\\'"
           "\\.md\\'"))
#+end_src

* Pandoc

#+begin_src elisp
  (use-package pandoc-mode
    :defer    t
    :straight t)
#+end_src

* Python

#+include: "python.org"

* Rust

Include rust-mode, rls and Cargo.

#+begin_src elisp
  (when *rust*
    (use-package rust-mode
      :defer t
      :straight t
      :hook ((rust-mode . (lambda () (setq-local tab-width 4)))
             (rust-mode . lsp))
      :config
      (when *rls*
        (add-hook #'rust-mode-hook #'lsp)
        (add-hook #'rust-mode-hook #'(lambda () (add-to-list 'flycheck-disabled-checkers 'rust-cargo))))))

  (use-package cargo
    :after rust-mode
    :straight t
    :hook ((toml-mode . cargo-minor-mode)
           (rust-mode . cargo-minor-mode)))
#+end_src
