#+begin_src elisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Languages
  ;;----------------------------------------------------------------------------
#+end_src

* English

#+include: "english.org"

* Simple Supported Languages

#+begin_src elisp
  (let ((languages '(elvish-mode
                     fish-mode
                     toml-mode
                     yaml-mode))
        (extras    '(fish-completion
                     ob-elvish)))
    (dolist (language languages)
      (straight-use-package language))
    (dolist (extra extras)
      (straight-use-package extra)))
#+end_src

* Language Server Protocol & Debug Adapter Protocol

#+include: "lsp-dap.org"

* C/C++/Object-C (Clangd or ccls)

#+include: "c.org"

* Haskell

#+include: "haskell.org"

* HTML

#+begin_src elisp
  (use-package lsp-html
    :hook ((html-mode . lsp-deferred)))
#+end_src

* JavaScript & TypeScript

#+begin_src elisp
  (use-package lsp-mode
    :disabled t
    :hook ((javascript-mode . lsp-deferred)))
#+end_src

* Lisp

#+include: "lisp.org"

* Markdown

#+begin_src elisp
  (straight-use-package 'markdown-mode)
  (use-package markdown-mode
    :defer t
    :mode ("INSTALL\\'"
           "CONTRIBUTORS\\'"
           "LICENSE\\'"
           "README\\'"
           "\\.markdown\\'"
           "\\.md\\'"))
#+end_src

* Pandoc

#+begin_src elisp
  (straight-use-package 'pandoc-mode)
#+end_src

* Python

#+include: "python.org"

* Rust

Include rust-mode, rls and Cargo.

#+begin_src elisp
  (when *rust*
    (straight-use-package 'rust-mode)
    (straight-use-package 'cargo)
    (use-package rust-mode
      :defer t
      :hook ((rust-mode . (lambda () (setq-local tab-width 4)))
             (rust-mode . lsp-deferred))
      :config
      (when *rls*
        (add-hook #'rust-mode-hook #'(lambda () (add-to-list 'flycheck-disabled-checkers 'rust-cargo)))))

    (use-package cargo
      :after rust-mode
      :hook ((toml-mode . cargo-minor-mode)
             (rust-mode . cargo-minor-mode))))
#+end_src
