* Packages

#+begin_src elisp
  (straight-register-package
   '(parinfer-rust-mode :type git
                        :host github
                        :repo "justinbarclay/parinfer-rust-mode"))

  (nasy/s-u-p cl-lib-highlight
              elisp-def
              highlight-quoted
              macrostep
              parinfer-rust-mode)
#+end_src

* Configs

** cl-lib-highlight

#+begin_src elisp
  (after-x 'lisp-mode
    (use-package cl-lib-highlight
      :config
      (cl-lib-highlight-initialize)))
#+end_src

** elisp-def

#+begin_src elisp
  (use-package elisp-def
    :defer t
    :hook (((emacs-lisp-mode ielm-mode) . elisp-def-mode)))
#+end_src

** Highlight-quoted

#+begin_src elisp
  (use-package highlight-quoted
    :defer t
    :hook ((emacs-lisp-mode . highlight-quoted-mode)))
#+end_src

** lisp-mode

#+begin_src elisp
  (use-package lisp-mode
    :preface
    (defun eval-last-sexp-or-region (prefix)
      "Eval region from BEG to END if active, otherwise the last sexp."
      (interactive "P")
      (if (and (mark) (use-region-p))
          (eval-region (min (point) (mark)) (max (point) (mark)))
        (pp-eval-last-sexp prefix)))
    :general
    (:keymaps 'emacs-lisp-mode-map
              [remap eval-expression] #'pp-eval-expression
              "C-x C-e"               #'eval-last-sexp-or-region))
#+end_src

** macrostep

#+begin_src elisp
  (use-package macrostep
    :defer t
    :general
    (:keymaps #'emacs-lisp-mode-map
              "C-c e" #'macrostep-expand))
#+end_src

** parinfer-rust-mode

#+begin_src elisp
  (use-package parinfer-rust-mode
    :defer t
    :init
    (gsetq parinfer-rust-library       (no-littering-expand-var-file-name "parinfer-rust/parinfer-rust-darwin.so")
           parinfer-rust-auto-download t)
    :ghook lisp-modes-hooks)
#+end_src
