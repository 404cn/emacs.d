* lsp-mode

#+begin_src elisp
  (straight-use-package 'lsp-mode)
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :preface
    (defun delete-company-lsp ()
      "Delete company-lsp added by lsp-mode from company-backends"
      (when 'company-backends
        (gsetq company-backends (delete 'company-lsp company-backends)
               company-backends (delete 'intero-company company-backends))))
    :hook ((lsp-after-open . lsp-enable-imenu)
           ((lsp-mode
             lsp-after-open
             prog-mode
             company-box-mode
             company-mode) . delete-company-lsp))
    :init (gsetq lsp-print-io                     t
                 lsp-print-performance            t
                 lsp-inhibit-message              t
                 lsp-report-if-no-buffer          t
                 lsp-keep-workspace-alive         nil
                 lsp-enable-snippet               t
                 lsp-restart                      'auto-restart
                 lsp-document-sync-method         'full
                 lsp-eldoc-render-all             t
                 lsp-enable-completion-at-point   t
                 lsp-enable-xref                  t
                 lsp-enable-indentation           t
                 lsp-prefer-flymake               nil
                 lsp-enable-on-type-formatting    t
                 lsp-enable-semantic-highlighting t))
#+end_src

* lsp-ui

#+begin_src elisp
  (straight-use-package 'lsp-ui)
  (use-package lsp-ui
    :commands lsp-ui-mode
    :bind (:map lsp-ui-mode-map
                ("M-,"  . lsp-ui-peek-find-definitions)
                ("M-?"  . lsp-ui-peek-find-references)
                ("C-c u"   . lsp-ui-imenu)
                ("C-c C-a" . lsp-ui-sideline-apply-code-actions))
    :ghook 'lsp-mode-hook
    :init
    (gsetq lsp-ui-doc-position 'at-point
           lsp-ui-doc-header nil
           lsp-ui-doc-border "violet"
           ;; lsp-ui-doc-include-signature t
           lsp-ui-sideline-update-mode 'point
           lsp-ui-sideline-delay 1
           lsp-ui-sideline-ignore-duplicate t
           lsp-ui-peek-always-show t
           lsp-ui-flycheck-enable t))
#+end_src

* company-lsp

#+begin_src elisp
  (straight-use-package 'company-lsp)
  (use-package company-lsp
    :after company
    :defer t
    :commands company-lsp
    :init
    (with-eval-after-load 'company-mode
      (general-pushnew
       '(company-lsp
         company-files
         company-dabbrev-code
         company-gtags
         company-etags
         company-keywords
         :with company-yasnippet)
       company-backends))
    (gsetq company-lsp-async               t
           company-lsp-enable-recompletion t
           company-transformers            nil
           company-lsp-enable-snippet      t
           company-lsp-cache-candidates    nil)
    :config
    (setcdr (assq 'pyls company-lsp-filter-candidates) t))
#+end_src

* Dap Mode

#+begin_src elisp
  (straight-use-package 'dap-mode)
#+end_src

* Helm Lsp

#+begin_src elisp
  (straight-use-package 'helm-lsp)
  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
#+end_src

* lsp-treemacs

#+begin_src elisp
  (straight-use-package 'lsp-treemacs)
  (use-package lsp-treemacs
    :commands lsp-treemacs-errors-list
    :config
    (lsp-metals-treeview-enable t)
    (gsetq lsp-metals-treeview-show-when-views-received t))
#+end_src
