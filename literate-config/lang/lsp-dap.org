* lsp-mode

#+begin_src elisp
  (straight-use-package 'lsp-mode)
  (use-package lsp
    :commands (lsp lsp-deferred)
    :preface
    (defun delete-company-lsp ()
      "Delete company-lsp added by lsp-mode from company-backends"
      (when 'company-backends
        (gsetq company-backends (delete 'company-lsp company-backends)
               company-backends (delete 'intero-company company-backends))))
    :hook ((lsp-after-open . lsp-enable-imenu))
    :init (gsetq lsp-log-io                         *debug*
                 lsp-print-performance              *debug*
                 lsp-inhibit-message                t
                 lsp-report-if-no-buffer            *debug*
                 lsp-keep-workspace-alive           t
                 lsp-enable-snippet                 t
                 lsp-auto-guess-root                nil
                 lsp-restart                        'interactive
                 lsp-auto-configure                 nil
                 lsp-document-sync-method           nil
                 lsp-auto-execute-action            nil
                 lsp-eldoc-render-all               t
                 lsp-enable-completion-at-point     nil
                 lsp-enable-xref                    t
                 lsp-enable-indentation             t
                 lsp-diagnostic-package             :auto
                 lsp-enable-on-type-formatting      t
                 lsp-signature-auto-activate        t
                 lsp-enable-semantic-highlighting   t
                 lsp-signature-render-documentation t
                 lsp-eldoc-hook                     nil
                 lsp-enable-text-document-color     t))
#+end_src

* lsp-ui

#+begin_src elisp
  (straight-use-package 'lsp-ui)
  (use-package lsp-ui
    :commands lsp-ui-mode
    :bind (:map lsp-ui-mode-map
                ("M-,"  . lsp-ui-peek-find-definitions)
                ("M-?"  . lsp-ui-peek-find-references)
                ("C-c u"   . lsp-ui-imenu)
                ("C-c C-a" . lsp-ui-sideline-apply-code-actions))
    :hook ((lsp-after-open . lsp-ui-mode))
    :init
    (gsetq lsp-ui-doc-position              'at-point
           lsp-ui-doc-header                nil
           lsp-ui-doc-border                "violet"
           lsp-ui-doc-include-signature     t
           lsp-ui-sideline-update-mode      'point
           lsp-ui-sideline-delay            1
           lsp-ui-sideline-ignore-duplicate t
           lsp-ui-peek-always-show          t
           lsp-ui-flycheck-enable           t))
#+end_src

* company-lsp

#+begin_src elisp
  (straight-use-package 'company-lsp)
  (use-package company-lsp
    :after company
    :defer t
    :commands company-lsp
    :preface
    (defun push-company-lsp-backends ()
     "Push company-lsp to the backends."
     (general-pushnew
       '(company-lsp
         company-files
         (company-dabbrev company-dabbrev-code)
         company-keywords
         company-yasnippet)
       company-backends))
    (defun company-lsp-init-h ()
      "Make sure that `company-capf' is disabled since it is incompatible with
  `company-lsp' (see lsp-mode#884)."
      (if (not (bound-and-true-p company-mode))
          (add-hook 'company-mode-hook #'company-lsp-init-h t t)
        (setq-local company-backends
                    (cons 'company-lsp
                          (remq 'company-capf company-backends)))
        (remove-hook 'company-mode-hook #'company-lsp-init-h t)))
    :hook ((lsp-mode . company-lsp-init-h))
    :init
    (gsetq company-lsp-async               t
           company-lsp-enable-recompletion t
           company-lsp-enable-snippet      t
           company-lsp-cache-candidates    'auto))
#+end_src

* Dap Mode

#+begin_src elisp
  (straight-use-package 'dap-mode)
#+end_src

* lsp-treemacs

#+begin_src elisp
  (straight-use-package 'lsp-treemacs)
  (use-package lsp-treemacs
    :commands lsp-treemacs-errors-list
    :config
    (lsp-metals-treeview-enable t)
    (gsetq lsp-metals-treeview-show-when-views-received t))
#+end_src
