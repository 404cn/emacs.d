* lsp-mode

#+begin_src elisp
  (straight-use-package 'lsp-mode)
  (use-package lsp
    :commands (lsp lsp-deferred)
    :defer t
    :preface
    (defun delete-company-lsp ()
      "Delete company-lsp added by lsp-mode from company-backends"
      (when 'company-backends
        (gsetq company-backends (delete 'intero-company company-backends)
               company-backends (delete 'company-lsp    company-backends))))
    (defun nasy/lsp-init ()
     "Nasy lsp mode init."
     (require 'lsp-mode nil t)
     (lsp-flycheck-enable))
    :hook ((lsp-mode . nasy/lsp-init))
    :init
    (gsetq lsp-log-io                         *debug*
           lsp-log-max                        200
           lsp-print-performance              *debug*
           lsp-inhibit-message                t
           lsp-report-if-no-buffer            *debug*
           lsp-keep-workspace-alive           t
           lsp-enable-snippet                 t
           lsp-auto-guess-root                nil
           lsp-restart                        'interactive
           lsp-auto-configure                 nil
           lsp-document-sync-method           nil
           lsp-auto-execute-action            nil
           lsp-eldoc-render-all               t
           lsp-enable-completion-at-point     t
           lsp-enable-imenu                   t
           lsp-enable-xref                    t
           lsp-enable-links                   t
           lsp-enable-indentation             t
           lsp-enable-symbol-highlighting     t
           lsp-diagnostic-package             :auto
           lsp-enable-on-type-formatting      t
           lsp-signature-auto-activate        t
           lsp-enable-semantic-highlighting   t
           lsp-signature-render-documentation t
           lsp-eldoc-hook                     nil
           lsp-enable-text-document-color     t
           lsp-prefer-capf                    t)

    (defadvice! nasy/lsp-prompt-if-no-project-a (session file-name)
      "Prompt for the project root only if no project was found."
      :after-until #'lsp--calculate-root
      (cond ((not lsp-auto-guess-root)
             nil)
            ((cl-find-if (lambda (dir)
                           (and (lsp--files-same-host dir file-name)
                                (file-in-directory-p file-name dir)))
                         (lsp-session-folders-blacklist session))
             nil)
            ((lsp--find-root-interactively session))))

    ;; Don't prompt to restart LSP servers while quitting Emacs
    (add-hook! 'kill-emacs-hook (setq lsp-restart 'ignore)))
#+end_src

* lsp-ui

#+begin_src elisp
  (straight-use-package 'lsp-ui)
  (use-package lsp-ui
    :commands lsp-ui-mode
    :bind (:map lsp-ui-mode-map
                ("M-,"     . lsp-ui-peek-find-definitions)
                ("M-?"     . lsp-ui-peek-find-references)
                ("C-c u"   . lsp-ui-imenu)
                ("C-c C-a" . lsp-ui-sideline-apply-code-actions))
    :hook ((lsp-mode . lsp-ui-mode))
    :init
    (gsetq lsp-ui-doc-position              'at-point
           lsp-ui-doc-header                nil
           lsp-ui-doc-border                "violet"
           lsp-ui-doc-include-signature     t
           lsp-ui-sideline-update-mode      'point
           lsp-ui-sideline-delay            1
           lsp-ui-sideline-ignore-duplicate t
           lsp-ui-peek-always-show          t
           lsp-ui-flycheck-enable           t))
#+end_src

* company-lsp

#+begin_src elisp
  (straight-use-package 'company-lsp)
  (use-package company-lsp
    :after company
    :defer t
    :commands company-lsp
    :preface
    (defun nasy/lsp-init-company-h ()
      "Make sure that `company-capf' is disabled since it is incompatible with
  `company-lsp' (see lsp-mode#884)."
      (if (not (bound-and-true-p company-mode))
          (add-hook 'company-mode-hook #'nasy/lsp-init-company-h t t)
        (setq-local company-backends
                    (cons 'company-lsp
                          (remq 'company-capf company-backends)))
        (remove-hook 'company-mode-hook #'nasy/lsp-init-company-h t)))
    :hook ((lsp-mode . nasy/lsp-init-company-h))
    :init
    (gsetq company-lsp-async               t
           company-lsp-enable-recompletion t
           company-lsp-enable-snippet      t
           company-lsp-cache-candidates    'auto)
    :config
    (with-no-warnings
      ;; WORKAROUND: Fix tons of unrelated completion candidates shown
      ;; when a candidate is fulfilled
      ;; @see https://github.com/emacs-lsp/lsp-python-ms/issues/79
      (add-to-list 'company-lsp-filter-candidates '(mspyls))

      (defadvice! nasy/company-lsp--on-completion (response prefix)
        "Handle completion RESPONSE.
  PREFIX is a string of the prefix when the completion is requested.
  Return a list of strings as the completion candidates."
        :override #'company-lsp--on-completion
        (let* ((incomplete (and (hash-table-p response) (gethash "isIncomplete" response)))
               (items (cond ((hash-table-p response) (gethash "items" response))
                            ((sequencep response) response)))
               (candidates (mapcar (lambda (item)
                                     (company-lsp--make-candidate item prefix))
                                   (lsp--sort-completions items)))
               (server-id (lsp--client-server-id (lsp--workspace-client lsp--cur-workspace)))
               (should-filter (or (eq company-lsp-cache-candidates 'auto)
                                 (and (null company-lsp-cache-candidates)
                                    (company-lsp--get-config company-lsp-filter-candidates server-id)))))
          (when (null company-lsp--completion-cache)
            (add-hook 'company-completion-cancelled-hook #'company-lsp--cleanup-cache nil t)
            (add-hook 'company-completion-finished-hook #'company-lsp--cleanup-cache nil t))
          (when (eq company-lsp-cache-candidates 'auto)
            ;; Only cache candidates on auto mode. If it's t company caches the
            ;; candidates for us.
            (company-lsp--cache-put prefix (company-lsp--cache-item-new candidates incomplete)))
          (if should-filter
              (company-lsp--filter-candidates candidates prefix)
            candidates)))))
#+end_src

* Dap Mode

#+begin_src elisp
  (straight-use-package 'dap-mode)
#+end_src

* lsp-treemacs

#+begin_src elisp
  (straight-use-package 'lsp-treemacs)
  (use-package lsp-treemacs
    :commands lsp-treemacs-errors-list
    :config
    (lsp-metals-treeview-enable t)
    (gsetq lsp-metals-treeview-show-when-views-received t))
#+end_src
