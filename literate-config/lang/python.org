Include python-mode, black, py-isort, python-docstring and sphinx-doc.

* Python Mode

#+begin_src elisp
  (straight-use-package 'python-mode)
  (use-package python-mode
    :commands python-mode
    :mode ("\\.py\\'" . python-mode)
    :interpreter (("python"  . python-mode)
                  ("python3" . python-mode))
    :preface
    (defcustom nasy*python-buffer "vterm"
      "Nasy Python Buffer"
      :group 'python-mode
      :type 'string)

    (defun nasy/python-send-buffer ()
      "Send current buffer to the running python process."
      (interactive)
      (let ((proc (get-buffer-process nasy*python-buffer)))
        (unless proc
          (error "No process found"))
        (save-buffer)
        (comint-simple-send proc
                            (concat "%run " (format "%s" (buffer-file-name))))
        (pop-to-buffer nasy*python-buffer)))

    (defun nasy/python-send-region (begin end)
      "Evaluate the code in region from BEGIN to END in the python repl.
  if the region is unset, the current line will be used."
      (interactive "r")
      (unless (use-region-p)
        (setq begin (line-beginning-position)
              end (line-end-position)))
      (let* ((text (buffer-substring-no-properties begin end))
             (proc (get-buffer-process nasy*python-buffer)))
        (unless proc
          (error "No process found"))
        (comint-simple-send proc text)
        (display-buffer nasy*python-buffer)))

    (defun nasy/python-send-defun (&optional arg)
      "Send the current defun to inferior Python process.
  When ARG is non-nil do not include decorators."
      (interactive (list current-prefix-arg t))
      (nasy:python-send-region
       (progn
         (end-of-line 1)
         (while (and (or (python-nav-beginning-of-defun)
                      (beginning-of-line 1))
                   (> (current-indentation) 0)))
         (when (not arg)
           (while (and (forward-line -1)
                     (looking-at (python-rx decorator))))
           (forward-line 1))
         (point-marker)
         (progn
           (or (python-nav-end-of-defun)
              (end-of-line 1))
           (point-marker)))))

    (defun nasy/python-switch-to-shell ()
      "Switch to inferior Python process buffer."
      (interactive "p")
      (let ((proc (get-buffer-process nasy:python-buffer)))
        (unless proc
          (error "No process found"))
        (pop-to-buffer nasy*python-buffer)))
    :init
    (general-define-key
     :prefix "C-c"
     :keymaps 'python-mode-map
     "C-b" 'nasy/python-send-buffer
     "C-r" 'nasy/python-send-region
     "C-c" 'nasy/python-send-defun
     "C-z" 'nasy/python-switch-to-shell)
    (general-define-key
     :keymaps 'python-mode-map
     "<S-return>" 'nasy/python-send-region)
    (gsetq python-indent-offset                  4
           indent-tabs-mode                      nil
           python-indent-guess-indent-offset     nil
           python-shell-completion-native-enable nil
           py-set-fill-column-p                  t
           py-shell-name                         nasy*python-buffer)

    ;; A list here https://github.com/palantir/python-language-server/blob/develop/vscode-client/package.json#L23-L230
    ;; I prefer pydocstyle and black, so disabled yapf, though, pydocstyle still cannot be abled.
    ;; pip install black pyls-black -U
    ;; The default line-length is 88 when using black, you can add a file named "pyproject.yaml" that contains
    ;; [tool.black]
    ;; line-length = 79
    ;; (with-eval-after-load 'lsp-pyls
    ;;   (gsetq lsp-pyls-configuration-sources                          ["pydocstyle" "pycodestyle" "pyflakes" "pylint"]
    ;;          lsp-pyls-plugins-pydocstyle-enabled                     t
    ;;          lsp-pyls-plugins-yapf-enabled                           t
    ;;          lsp-pyls-plugins-jedi-definition-follow-imports         t
    ;;          lsp-pyls-plugins-jedi-definition-follow-builtin-imports t
    ;;          lsp-pyls-plugins-jedi-signature-help-enabled            t
    ;;          lsp-pyls-plugins-jedi-symbols-enabled                   t
    ;;          lsp-pyls-plugins-pyls_mypy-live-mode                    nil))
    :config
    (unless *blacken*
      (add-hook #'python-mode-hook
                #'(lambda () (add-hook #'before-save-hook #'lsp-format-buffer nil t)))))
#+end_src

* lsp-python-ms

#+begin_src elisp
  (straight-use-package 'lsp-python-ms)
  (use-package lsp-python-ms
    :defer t
    :preface
    (defun start-lsp-ms ()
     "Start lsp-python-ms."
     (require 'lsp-python-ms)
     (lsp))
    :init (gsetq lsp-python-ms-nupkg-channel "daily"
                 lsp-python-ms-executable    "~/.local/bin/Microsoft.Python.LanguageServer"
                 lsp-python-ms-errors        ["inherit-non-class"
                                              "too-many-function-arguments"
                                              "too-many-positional-arguments-before-star"
                                              "no-method-argument"
                                              "parameter-already-specified"
                                              "parameter-missing"
                                              "positional-argument-after-keyword"
                                              "positional-only-named"
                                              "return-in-init"
                                              "typing-generic-arguments"
                                              "typing-newtype-arguments"
                                              "typing-typevar-arguments"
                                              "unknown-parameter-name"
                                              "unresolved-import"
                                              "undefined-variable"]
                 lsp-python-ms-warnings      ["no-cls-argument"
                                              "no-self-argument"
                                              "variable-not-defined-globally"
                                              "variable-not-defined-nonlocal"])
    :hook ((python-mode . start-lsp-ms)))
#+end_src

* black

#+begin_src elisp
  ;; Now you can use it in lsp.
  ;; NOTICE you have to config black though pyproject.toml.
  (when *blacken*
    (straight-use-package 'blacken)
    (use-package blacken
      :hook ((python-mode . blacken-mode))))
#+end_src

* py-isort

#+begin_src elisp
  (straight-use-package 'py-isort)
  (use-package py-isort
    :hook ((before-save . py-isort-before-save)))
#+end_src

* Python Docstring

#+begin_src elisp
  (straight-use-package 'python-docstring)
  (use-package python-docstring
    :hook ((python-mode . python-docstring-mode)))
#+end_src

* Sphinx Doc

#+begin_src elisp
  (straight-use-package 'sphinx-doc)
  (use-package sphinx-doc
    :hook ((python-mode . sphinx-doc-mode)))
#+end_src

* pyimport

#+begin_src elisp
  (straight-use-package 'pyimport)
  (use-package pyimport
    :bind (:map python-mode-map
                ("C-c C-i" . pyimport-insert-missing)))
#+end_src
