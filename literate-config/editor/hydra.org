#+begin_src elisp
  (use-package hydra
    :straight t
    :config
    (general-define-key
     :prefix "C-x"
     "9" 'hydra-unicode/body
     "|" 'hydra-window/body)
    (general-define-key
     :keymaps 'dired-mode-map
     "." 'hydra-dired/body)
    ;; insert unicode
    (defun nasy:insert-unicode (unicode-name)
      "Same as C-x 8 enter UNICODE-NAME."
      (insert-char (gethash unicode-name (ucs-names))))
    (defhydra hydra-unicode (:hint nil)
      "
      Unicode  _e_ €  _s_ ZERO WIDTH SPACE
               _f_ ♀  _o_ °   _m_ µ
               _r_ ♂  _a_ →   _l_ λ
      "
      ("e" (nasy:insert-unicode "EURO SIGN"))
      ("r" (nasy:insert-unicode "MALE SIGN"))
      ("f" (nasy:insert-unicode "FEMALE SIGN"))
      ("s" (nasy:insert-unicode "ZERO WIDTH SPACE"))
      ("o" (nasy:insert-unicode "DEGREE SIGN"))
      ("a" (nasy:insert-unicode "RIGHTWARDS ARROW"))
      ("m" (nasy:insert-unicode "MICRO SIGN"))
      ("l" (nasy:insert-unicode "GREEK SMALL LETTER LAMBDA")))


    (defhydra hydra-dired (:hint nil :color pink)
      "
    _+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
    _C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
    _D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
    _R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
    _Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
    _S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
    _r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
    _z_ compress-file  _A_ find regexp
    _Z_ compress       _Q_ repl regexp

    T - tag prefix
    "
      ("\\" dired-do-ispell)
      ("(" dired-hide-details-mode)
      (")" dired-omit-mode)
      ("+" dired-create-directory)
      ("=" diredp-ediff)         ;; smart diff
      ("?" dired-summary)
      ("$" diredp-hide-subdir-nomove)
      ("A" dired-do-find-regexp)
      ("C" dired-do-copy)        ;; Copy all marked files
      ("D" dired-do-delete)
      ("E" dired-mark-extension)
      ("e" dired-ediff-files)
      ("F" dired-do-find-marked-files)
      ("G" dired-do-chgrp)
      ("g" revert-buffer)        ;; read all directories again (refresh)
      ("i" dired-maybe-insert-subdir)
      ("l" dired-do-redisplay)   ;; relist the marked or singel directory
      ("M" dired-do-chmod)
      ("m" dired-mark)
      ("O" dired-display-file)
      ("o" dired-find-file-other-window)
      ("Q" dired-do-find-regexp-and-replace)
      ("R" dired-do-rename)
      ("r" dired-do-rsynch)
      ("S" dired-do-symlink)
      ("s" dired-sort-toggle-or-edit)
      ("t" dired-toggle-marks)
      ("U" dired-unmark-all-marks)
      ("u" dired-unmark)
      ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
      ("w" dired-kill-subdir)
      ("Y" dired-do-relsymlink)
      ("z" diredp-compress-this-file)
      ("Z" dired-do-compress)
      ("q" nil)
      ("." nil :color blue))

    (defhydra hydra-window ()
      "
    Movement^^        ^Split^         ^Switch^		^Resize^
    ----------------------------------------------------------------
    _<left>_ ←       	_v_ ertical    	_b_uffer	_h_ X←
    _<down>_ ↓        	_x_ horizontal	_f_ind files	_j_ X↓
    _<up>_ ↑        	_z_ undo      	_a_ce 1		_k_ X↑
    _<right>_ →        	_Z_ reset      	_s_wap		_l_ X→
    _F_ ollow		_D_lt Other   	_S_ave		max_i_mize
    _q_ cancel	_o_nly this   	_d_elete
    "
      ("<left>" windmove-left)
      ("<down>" windmove-down)
      ("<up>" windmove-up)
      ("<right>" windmove-right)
      ("h" hydra-move-splitter-left)
      ("j" hydra-move-splitter-down)
      ("k" hydra-move-splitter-up)
      ("l" hydra-move-splitter-right)
      ("b" helm-mini)
      ("f" helm-find-files)
      ("F" follow-mode)
      ("a" (lambda!
             (ace-window 1)
             (add-hook #'ace-window-end-once-hook
                       #'hydra-window/body)))
      ("v" (lambda!
             (split-window-right)
             (windmove-right)))

      ("x" (lambda!
             (split-window-below)
             (windmove-down)))

      ("s" (lambda!
             (ace-window 4)
             (add-hook #'ace-window-end-once-hook
                       #'hydra-window/body)))
      ("S" save-buffer)
      ("d" delete-window)
      ("D" (lambda!
             (ace-window 16)
             (add-hook #'ace-window-end-once-hook
                       #'hydra-window/body)))

      ("o" delete-other-windows)
      ("i" ace-maximize-window)
      ("z" (progn
             (winner-undo)
             (setq this-command 'winner-undo)))
      ("Z" winner-redo)
      ("q" nil)))
#+end_src
