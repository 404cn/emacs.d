* Helm

#+begin_src elisp
  (straight-use-package 'helm)
  (use-package helm-config
    :diminish helm-mode
    :hook ((after-init . helm-mode)
           (after-init . helm-autoresize-mode))
    :init
    (gsetq helm-M-x-fuzzy-match        t
           helm-buffers-fuzzy-matching t
           helm-recentf-fuzzy-match    t
           helm-imenu-fuzzy-match      t
           helm-locate-fuzzy-match     t
           helm-apropos-fuzzy-match    t
           helm-lisp-fuzzy-completion  t
           helm-allow-mouse            t
           helm-follow-mode-persistent t
           helm-ff-lynx-style-map      t)

    (when (executable-find "curl")
      (gsetq helm-google-suggest-use-curl-p t))

    (gsetq helm-split-window-in-side-p           t
           helm-move-to-line-cycle-in-source     nil
           helm-ff-search-library-in-sexp        t
           helm-scroll-amount                    8
           helm-ff-file-name-history-use-recentf t
           helm-echo-input-in-header-line        t
           helm-source-names-using-follow        '("Buffers" "kill-buffer" "Occur"))

    (gsetq helm-grep-ag-command
           "rg --color=always --colors 'match:fg:black' --colors 'match:bg:yellow' --smart-case --no-heading --line-number %s %s %s"
           helm-grep-ag-pipe-cmd-switches
           '("--colors 'match:fg:black'" "--colors 'match:bg:yellow'"))

    (general-define-key
     "M-x"     'helm-M-x
     "M-y"     'helm-show-kill-ring
     "M-b"     'nasy/helm
     "C-o"     'helm-occur
     "C-s"     'helm-occur
     "C-x C-f" 'helm-find-files)
    (general-define-key
     :prefix "C-x c"
     "x"   'helm-register
     "g"   'helm-google-suggest
     "M-:" 'helm-eval-expression-with-eldoc)
    (general-define-key
     :keymaps 'helm-map
     "<tab>" 'helm-execute-persistent-action ; rebind tab to run persistent action
     "C-i"   'helm-execute-persistent-action ; make TAB works in terminal
     "C-z"   'helm-select-action) ; list actions using C-z
    (general-define-key
     :keymaps 'shell-mode-map
     "C-c C-l" 'helm-comint-input-ring)
    (general-define-key
     :keymaps 'minibuffer-local-map
     "C-c C-l" 'helm-minibuffer-history)

    :config
    (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)

    (require 'helm-buffers)
    (require 'helm-for-files)

    (defun nasy/helm ()
      (interactive)
      (let ((helm-ff-transformer-show-only-basename nil)
            helm-source-list)
        (unless helm-source-buffers-list
          (setq helm-source-buffers-list
                (helm-make-source "Buffers" 'helm-source-buffers)))
        (cond (
               ;; Just add helm-source-projectile-* in list when current place in project.
               (projectile-project-p)
               (setq helm-source-list
                     '(
                       ;; helm-source-awesome-tab-group
                       helm-source-projectile-buffers-list
                       helm-source-buffers-list
                       helm-source-recentf
                       helm-source-projectile-files-list)))

              (t
               (setq helm-source-list
                     '(
                       ;; helm-source-awesome-tab-group
                       helm-source-buffers-list
                       helm-source-recentf))))
        (helm-other-buffer helm-source-list "*helm search*"))))
#+end_src

* Helm Org

#+begin_src elisp
  (use-package helm-org
    :defer t
    :config
    (cl-defun helm-org-headings-in-buffer ()
      (interactive)
      (helm :sources (helm-source-org-headings-for-files
                      (list (projectile-completing-read
                             "File to look at headings from: "
                             (projectile-all-project-files))))
            :candidate-number-limit 99999
            :buffer "*helm org inbuffer*")))
#+end_src

* Helm Company

#+begin_src elisp
  (straight-use-package 'helm-company)
  (use-package helm-company
    :defer t
    :bind (:map
           company-mode-map ("C-:" . helm-company)
           :map
           company-active-map ("C-:" . helm-company)))
#+end_src

* Helm Shell

#+begin_src elisp
  (use-package helm-eshell
    :defer t
    :bind (:map eshell-mode-map
                ("C-c C-l" . helm-eshell-history)))
#+end_src

* Helm Descbings

#+begin_src elisp
  (straight-use-package 'helm-descbinds)
  (use-package helm-descbinds
    :defer t
    :hook ((after-init . helm-descbinds-mode)))
#+end_src

* Helm Projectile

#+begin_src elisp
  (straight-use-package 'helm-projectile)
  (use-package helm-projectile
    :defer t
    :hook ((after-init . helm-projectile-on))
    :init (gsetq projectile-completion-system 'helm))
#+end_src

* Helm Ag

#+begin_src elisp
  (straight-use-package 'helm-ag)
  (use-package helm-ag
    :defer t
    :init (gsetq  ;; brew install rg
           helm-ag-base-command         "rg --no-heading --smart-case"
           helm-ag-fuzzy-match          t
           helm-ag-use-grep-ignore-list t
           helm-ag-use-agignore         t))
#+end_src

* Helm Dash

#+begin_src elisp
  (straight-use-package 'helm-dash)
  (use-package helm-dash
    :defer t
    :init (gsetq helm-dash-docsets-path "~/.docsets"))
#+end_src

* Helm Ls Git

#+begin_src elisp
  (straight-use-package 'helm-ls-git)
  (use-package helm-ls-git
    :defer t
    :bind (("C-<f6>"   . helm-ls-git-ls)
           ("C-x g"    . helm-ls-git-ls)
           ("C-x C-d"  . helm-browse-project)))
#+end_src
