Here is the editor config, including some features and functions.

#+begin_src elisp
  ;;----------------------------------------------------------------------------
  ;; Editor
  ;;----------------------------------------------------------------------------
#+end_src

* Diminish

#+begin_src elisp
  (straight-use-package 'diminish)
#+end_src

* FLX

#+begin_src elisp
  (straight-use-package 'flx)
#+end_src

* Advance Words Count

#+begin_src elisp
  (straight-use-package '(advance-words-count :type git :host github :repo "LdBeth/advance-words-count.el"))
#+end_src

* Anzu

#+begin_src elisp
  (straight-use-package 'anzu)
  (use-package anzu
    :defer    t
    :hook ((after-init . global-anzu-mode))
    :bind ([remap query-replace] . anzu-query-replace-regexp))
#+end_src

* Auto Insert

#+include: "auto-insert.org"

* Avy

#+begin_src elisp
  (straight-use-package 'avy)
  (use-package avy
    :defer t
    :init
    (general-define-key
     "C-:"     #'avy-goto-char
     "C-'"     #'avy-goto-char-2
     "M-g e"   #'avy-goto-word-0
     "M-g w"   #'avy-goto-word-1
     "C-c C-j" #'avy-resume)
    (when *dvorak*
      (gsetq avy-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n ?s))))
#+end_src

* Beacon (Disabled)

#+begin_src elisp
  (use-package beacon
    :disabled t
    :straight t
    :init (setq beacon-size  7
                beacon-color "#f85e9f")
    :hook ((after-init . beacon-mode)))
#+end_src

* Beginend

#+begin_src elisp
  (straight-use-package 'beginend)
  (use-package beginend
    :hook ((after-init . beginend-global-mode)))
#+end_src

* Better Jumper

A configurable jump list implementation for Emacs that can be used to easily
jump back to previous locations.

https://github.com/gilbertw1/better-jumper

#+begin_src elisp
  (straight-use-package 'better-jumper)
  (use-package better-jumper
    :defer t
    :hook (((org-mode org-src-mode prog-mode) . turn-on-better-jumper-mode)
           (better-jumper-post-jump           . recenter))
    :init
    (general-define-key
     [remap xref-pop-marker-stack] #'better-jumper-jump-backward))
#+end_src

* Carbon Now sh

Emacs to carbon.now.sh integration.

https://github.com/veelenga/carbon-now-sh.el

Try: @@html: <kbd>M-x</kbd> <kbd>carbon-now-sh</kbd> <kbd>RET</kbd> @@

#+begin_src elisp
  ;; Emacs to carbon.now.sh integration
  ;; https://github.com/veelenga/carbon-now-sh.el
  ;; (carbon-now-sh)
  (straight-use-package 'carbon-now-sh)
#+end_src

* Cheat Sh

#+begin_src elisp
  (straight-use-package 'cheat-sh)
#+end_src

* Company

#+include: "company.org"

* Dash

#+begin_src elisp
  (straight-use-package 'dash)
#+end_src

* Dash Functional

#+begin_src elisp
  (straight-use-package 'dash-functional)
#+end_src

* Dired

#+include: "dired.org"

* Easy Kill

#+begin_src elisp
  (straight-use-package 'easy-kill)
  (use-package easy-kill
    :bind (([remap kill-ring-save] . easy-kill)
           ([remap mark-sexp]      . easy-mark)))
#+end_src

#+begin_src elisp
  (straight-use-package 'thingopt)
#+end_src

* Eldoc Box

Disabled by default due to it causes lots of cpu.

#+begin_src elisp
  (when *eldoc-box*
    (straight-use-package 'eldoc-box)
    (use-package eldoc-box
      :hook ((eldoc-mode . eldoc-box-hover-mode)
             (eldoc-mode . eldoc-box-hover-at-point-mode))))
#+end_src

* Fill Column

** Unfill

#+begin_src elisp
  (straight-use-package 'unfill)
  (use-package unfill
    :bind (("M-q" . unfill-toggle)))
#+end_src

** Visual-fill-column

#+begin_src elisp
  (straight-use-package 'visual-fill-column)
  (use-package visual-fill-column
    :preface
    (defun maybe-adjust-visual-fill-column ()
      "Readjust visual fill column when the global font size is modified.
  This is helpful for writeroom-mode, in particular."
      (if visual-fill-column-mode
          (add-hook 'after-setting-font-hook 'visual-fill-column--adjust-window nil t)
        (remove-hook 'after-setting-font-hook 'visual-fill-column--adjust-window t)))
    :hook ((visual-line-mode        . visual-fill-column-mode        )
           (visual-fill-column-mode . maybe-adjust-visual-fill-column)))
#+end_src

* Find File in Project

#+begin_src elisp
  (straight-use-package 'find-file-in-project)
  (gsetq ffip-use-rust-fd t)
#+end_src

* Flycheck

#+include: "flycheck.org"

* Fuz.el

Fast and precise fuzzy scoring/matching utils for Emacs, powered by rust

https://github.com/rustify-emacs/fuz.el

#+begin_src elisp
  ;; (straight-use-package 'fuz)
  (use-package fuz
    :disabled t
    :defer t
    :init
    (defun load-fuz ()
      "Load fuz.el."
      (require 'fuz)
      (unless (require 'fuz-core nil t)
        (fuz-build-and-load-dymod)))
    :hook ((after-init . load-fuz)))
#+end_src

* Grab Mac Link

#+begin_src elisp
  (straight-use-package 'grab-mac-link)
#+end_src

* Grep

#+begin_src elisp
  (gsetq-default grep-highlight-matches t
                 grep-scroll-output t)

  (when *is-a-mac*
    (gsetq-default locate-command "mdfind"))
#+end_src

* Highlight

#+include: "highlight.org"

* Helpful

[[https://github.com/Wilfred/helpful]]

#+begin_src elisp
  (straight-use-package 'helpful)
  (use-package helpful
    :bind (("C-c C-d" . helpful-at-point))
    :init (general-define-key
           :prefix "C-h"
           "f" 'helpful-callable
           "v" 'helpful-variable
           "k" 'helpful-key
           "F" 'helpful-function
           "C" 'helpful-command))
#+end_src

* Helm

https://github.com/emacs-helm/helm

# #+include: "helm.org"

* Htmlize

#+begin_src elisp
  (straight-use-package 'htmlize)
  (use-package htmlize
    :defer t
    :init (gsetq htmlize-pre-style t))
#+end_src

* Hydra

#+include: "hydra.org"

* iBuffer

#+include: "ibuffer.org"

* imenu list

#+begin_src elisp
  (straight-use-package 'imenu-list)
  (use-package imenu-list
    :bind (("C-." . imenu-list-smart-toggle))
    :init (setq imenu-list-auto-resize t))
#+end_src

* indent-tools

#+begin_src elisp
  (straight-use-package 'indent-tools)
  (use-package indent-tools
    :bind (("C-c TAB" . indent-tools-hydra/body)))
#+end_src

* iSearch

I only use ~rg~ to search, so I disabled the key-map of isearch.

#+begin_src elisp
  (use-package isearch
    :preface
    ;; Search back/forth for the symbol at point
    ;; See http://www.emacswiki.org/emacs/SearchAtPoint
    (defun isearch-yank-symbol ()
      "*Put symbol at current point into search string."
      (interactive)
      (let ((sym (thing-at-point 'symbol)))
        (if sym
            (progn
              (setq isearch-regexp    t
                    isearch-string    (regexp-quote sym)
                    isearch-message   (mapconcat 'isearch-text-char-description isearch-string "")
                    isearch-yank-flag t))
          (ding)))
      (isearch-search-and-update))

    ;; http://www.emacswiki.org/emacs/ZapToISearch
    (defun isearch-exit-other-end (rbeg rend)
      "Exit isearch, but at the other end of the search string.
  This is useful when followed by an immediate kill."
      (interactive "r")
      (isearch-exit)
      (goto-char isearch-other-end))

    :init
    (general-define-key
     :keymaps 'isearch-mode-map
     [remap isearch-delete-char] #'isearch-del-char
     "C-w"                       #'isearch-yank-symbol
     [(control return)]              #'isearch-exit-other-end
     "C-o"                       #'isearch-occur))
#+end_src

* Ivy, Counsel and Swiper

Now enabled.

#+include: "ivy.org"

* Large File

#+begin_src elisp
  (straight-use-package 'vlf)
  (use-package vlf
    :init
    (defun ffap-vlf ()
      "Find file at point with VLF."
      (interactive)
      (let ((file (ffap-file-at-point)))
        (unless (file-exists-p file)
          (error "File does not exist: %s" file))
        (vlf file))))
#+end_src

* Link Hint

#+begin_src elisp
  (straight-use-package 'link-hint)
  (use-package link-hint
    :bind (("C-c l o" . link-hint-open-link)
           ("C-c l c" . link-hint-copy-link))
    :config
    (general-define-key
     :prefix "C-c l")
    "o" 'link-hint-open-link
    "c" 'link-hint-copy-link)
#+end_src

* List Unicode Display

#+begin_src elisp
  (straight-use-package 'list-unicode-display)
#+end_src

* mmm-mode

#+begin_src elisp
  (straight-use-package 'mmm-mode)
  (use-package mmm-auto
    :init (gsetq
           mmm-global-mode
           'buffers-with-submode-classes
           mmm-submode-decoration-level 2))
#+end_src

* Multiple Cursors

#+begin_src elisp
  (straight-use-package 'multiple-cursors)
  (use-package multiple-cursors
    :bind (("C-<"     . mc/mark-previous-like-this)
           ("C->"     . mc/mark-next-like-this)
           ("C-+"     . mc/mark-next-like-this)
           ("C-c C-<" . mc/mark-all-like-this))
    :config
    ;; From active region to multiple cursors:
    (general-define-key
     :preface "C-c m"
     "r" 'set=rectangular-region-anchor
     "c" 'mc/edit-lines
     "e" 'mc/edit-ends-of-lines
     "a" 'mc/edit-beginnings-of-lines))
#+end_src

* Pangu Spacing

#+begin_src elisp
  (straight-use-package 'pangu-spacing)
  (use-package pangu-spacing
    :init (gsetq pangu-spacing-real-insert-separtor t)
    :hook ((after-init . global-pangu-spacing-mode)))
#+end_src

* Paper Break Lines

#+begin_src elisp
  (straight-use-package 'page-break-lines)
  (use-package page-break-lines
    :hook ((after-init . global-page-break-lines-mode))
    :diminish page-break-lines-mode)
#+end_src

* Parens

#+include: "parens.org"

* PDF Tools

#+begin_src elisp
  (straight-use-package 'pdf-tools)
  (use-package pdf-tools
    :defer t
    :config
    (gsetq-default pdf-view-display-size 'fit-width)
    (bind-keys :map pdf-view-mode-map
               ("\\" . hydra-pdftools/body)
               ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
               ("g"  . pdf-view-first-page)
               ("G"  . pdf-view-last-page)
               ("l"  . image-forward-hscroll)
               ("h"  . image-backward-hscroll)
               ("j"  . pdf-view-next-page)
               ("k"  . pdf-view-previous-page)
               ("e"  . pdf-view-goto-page)
               ("u"  . pdf-view-revert-buffer)
               ("al" . pdf-annot-list-annotations)
               ("ad" . pdf-annot-delete)
               ("aa" . pdf-annot-attachment-dired)
               ("am" . pdf-annot-add-markup-annotation)
               ("at" . pdf-annot-add-text-annotation)
               ("y"  . pdf-view-kill-ring-save)
               ("i"  . pdf-misc-display-metadata)
               ("s"  . pdf-occur)
               ("b"  . pdf-view-set-slice-from-bounding-box)
               ("r"  . pdf-view-reset-slice)))
#+end_src

* Pretty

#+include: "pretty.org"

* Projectile

#+begin_src elisp
  (straight-use-package 'projectile)
  (use-package projectile
    :defer t
    :diminish
    :commands (projectile-project-root
               projectile-project-name
               projectile-project-p
               projectile-locate-dominating-file)
    :bind-keymap ("C-c C-p" . projectile-command-map)
    :ghook '(after-find-file dired-before-readin-hook minibuffer-setup-hook after-init-hook)
    :init
    (gsetq projectile-indexing-method      'hybrid
           projectile-require-project-root 'prompt)
    (general-define-key
     [remap find-tag] #'projectile-find-tag)
    :config
    (gsetq projectile-project-root-files-top-down-recurring
           (append '("compile_commands.json"
                     ".cquery")
                   projectile-project-root-files-top-down-recurring)))
#+end_src

* Prescient

☄️ Simple but effective sorting and filtering for Emacs.

https://github.com/raxod502/prescient.el

#+begin_src elisp
  (straight-use-package 'prescient)
  (use-package prescient
    :defer t
    :hook ((after-init . prescient-persist-mode)))
#+end_src

* Recentf

#+begin_src elisp
  (use-package recentf
    :init (gsetq
           recentf-save-file       "~/.emacs.d/var/recentf"
           recentf-max-saved-items 100
           recentf-exclude         '("/tmp/" "/ssh:"))
    :config
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory))
#+end_src

* Smex/Amx

Now use amx instead of smex.

It's for ivy.

# #+begin_src elisp
#   (straight-use-package 'amx)
#   (use-package amx
#     :init (setq-default amx-save-file (no-littering-expand-var-file-name ".amx-items"))
#     :bind (("<remap> <execute-extended-command>" . amx)))
# #+end_src

* Snails

A modern, easy-to-expand fuzzy search framework

https://github.com/manateelazycat/snails

Not work now.

# #+begin_src elisp
#   (straight-use-package
#    '(snails :no-byte-compile t :type git :host github :repo "manateelazycat/snails"))
#   (use-package snails
#     :commands snails
#     :init
#     (general-define-key
#      "C-s" 'snails))
# #+end_src

* Subword

#+begin_src elisp
  (use-package subword
    :defer t
    :diminish (subword-mode))
#+end_src

* Symbol Overlay

#+begin_src elisp
  (straight-use-package 'symbol-overlay)
  (use-package symbol-overlay
    :bind (("M-i"  . symbol-overlay-put)
           ("M-n"  . symbol-overlay-switch-forward)
           ("M-p"  . symbol-overlay-switch-backward)
           ("<f8>" . symbol-overlay-remove-all)
           ("<f7>" . symbol-overlay-mode)))
#+end_src

* Treemacs

#+include: "treemacs.org"

* Undo/Redo

** Point History

#+begin_src elisp
  (straight-use-package '(point-history :type git :host github :repo "blue0513/point-history"))
  (use-package point-history
    :ghook 'after-init-hook
    :bind (("C-c C-/" . point-history-show))
    :init (gsetq point-history-ignore-buffer "^ \\*Minibuf\\|^ \\*point-history-show*"))
#+end_src

** Undo Propose

#+begin_src elisp
  (straight-use-package 'undo-propose)
  (use-package undo-propose
    :defer
    :config (undo-propose-wrap redo))
#+end_src

* Version Control

#+include: "version-control.org"

* Which Function

#+begin_src elisp
  (use-package which-func
    :defer t
    :ghook 'after-init-hook)
#+end_src

* Which Key

#+begin_src elisp
  (straight-use-package 'which-key)
  (use-package which-key
    :ghook 'after-init-hook)
#+end_src

* Whitespace

#+include: "whitespace.org"

* Writeroom Mode

#+include: "writeroom.org"

* Yasnipeet

#+begin_src elisp
  (straight-use-package 'yasnippet)
  (straight-use-package 'yasnippet-snippets)

  (use-package yasnippet
    :defer t
    :bind (:map yas-minor-mode-map
                ("C-'" . yas-expand))
    :commands (yas-minor-mode)
    :hook (((prog-mode text-mode) . yas-minor-mode))
    :config
    (add-to-list 'yas-snippet-dirs
                 (concat user-emacs-directory "extra/snippets"))
    (yas-reload-all))
#+end_src
