* Company

#+begin_src elisp :exports none
  ;;----------------------------------------------------------------------------
  ;; Company
#+end_src

** Preface Functions

#+begin_src elisp
  ;; Borrow from doom emacs.
  (defvar nasy/company-backend-alist
   '((text-mode company-dabbrev company-yasnippet company-ispell company-files)
     (prog-mode company-capf company-yasnippet company-files)
     (conf-mode company-capf company-dabbrev-code company-yasnippet company-files))
   "An alist matching modes to company backends. The backends for any mode is
  built from this.")


  (defun nasy-enlist (exp)
   "Return EXP wrapped in a list, or as-is if already a list."
   (declare (pure t) (side-effect-free t))
   (if (listp exp) exp (list exp)))


  (defun nasy/add-company-backend (modes &rest backends)
   "Prepends BACKENDS (in order) to `company-backends' in MODES.
  MODES should be one symbol or a list of them, representing major or minor modes.
  This will overwrite backends for MODES on consecutive uses.
  If the car of BACKENDS is nil, unset the backends for MODES.
  Examples:
   (nasy/add-company-backend 'js2-mode
     'company-tide 'company-yasnippet)
   (nasy/add-company-backend 'sh-mode
     '(company-shell :with company-yasnippet))
   (nasy/add-company-backend '(c-mode c++-mode)
     '(:separate company-irony-c-headers company-irony))
   (nasy/add-company-backend 'sh-mode nil)  ; unsets backends for sh-mode"
   (declare (indent defun))
   (dolist (mode (nasy-enlist modes))
     (if (null (car backends))
         (setq nasy/company-backend-alist
               (delq (assq mode nasy/company-backend-alist)
                     nasy/company-backend-alist))
       (setf (alist-get mode nasy/company-backend-alist)
             backends))))

  (defun nasy/company-backends ()
   (let (backends)
     (let ((mode major-mode)
           (modes (list major-mode)))
       (while (setq mode (get mode 'derived-mode-parent))
         (push mode modes))
       (dolist (mode modes)
         (dolist (backend (append (cdr (assq mode nasy/company-backend-alist))
                                  (default-value 'company-backends)))
           (push backend backends)))
       (delete-dups
        (append (cl-loop for (mode . backends) in nasy/company-backend-alist
                         if (or (eq major-mode mode)  ; major modes
                                (and (boundp mode)
                                     (symbol-value mode))) ; minor modes
                         append backends)
                (nreverse backends))))))


  (defun nasy/company-init-backends-h ()
   "Set `company-backends' for the current buffer."
   (if (not company-mode)
       (remove-hook 'change-major-mode-after-body-hook #'nasy/company-init-backends-h 'local)
     (unless (eq major-mode 'fundamental-mode)
       (setq-local company-backends (nasy/company-backends)))
     (add-hook 'change-major-mode-after-body-hook #'nasy/company-init-backends-h nil 'local)))

  (put 'nasy/company-init-backends-h 'permanent-local-hook t)
#+end_src

** Company Mode

#+begin_src elisp
  (straight-use-package 'company)
  (use-package company
    :commands (nasy/company-backends
               nasy/company-init-backends-h
               nasy/company-has-completion-p
               nasy/company-toggle-auto-completion
               nasy/company-complete
               nasy/company-dabbrev
               nasy/company-whole-lines
               nasy/company-dict-or-keywords
               nasy/company-dabbrev-code-previous)
    :preface
    (defun nasy/company-has-completion-p ()
      "Return non-nil if a completion candidate exists at point."
      (and (company-manual-begin)
           (= company-candidates-length 1)))

    (defun nasy/company-toggle-auto-completion ()
      "Toggle as-you-type code completion."
      (interactive)
      (require 'company)
      (setq company-idle-delay (unless company-idle-delay 0.2))
      (message "Auto completion %s"
               (if company-idle-delay "enabled" "disabled")))

    (defun nasy/company-complete ()
      "Bring up the completion popup. If only one result, complete it."
      (interactive)
      (require 'company)
      (when (ignore-errors
              (/= (point)
                  (cdr (bounds-of-thing-at-point 'symbol))))
        (save-excursion (insert " ")))
      (when (and (company-manual-begin)
                 (= company-candidates-length 1))
        (company-complete-common)))

    (defun nasy/company-dabbrev ()
      "Invokes `company-dabbrev-code' in prog-mode buffers and `company-dabbrev'
    everywhere else."
      (interactive)
      (call-interactively
       (if (derived-mode-p 'prog-mode)
           #'company-dabbrev-code
         #'company-dabbrev)))

    (defun nasy/company-whole-lines (command &optional arg &rest ignored)
      "`company-mode' completion backend that completes whole-lines, akin to vim's
    C-x C-l."
      (interactive (list 'interactive))
      (require 'company)
      (pcase command
        (`interactive (company-begin-backend 'nasy/company-whole-lines))
        (`prefix      (company-grab-line "^[\t\s]*\\(.+\\)" 1))
        (`candidates
         (all-completions
          arg
          (delete-dups
           (split-string
            (replace-regexp-in-string
             "^[\t\s]+" ""
             (concat (buffer-substring-no-properties (point-min) (line-beginning-position))
                     (buffer-substring-no-properties (line-end-position) (point-max))))
            "\\(\r\n\\|[\n\r]\\)" t))))))

    (defun nasy/company-dict-or-keywords ()
      "`company-mode' completion combining `company-dict' and `company-keywords'."
      (interactive)
      (require 'company-dict)
      (require 'company-keywords)
      (let ((company-backends '((company-keywords company-dict))))
        (call-interactively #'company-complete)))

    (defun nasy/company-dabbrev-code-previous ()
      "TODO"
      (interactive)
      (require 'company-dabbrev)
      (let ((company-selection-wrap-around t))
        (call-interactively #'nasy/company-dabbrev)
        (company-select-previous-or-abort)))

    :init
    (add-to-list 'completion-styles 'initials t)
    (gsetq company-tooltip-limit             14
           company-dabbrev-downcase          nil
           company-dabbrev-ignore-case       t
           company-global-modes
           '(not erc-mode message-mode help-mode gud-mode eshell-mode)
           company-backends                  '(company-capf)
           company-frontends
           '(company-pseudo-tooltip-frontend
             company-echo-metadata-frontend)
           company-dabbrev-other-buffers     'all
           company-tooltip-align-annotations t
           company-require-match             'never)
    :hook ((company-mode . nasy/company-init-backends-h))
    :bind (("M-/"   . company-files)
           ("M-C-/" . nasy/company-complete)
           :map company-mode-map
           ("M-/"   . nasy/company-complete)
           :map company-active-map
           ("M-/"   . company-other-backend)
           ("C-n"   . company-select-next)
           ("C-p"   . company-select-previous))
    :config
    (global-company-mode +1)
    (defvar nasy/prev-whitespace-mode nil)
    (make-variable-buffer-local 'nasy/prev-whitespace-mode)
    (defvar nasy/show-trailing-whitespace nil)
    (make-variable-buffer-local 'nasy/show-trailing-whitespace)
    (defun pre-popup-draw ()
      "Turn off whitespace mode before showing company complete tooltip"
      (if whitespace-mode
          (progn
            (gsetq my-prev-whitespace-mode t)
            (whitespace-mode -1)))
      (gsetq nasy/show-trailing-whitespace show-trailing-whitespace)
      (gsetq show-trailing-whitespace nil))
    (defun post-popup-draw ()
      "Restore previous whitespace mode after showing company tooltip"
      (if nasy/prev-whitespace-mode
          (progn
            (whitespace-mode 1)
            (gsetq nasy/prev-whitespace-mode nil)))
      (gsetq show-trailing-whitespace nasy/show-trailing-whitespace))
    (advice-add 'company-pseudo-tooltip-unhide :before #'pre-popup-draw)
    (advice-add 'company-pseudo-tooltip-hide :after #'post-popup-draw)

    (defun company-backend-with-yas (backends)
      "Add :with company-yasnippet to company BACKENDS.
    Taken from https://github.com/syl20bnr/spacemacs/pull/179."
      (if (and (listp backends) (memq 'company-yasnippet backends))
          backends
        (append (if (consp backends)
                    backends
                  (list backends))
                '(:with company-yasnippet))))
    ;; add yasnippet to all backends
    ;; (gsetq company-backends
    ;;        (mapcar #'company-backend-with-yas company-backends))
    :diminish company-mode)
#+end_src

* Company Try Hard

#+begin_src elisp
  (straight-use-package 'company-try-hard)
  (use-package company-try-hard
    :bind (:map company-active-map
           ("C-z" . company-try-hard)))
#+end_src

* Company Quickhelp

#+begin_src elisp
  (straight-use-package 'company-quickhelp)
  (use-package company-quickhelp
    :bind (:map company-active-map
                ("C-c h" . company-quickhelp-manual-begin))
    :ghook #'after-init-hook
    :init (gsetq pos-tip-use-relative-coordinates t))
#+end_src

* Company Tabnine

#+begin_src elisp
  (straight-use-package 'company-tabnine)
  (gsetq company-tabnine-log-file-path
         (concat company-tabnine-binaries-folder "/log"))
#+end_src

* Company Math

#+begin_src elisp
  (straight-use-package 'company-math)
#+end_src

* Company Dict

#+begin_src elisp
  (straight-use-package 'company-dict)
#+end_src

* Company Flx

#+begin_src elisp
  (straight-use-package 'company-flx)
  (use-package company-flx
    :ghook #'after-init-hook)
#+end_src

* Company Box

#+begin_src elisp
  (when *c-box*
    (straight-use-package 'company-box)
    (use-package company-box
      :defer    t
      :after (all-the-icons company)
      :init
      (setq company-box-icons-alist 'company-box-icons-all-the-icons)
      :ghook 'company-mode-hook
      :config
      (setq company-box-backends-colors '((company-lsp      . "#e0f9b5")
                                          (company-elisp    . "#e0f9b5")
                                          (company-files    . "#ffffc2")
                                          (company-keywords . "#ffa5a5")
                                          (company-capf     . "#bfcfff")
                                          (company-dabbrev  . "#bfcfff")))
      (setq company-box-icons-unknown (concat (all-the-icons-material "find_in_page") " "))
      (setq company-box-icons-elisp
            (list
             (concat (all-the-icons-faicon "tag") " ")
             (concat (all-the-icons-faicon "cog") " ")
             (concat (all-the-icons-faicon "cube") " ")
             (concat (all-the-icons-material "color_lens") " ")))
      (setq company-box-icons-yasnippet (concat (all-the-icons-faicon "bookmark") " "))
      (setq company-box-icons-lsp
            `((1 .  ,(concat (all-the-icons-faicon   "text-height")    " ")) ;; Text
              (2 .  ,(concat (all-the-icons-faicon   "tags")           " ")) ;; Method
              (3 .  ,(concat (all-the-icons-faicon   "tag" )           " ")) ;; Function
              (4 .  ,(concat (all-the-icons-faicon   "tag" )           " ")) ;; Constructor
              (5 .  ,(concat (all-the-icons-faicon   "cog" )           " ")) ;; Field
              (6 .  ,(concat (all-the-icons-faicon   "cog" )           " ")) ;; Variable
              (7 .  ,(concat (all-the-icons-faicon   "cube")           " ")) ;; Class
              (8 .  ,(concat (all-the-icons-faicon   "cube")           " ")) ;; Interface
              (9 .  ,(concat (all-the-icons-faicon   "cube")           " ")) ;; Module
              (10 . ,(concat (all-the-icons-faicon   "cog" )           " ")) ;; Property
              (11 . ,(concat (all-the-icons-material "settings_system_daydream") " ")) ;; Unit
              (12 . ,(concat (all-the-icons-faicon   "cog" )           " ")) ;; Value
              (13 . ,(concat (all-the-icons-material "storage")        " ")) ;; Enum
              (14 . ,(concat (all-the-icons-material "closed_caption") " ")) ;; Keyword
              (15 . ,(concat (all-the-icons-faicon   "bookmark")       " ")) ;; Snippet
              (16 . ,(concat (all-the-icons-material "color_lens")     " ")) ;; Color
              (17 . ,(concat (all-the-icons-faicon   "file-text-o")    " ")) ;; File
              (18 . ,(concat (all-the-icons-material "refresh")        " ")) ;; Reference
              (19 . ,(concat (all-the-icons-faicon   "folder-open")    " ")) ;; Folder
              (20 . ,(concat (all-the-icons-material "closed_caption") " ")) ;; EnumMember
              (21 . ,(concat (all-the-icons-faicon   "square")         " ")) ;; Constant
              (22 . ,(concat (all-the-icons-faicon   "cube")           " ")) ;; Struct
              (23 . ,(concat (all-the-icons-faicon   "calendar")       " ")) ;; Event
              (24 . ,(concat (all-the-icons-faicon   "square-o")       " ")) ;; Operator
              (25 . ,(concat (all-the-icons-faicon   "arrows")         " "))) ;; TypeParameter
            )))
#+end_src
