* ibuffer

#+begin_src elisp
  (use-package ibuffer
    :bind (("C-x C-b" . ibuffer))
    :init
    (setq ibuffer-saved-filter-groups
          '(("Normal"
             ("Dired"      (mode . dired-mode))
             ("Emacs"     (or
                           (name . "^\\*dashboard\\*$" )
                           (name . "^\\*scratch\\*$"   )
                           (name . "^\\*Messages\\*$"  )
                           (name . "^\\*Backtrace\\*$" )
                           (name . "^\\*Pp Eval Output\\*$")))
             ("Text"      (or
                           (mode . org-mode)
                           (mode . markdown)
                           (mode . rst-mode)
                           (mode . text-mode)))
             ("TeX"        (mode . tex-mode))
             ("Languages" (or
                           (mode . emacs-lisp-mode)
                           (mode . haskell-mode)
                           (mode . javascript-mode)
                           (mode . lisp-mode)
                           (mode . python-mode)
                           (mode . ruby-mode)
                           (mode . rust-mode)
                           (mode . html-mode)
                           (mode . css-mode)
                           (mode . prog-mode)))
             ("GNUs"      (or
                           (mode . message-mode)
                           (mode . bbdb-mode)
                           (mode . mail-mode)
                           (mode . gnus-group-mode)
                           (mode . gnus-summary-mode)
                           (mode . gnus-article-mode)
                           (name . "^\\.bbdb$")
                           (name . "^\\.newsrc-dribble")))
             ("Helm"       (mode . helm-major-mode))
             ))
          ibuffer-show-empty-filter-groups nil
          ibuffer-default-sorting-mode     'filename/process)
    :hook ((ibuffer-mode . (lambda () (ibuffer-switch-to-saved-filter-groups "Normal")))))
#+end_src

* ibuffer vc

#+begin_src elisp
  (use-package ibuffer-vc
    :after ibuffer
    :straight t)
#+end_src

* Other settings

#+begin_src elisp
  (use-package ibuffer
    :config
    (define-ibuffer-column size-h
      (:name "Size" :inline t)
      (file-size-human-readable (buffer-size)))
    (setq
     ibuffer-formats
     '((mark modified read-only vc-status-mini " "
             (name 22 22 :left :elide)
             " "
             (size-h 9 -1 :right)
             " "
             (mode 12 12 :left :elide)
             " "
             vc-relative-file)
       (mark modified read-only vc-status-mini " "
             (name 22 22 :left :elide)
             " "
             (size-h 9 -1 :right)
             " "
             (mode 14 14 :left :elide)
             " "
             (vc-status 12 12 :left)
             " "
             vc-relative-file))))
#+end_src
