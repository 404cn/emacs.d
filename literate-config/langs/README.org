#+PROPERTY: header-args:elisp :tangle (concat temporary-file-directory "nasy-langs.el")

* Header                                                                        :noexport:

#+begin_src elisp
  ;;; nasy-langs.el --- Nasy's Emacs Configuration language file.  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2020  Nasy

  ;; Author: Nasy <nasyxx@gmail.com>

  ;;; Commentary:

  ;; Nasy's Emacs Configuration Languages.

  ;;; Code:
#+end_src

* Packages

#+begin_src elisp
  (setq parinfer-rust-auto-download t
        parinfer-rust-library
        (no-littering-expand-var-file-name "parinfer-rust/parinfer-rust-darwin.so"))

  (straight-register-package
   '(parinfer-rust-mode :type git
                        :host github
                        :repo "justinbarclay/parinfer-rust-mode"))

  (nasy/s-u-p
    ;; lisps
    cl-lib-highlight
    elisp-def
    highlight-quoted
    ipretty
    macrostep
    parinfer-rust-mode

    ;; lsp-mode
    dap-mode
    lsp-mode
    lsp-treemacs
    lsp-ui

    company-restclient
    elvish-mode
    fish-completion
    fish-mode
    markdown-mode
    ob-elvish
    ob-restclient
    pandoc-mode
    restclient
    toml-mode
    yaml-mode
    (:when *rust* cargo rust-mode))
#+end_src

* Configs

** C/C++/Object-C (Clangd or ccls)

#+include: "c.org"

** English

#+include: "english.org"

** Haskell

#+include: "haskell.org"

** HTML

#+begin_src elisp
  (leaf lsp-html
    :hook ((html-mode-hook . lsp-deferred)))
#+end_src

** JavaScript & TypeScript

#+begin_src elisp
  (leaf lsp-mode
    :hook ((javascript-mode-hook . lsp-deferred)))
#+end_src

** Language Server Protocol & Debug Adapter Protocol   :languages:

Emacs client/library for the Language Server Protocol

*** lsp-mode                                          :languages:

#+begin_src elisp
  (leaf lsp-mode
    :doc "Language Server Protocol Support for Emacs."
    :url "https://github.com/emacs-lsp/lsp-mode"
    :tag "languages"
    :hook
    (kill-emacs-hook . (lambda () (setq lsp-restart 'ignore)))
    :mode-hook
    (nasy/lsp-init)
    (lsp-diagnostics--enable)
    :init
    (defun nasy/lsp-init ()
      "Nasy lsp mode init."
      (flycheck-inline-mode -1)
      (when lsp-enable-symbol-highlighting
        (add-hook #'lsp-on-idle-hook #'lsp--document-highlight nil t)
        (lsp--info "Symbol highlighting enabled in current buffer.")))
    :custom
    ((lsp-log-io
      lsp-print-performance
      lsp-report-if-no-buffer) . *debug*)
    ((lsp-log-max
      lsp-inhibit-message
      lsp-enable-snippet
      lsp-eldoc-render-all
      lsp-eldoc-enable-hover
      lsp-enable-imenu
      lsp-enable-xref
      lsp-enable-links
      lsp-enable-indentation
      lsp-enable-on-type-formatting
      lsp-enable-semantic-highlighting
      lsp-enable-symbol-highlighting
      lsp-signature-auto-activate
      lsp-enable-text-document-color
      lsp-enable-folding
      lsp-prefer-capf) . t)
    ((lsp-keep-workspace-alive
      lsp-auto-configure
      lsp-auto-guess-root
      lsp-enable-completion-at-point
      lsp-enable-file-watchers))
    (lsp-restart . 'interactive))
#+end_src

*** lsp-ui                                      :languages:tools:

#+begin_src elisp
  (leaf lsp-ui
    :doc "UI integrations for lsp-mode."
    :url "https://github.com/emacs-lsp/lsp-ui"
    :tag "languages" "tools"
    :hook lsp-mode-hook
    :mode-hook
    (lsp-ui-sideline-mode 1)
    :custom
    (lsp-ui-doc-enable . nil)
    ((lsp-ui-doc-include-signature
      lsp-ui-sideline-show-hover
      lsp-ui-sideline-ignore-duplicate) . t)
    (lsp-ui-doc-position . 'at-point)
    :defer-config
    (require 'lsp-ui-peek))
#+end_src

*** lsp-treemacs                                      :languages:

#+begin_src elisp
  (leaf lsp-treemacs
    :doc "lsp-mode ❤ treemacs."
    :url "https://github.com/emacs-lsp/lsp-treemacs"
    :tag "languages"
    :custom
    (lsp-metals-treeview-show-when-views-received . t)
    :defer-config
    (lsp-treemacs-sync-mode t))
#+end_src

** Lisp

*** cl-lib-highlight

#+begin_src elisp
  (leaf cl-lib-highlight
    :after lisp-mode
    :config
    (cl-lib-highlight-initialize))
#+end_src

*** elisp-def

 #+begin_src elisp
   (leaf elisp-def
     :hook (((emacs-lisp-mode-hook ielm-mode-hook) . elisp-def-mode)))
 #+end_src

*** Highlight-quoted

 #+begin_src elisp
   (leaf highlight-quoted
     :hook ((emacs-lisp-mode-hook . highlight-quoted-mode)))
 #+end_src

*** ipretty                                         :buffer:emacslisp:pprint:

 Interactive Emacs Lisp pretty-printing.

 ~ipretty.el~ provides interactive functions to pretty-print the result of an
 expression and a global mode ~ipretty-mode~ that advices ~eval-print-last-sexp~ to
 pretty print.

 https://framagit.org/steckerhalter/ipretty

 #+begin_src elisp
   (leaf ipretty
     :doc "Interactive Emacs Lisp pretty-printing"
     :url "https://framagit.org/steckerhalter/ipretty"
     :tag "buffer" "emacslisp" "pprint"
     :bind (("C-h C-j" . ipretty-last-sexp)
            ("C-h C-k" . ipretty-last-sexp-other-buffer)))
     :hook after-init-hook
 #+end_src

*** lisp-mode

 #+begin_src elisp
   (leaf lisp-mode
     :preface
     (defun eval-last-sexp-or-region (prefix)
       "Eval region from BEG to END if active, otherwise the last sexp."
       (interactive "P")
       (if (and (mark) (use-region-p))
           (eval-region (min (point) (mark)) (max (point) (mark)))
         (pp-eval-last-sexp prefix)))
     :bind
     (:emacs-lisp-mode-map
      ([remap eval-expression] . pp-eval-expression)
      ("C-x C-e"               . eval-last-sexp-or-region)))
 #+end_src

*** macrostep

 #+begin_src elisp
   (leaf macrostep
     :bind
     (:emacs-lisp-mode-map
      ("C-c e" . macrostep-expand)))
 #+end_src

*** parinfer-rust-mode

 #+begin_src elisp
   (leaf parinfer-rust-mode
     :custom
     `(parinfer-rust-library
       . ,(no-littering-expand-var-file-name "parinfer-rust/parinfer-rust-darwin.so"))
     (parinfer-rust-auto-download . t)
     :hook `(,lisp-modes-hooks))
 #+end_src

** Markdown

#+begin_src elisp
  (leaf markdown-mode
    :mode ("INSTALL\\'"
           "CONTRIBUTORS\\'"
           "LICENSE\\'"
           "README\\'"
           "\\.markdown\\'"
           "\\.md\\'"))
#+end_src

** Python

*** Autoloads

#+begin_src elisp
  ;;;###autoload
  (defcustom nasy*python-buffer "vterm"
    "Nasy Python Buffer"
    :group 'python-mode
    :type 'string)

  ;;;###autoload
  (defun nasy/python-send-buffer ()
    "Send current buffer to the running python process."
    (interactive)
    (let ((proc (get-buffer-process nasy*python-buffer)))
      (unless proc
        (error "No process found"))
      (save-buffer)
      (comint-simple-send proc
                          (concat "%run " (format "%s" (buffer-file-name))))
      (pop-to-buffer nasy*python-buffer)))

  ;;;###autoload
  (defun nasy/python-send-region (begin end)
    "Evaluate the code in region from BEGIN to END in the python repl.
  if the region is unset, the current line will be used."
    (interactive "r")
    (unless (use-region-p)
      (setq begin (line-beginning-position)
            end (line-end-position)))
    (let* ((text (buffer-substring-no-properties begin end))
           (proc (get-buffer-process nasy*python-buffer)))
      (unless proc
        (error "No process found"))
      (comint-simple-send proc text)
      (display-buffer nasy*python-buffer)))

  ;;;###autoload
  (defun nasy/python-send-defun (&optional arg)
    "Send the current defun to inferior Python process.
  When ARG is non-nil do not include decorators."
    (interactive (list current-prefix-arg t))
    (nasy:python-send-region
     (progn
       (end-of-line 1)
       (while (and (or (python-nav-beginning-of-defun)
                       (beginning-of-line 1))
                   (> (current-indentation) 0)))
       (when (not arg)
         (while (and (forward-line -1)
                     (looking-at (python-rx decorator))))
         (forward-line 1))
       (point-marker)
       (progn
         (or (python-nav-end-of-defun)
             (end-of-line 1))
         (point-marker)))))

  ;;;###autoload
  (defun nasy/python-switch-to-shell ()
    "Switch to inferior Python process buffer."
    (interactive "p")
    (let ((proc (get-buffer-process nasy:python-buffer)))
      (unless proc
        (error "No process found"))
      (pop-to-buffer nasy*python-buffer)))
#+end_src

*** config

#+begin_src elisp
  (general-define-key
   :prefix "C-c"
   :keymaps 'python-mode-map
   "C-b" 'nasy/python-send-buffer
   "C-r" 'nasy/python-send-region
   "C-c" 'nasy/python-send-defun
   "C-z" 'nasy/python-switch-to-shell)
  (general-define-key
   :keymaps 'python-mode-map
   "<S-return>" 'nasy/python-send-region)


  (defun python-flycheck-setup ()
    "Add python checker for lsp-ui."
    (after-x 'lsp-ui
      (flycheck-add-next-checker 'lsp              'python-flake8))
      ;; flake8 already have python-mypy and python-pylint as the next checker
      ;; (flycheck-add-next-checker 'python-flake8    'python-mypy)))
    (flycheck-disable-checker 'python-pylint)
    (flycheck-remove-next-checker 'python-flake8 'python-pylint))

  (leaf python
    :mode-hook
    (tempo-define-template "py-header"
                         '("#!/usr/bin/env python" n>
                           "# -*- coding: utf-8 -*-" n n>
                           "r\"\"\"" n>
                           "心之憂矣於我歸處 Python ♡ Nasy." n n>
                           "    |             *         *" n>
                           "    |                  .                ." n>
                           "    |           .                          舒而脫脫兮" n>
                           "    |     *                      ," n>
                           "    |                   .                  無感我帨兮" n>
                           "    |" n>
                           "    |                               *      無使尨也吠" n>
                           "    |          |\\___/|" n>
                           "    |          )    -(             .              ·" n>
                           "    |         =\\ -   /=" n>
                           "    |           )===(       *" n>
                           "    |          /   - \\" n>
                           "    |          |-    |" n>
                           "    |         /   -   \\     0.|.0" n>
                           "    |  NASY___\\__( (__/_____(\\=/)__+1s____________" n>
                           "    |  ______|____) )______|______|______|______|_" n>
                           "    |  ___|______( (____|______|______|______|____" n>
                           "    |  ______|____\\_|______|______|______|______|_" n>
                           "    |  ___|______|______|______|______|______|____" n>
                           "    |  ______|______|______|______|______|______|_" n>
                           "    |  ___|______|______|______|______|______|____" n n>
                           "author   : Nasy https://nasy.moe" n>
                           "date     : " (format-time-string "%b %e, %Y") n>
                           "email    : Nasy <nasyxx+python@gmail.com>" n>
                           "filename : " (file-name-nondirectory (buffer-file-name)) n>
                           "project  : " (file-name-nondirectory (directory-file-name (or projectile-project-root default-directory))) n>
                           "license  : GPL-3.0+" n n> p n>
                           "\"\"\"" n>)))
#+end_src

*** pylance

#+begin_src elisp
  (leaf nasy-langs-pylance
    :preface
    (defun start-lsp-pylance ()
      "Start lsp-pylance."
      (require 'nasy-langs-pylance)
      (lsp)
      ;; (gsetq elpy-modules (remove 'elpy-module-autodoc elpy-modules))
      ;; (gsetq elpy-modules (remove 'elpy-module-eldoc   elpy-modules))
      (python-flycheck-setup))
    :hook
    (python-mode-hook . start-lsp-pylance))
#+end_src

** restclient.el

HTTP REST client tool for emacs

https://github.com/pashky/restclient.el

#+begin_src elisp
  (leaf restclient
    :init
    (nasy/add-company-backend
      'restclient-mode
      '(company-restclient company-files)))
#+end_src

** Rust

Include rust-mode, rls and Cargo.

# #+begin_src elisp
  (when *rust*
    (use-package rust-mode
      :defer t
      :hook ((rust-mode . (lambda () (setq-local tab-width 4)))
             (rust-mode . lsp-deferred))
      :config
      (when *rls*
        (add-hook #'rust-mode-hook #'(lambda () (add-to-list 'flycheck-disabled-checkers 'rust-cargo)))))

    (use-package cargo
      :after rust-mode
      :hook ((toml-mode . cargo-minor-mode)
             (rust-mode . cargo-minor-mode))))
#+end_src

** Yaml

#+begin_src elisp
  (leaf lsp-yaml
    :hook ((yaml-mode-hook . lsp-deferred)))
#+end_src

* Footer                                                                      :noexport:

#+begin_src elisp
  (provide 'nasy-langs)
  ;;; nasy-langs.el ends here
#+end_src
