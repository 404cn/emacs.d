# Created 2019-04-19 Fri 01:36
#+OPTIONS: ':nil *:t -:t ::t <:t H:5 \n:nil ^:{} arch:headline author:t
#+OPTIONS: creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:nil p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: Emacs Configuration
#+DATE: <2018-10-09 Tue>
#+AUTHOR: Nasy
#+PROPERTY: header-args:elisp :tangle (concat (file-name-directory (buffer-file-name)) "init.el")
#+PROPERTY: header-args:emacs-lisp :tangle (concat (file-name-directory (buffer-file-name)) "custom/user-config-example.el")
#+STARTUP: overview
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup

#+HTML_HEAD: <style>kbd {border-style: outset;} pre.src:before {top: -4px; box-shadow: 3px 3px 3px #eee; border-color: #ccc; padding: 0;}</style>
#+HTML_HEAD: <style>#content {background-color: #fff0f8;} body,pre.src {background-color: #282a36; transition: box-shadow 2s}</style>
#+HTML_HEAD: <style>pre.src {text-shadow: 0 0 10px #000; box-shadow: 1px 1px 5px #7a378b; color: #9e579d;}</style>
#+HTML_HEAD: <style>pre.src:hover{box-shadow: 1px 1px 10px #7a378b;}</style>

#+LATEX_HEADER: \setmainjfont[BoldFont=PingFang SC]{FandolSong}
#+LATEX_HEADER: \setsansfont{PingFang SC}

* Prologue

A Straightforward Emacs Configuration Bundle.

This is my Emacs configuration in literate form, and it is towards macOS.  I am
not sure if it would work well well on Linux or Windows.

** *NOTICE*

- This file is a literature programing source file, and generates ~init.el~
- Almost all in one file.
- Use straight.el to manage packages.
- For macOS GUI.
- Now only tested with GNU Emacs 27.0.50 in macOS 10.14.
- Font
  - Fira Code Symbol

** Screenshots

[[file:./screenshot1.png]]

[[file:./screenshot2.png]]

[[file:./screenshot3.png]]

* Dependencies

- Emacs
- git
- make (optional)
- ...

* Installation

To install, clone this repo to  ~~/.emacs.d~ :

#+BEGIN_SRC shell
  git clone https://github.com/nasyxx/emacs.d.git ~/.emacs.d
  make config
#+END_SRC

Upon the first time staring up emacs, other third-party packages will be
automatically clone to the  ~straight~:  folder
and installed.  If you encounter any errors at that stage, try restarting Emacs,
and maybe running ~make clean-all~ before doing so.

You can regenerate  ~init.el~  by ~make generate~.

* Updates

Update this config with running ~make update~ or ~git pull~ after a ~make
clean-build~ and restart Emacs.

And I guess you'll need to update third-party packages regularly too if you
have not modificated the ~straight-check-for-modifications~ in 
~config/nasy-config.el~: 


- 
- 

If you encounter any errors while updating, you may need to kill Emacs and run
~make clean~. If you still meet errors after doing that, you probably need to run
~make clean-all~ and restart Emacs.

* Custom Configuration

** Example Custom Configuration

To add your own customization, use 
 etc. and/or create a file  ~custom/user-config.el~  which looks like this (when you ~make~ or ~make generate~, below will
 generate to  ~custom/user-config-example.el~ ):

#+BEGIN_SRC emacs-lisp
  (setq-default
   calendar-latitude     24.8801
   calendar-longitude    102.8329
   user-mail-address     "nasyxx@gmail.com"
   initial-buffer-choice #'(lambda () (get-buffer "*dashboard*"))
   ,*theme*            'doom-dracula
   ,*debug*               t
   ,*struct-hs*      nil
   ,*vterm*               "/Users/Nasy/src/emacs-libvterm"
   ,*risky-var*           nil)
  (provide 'user-config)
#+END_SRC

** dashboard

If you want to start with [[https://github.com/rakanalh/emacs-dashboard][dashboard]], you need to set

~(setq initial-buffer-choice #'(lambda () (get-buffer "*dashboard*"))~

in your ~custom/user-config.el~.

*Launching emacs from command line with a file name causes errors*.  Please refer
to the issue [[https://github.com/rakanalh/emacs-dashboard/issues/69][here]].  Hope someone could fix it.

** *NOTICE:*

- Functions added to ~nasy/config-before-hook~ will be run before loading ~custom.el~.
- Functions added to ~nasy/config-after-hook~ will be run after init.

* The Configuration

One thing to note is that this file generates a file named 
~init.el~.  You *should not* edit that file directly and make any
changes here and regenerate it from Emacs org-mode using .

** Bootstrap

*** File Header

This includes some necessary headers.

#+BEGIN_SRC elisp
  ;;; init.el --- Nasy's emacs.d init file.            -*- lexical-binding: t; -*-
  ;; Copyright (C) 2018  Nasy
  
  ;; Author: Nasy <nasyxx+emacs@gmail.com>
  
  ;;; Commentary:
  
  ;; Nasy's emacs.d init file.  For macOS and Emacs 26, Emacs 27.
#+END_SRC

*** Lexical Binding

This makes it so that the file that is produced from tangling this file uses
lexical scoping.

#+BEGIN_SRC elisp
  (setq-default lexical-binding t)
#+END_SRC

*** Some Default Settings

Some default settings are here, including ~debug-on-error~, ~message-log-max~,
~load-prefer-newer~ and ~ad-redefinition-action~.

#+BEGIN_SRC elisp
  (setq-default debug-on-error         t
  	      message-log-max        t
  	      load-prefer-newer      t
  	      ad-redefinition-action 'accept)
#+END_SRC

*** Macros & Alias

Useful Macros and Alias.

#+BEGIN_SRC elisp
  (defmacro λ! (&rest body)
    "A shortcut for inline interactive lambdas."
    (declare (doc-string 1))
    `(lambda () (interactive) ,@body))
  
  (defalias 'lambda! 'λ!)
#+END_SRC

*** Is A Mac?

If this os is macOS?

#+BEGIN_SRC elisp
  (defconst *is-a-mac* (eq system-type 'darwin))
#+END_SRC

*** Packages Manager

I use [[https://github.com/raxod502/straight.el][straight.el]] as my packages manager.

#+BEGIN_SRC elisp
  (setq straight-recipes-gnu-elpa-use-mirror t
        straight-repository-branch           "develop"
        straight-check-for-modifications     'live)
  
  (defvar bootstrap-version)
  
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
  	(url-retrieve-synchronously
  	 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
  	 'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

At the same time, I use [[https://github.com/jwiegley/use-package][use-package]] to manage packages in one file.

#+BEGIN_SRC elisp
  (straight-use-package 'use-package)
#+END_SRC

*** Garbage Collection

Adjust garbage collection thresholds during startup, and thereafter

#+BEGIN_SRC elisp
  (let ((normal-gc-cons-threshold (* 256 1024 1024))
        (init-gc-cons-threshold (* 512 1024 1024)))
    (setq gc-cons-threshold init-gc-cons-threshold)
    (add-hook #'after-init-hook
  	    (lambda! (setq gc-cons-threshold normal-gc-cons-threshold))))
  
  (add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC

*** Benchmark

#+BEGIN_SRC elisp
  (use-package benchmark-init
    :demand   t
    :straight t
    :hook ((after-init . benchmark-init/deactivate)))
#+END_SRC

*** Expand load-path

#+BEGIN_SRC elisp
  (add-to-list 'load-path (expand-file-name "lisp"   user-emacs-directory))
  (add-to-list 'load-path (expand-file-name "custom" user-emacs-directory))
#+END_SRC

*** No Littering

#+BEGIN_SRC elisp
  (use-package no-littering
    :straight t)
#+END_SRC

*** Key Definition

#+BEGIN_SRC elisp
  (use-package general
    :demand   t
    :straight t
    :config
    (defalias 'gsetq #'general-setq)
    (defalias 'gsetq-local #'general-setq-local)
    (defalias 'gsetq-default #'general-setq-default))
#+END_SRC

*** Load Org

When using straight.el, the org version is needed to custom set.

#+BEGIN_SRC elisp
  (straight-use-package 'org-plus-contrib)
#+END_SRC

*** Core

** Load Custom Config

Here includes all of the customizable variables of my configuration.

You can custom it in  ~custom/user-config.el~ 

*** Custom Config Hooks

#+BEGIN_SRC elisp
  (defvar nasy/config-before-hook nil
    "Hooks to run config functions before load custom.el.")
  
  (defvar nasy/config-after-hook nil
    "Hooks to run config functions after.")
  
  (add-hook 'nasy/config-after-hook
  	  #'(lambda () (message "Hi~ Hope you have fun with this config.")))
  
  (add-hook 'after-init-hook
  	  #'(lambda () (run-hooks 'nasy/config-after-hook)))
#+END_SRC

*** Custom Configs

#+BEGIN_SRC elisp
  (defgroup nasy nil
    "Nasy Emacs Custom Configurations."
    :group 'emacs)
  
  (defcustom lisp-modes-hooks '(cider-repl-mode-hook
  			      clojure-mode-hook
  			      clojurec-mode-hook
  			      clojurescript-mode-hook
  			      clojurex-mode-hook
  			      common-lisp-mode-hook
  			      emacs-lisp-mode-hook
  			      eshell-mode-hook
  			      geiser-repl-mode-hook
  			      gerbil-mode-hook
  			      inf-clojure-mode-hook
  			      inferior-emacs-lisp-mode-hook
  			      inferior-lisp-mode-hook
  			      inferior-scheme-mode-hook
  			      lisp-interaction-mode-hook
  			      lisp-mode-hook
  			      monroe-mode-hook
  			      racket-mode-hook
  			      racket-repl-mode-hook
  			      scheme-interaction-mode-hook
  			      scheme-mode-hook
  			      slime-repl-mode-hook
  			      stumpwm-mode-hook)
    "List of lisp-related modes hooks."
    :type '(repeat symbol)
    :group 'nasy)
  
  (defcustom *clangd* (or (executable-find "clangd")  ;; usually
  		       (executable-find "/usr/local/opt/llvm/bin/clangd"))  ;; macOS
    "Clangd path.  If nil, will not use clangd."
    :group 'nasy
    :type 'string)
  
  (defcustom *eldoc-box* nil
    "Whether to use eloc-box or not."
    :group 'nasy
    :type 'boolean)
  
  (defcustom *nix* nil
    "Nix path.  If nil, will not use nix."
    :group 'nasy
    :type 'string)
  
  (defcustom *rust* (or (executable-find "rustc")
  		      (executable-find "cargo")
  		      (executable-find "rustup"))
    "The Rust path.  If nil, will not use Rust."
    :group 'nasy
    :type 'string)
  
  (defcustom *rls* (or (executable-find "rls")
  		     (executable-find "~/.cargo/bin/rls"))
    "The rls path.  If nil, will not use rls."
    :group 'nasy
    :type 'string)
  
  (defcustom *debug* t
    "Whether to use debug or not."
    :group 'nasy
    :type 'boolean)
  
  (defcustom *server* t
    "Whether to use server or not."
    :group 'nasy
    :type 'boolean)
  
  (defcustom *intero* t
    "Whether to use intero or not."
    :group 'nasy
    :type 'boolean)
  
  (defcustom *struct-hs* (executable-find "structured-haskell-mode")
    "The structured-haskell-mode path.  If nil, will not use structured-haskell-mode."
    :group 'nasy
    :type 'string)
  
  (defcustom *blacken* nil
    "Whether to use blacken or not."
    :group 'nasy
    :type 'boolean)
  
  (defcustom *c-box* nil
    "Whether to use company box or not."
    :group 'nasy
    :type 'boolean)
  
  (defcustom *vterm* nil
    "Whether to use vterm or not."
    :group 'nasy
    :type 'boolean)
  
  (defcustom *ispell* (executable-find "aspell")
    "The Ispell.  If nil, will not use Ispell."
    :group 'nasy
    :type 'string)
  
  (defcustom *font* "OperatorMonoSSmLig Nerd Font-12"
    "The font."
    :group 'nasy
    :type 'string)
  
  (defcustom *theme* 'doom-dracula
    "The Theme."
    :group 'nasy
    :type 'symbol)
#+END_SRC

*** macOS Frame

#+BEGIN_SRC elisp
  (when *is-a-mac*
    (add-to-list 'default-frame-alist
  	       '(ns-transparent-titlebar . t))
  
    (add-to-list 'default-frame-alist
  	       '(ns-appearance . dark))
  
    (add-to-list 'default-frame-alist
  	       '(alpha . (80 . 75)))
  
    (add-to-list 'default-frame-alist
  	       `(font . ,*font*))
  
    (defun stop-minimizing-window ()
      "Stop minimizing window under macOS."
      (interactive)
      (unless (and *is-a-mac*
  		 window-system)
        (suspend-frame))))
#+END_SRC

*** macOS Key Binings

#+BEGIN_SRC elisp
  (when *is-a-mac*
    (setq mac-option-modifier  'meta
  	mac-command-modifier 'hyper)
  
    (general-define-key
     "C-z" 'stop-minimizing-window
  
     ;; cursor Movement
     "H-<up>"   'beginning-of-buffer
     "H-<down>" 'end-of-buffer
     "H-l"      'goto-line
  
     ;; text Operations
     "H-a" 'mark-whole-buffer
     "H-v" 'yank
     "H-c" 'kill-ring-save
     "H-s" 'save-buffer
     "H-z" 'undo
     "H-w" (lambda! (delete-window))
     "M-¥" (lambda! (insert "\\"))
     "H-<backspace>" (lambda! (kill-line 0)))
  
    ;; unset
    (global-unset-key (kbd "<magnify-down>"))
    (global-unset-key (kbd "<magnify-up>")))
#+END_SRC

*** Disable Some Features

#+BEGIN_SRC elisp
  (setq use-file-dialog        nil
        use-dialog-box         nil
        inhibit-startup-screen t)
  
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  
  (when (fboundp 'set-scroll-bar-mode)
    (set-scroll-bar-mode nil))
#+END_SRC

*** Default Settings

**** Company

#+BEGIN_SRC elisp
  (setq-default
   company-idle-delay .5)
#+END_SRC

**** Cursor

#+BEGIN_SRC elisp
  (setq-default
    blink-cursor-interval .6
    blink-matching-paren  t
    cursor-in-non-selected-windows t)
  
  (blink-cursor-mode t)
#+END_SRC

**** Helm

#+BEGIN_SRC elisp
  ;; (setq-default
  ;;  ;; brew install rg   if you'd like to use rg as my doing
  ;;  helm-ag-base-command "rg --no-heading --smart-case")
#+END_SRC

**** Languages

#+BEGIN_SRC elisp
  (setq-default
   haskell-stylish-on-save nil
   blacken-line-length     80
   lsp-rust-rls-command    '("rls"))
#+END_SRC

**** Pandoc

#+BEGIN_SRC elisp
  (setq-default
   org-pandoc-options-for-context     '((template . "~/.emacs.d/nasy-context.tex"))  ;; I have no idea why I cannot set it as a variable.
   org-pandoc-options-for-context-pdf '((template . "~/.emacs.d/nasy-context.tex")))
#+END_SRC

**** Parens

#+BEGIN_SRC elisp
  (setq-default
   show-paren-style                                'expression
   sp-autoinsert-quote-if-followed-by-closing-pair t
   sp-base-key-bindings                            'paredit
   sp-show-pair-from-inside                        t)
#+END_SRC

**** Scrolling

#+BEGIN_SRC elisp
  (setq scroll-margin                   0
        scroll-conservatively           100000
        scroll-preserve-screen-position 'always)
#+END_SRC

**** Shell

#+BEGIN_SRC elisp
  (setq-default
   shell-file-name "/bin/zsh")
#+END_SRC

**** Start

#+BEGIN_SRC elisp
  (setq-default
   initial-scratch-message     (concat ";; Happy hacking, " user-login-name " - Emacs ♥ you!\n\n")
   dashboard-banner-logo-title (concat ";; Happy hacking, " user-login-name " - Emacs ♥ you!\n\n")
   ;; initial-buffer-choice       #'(lambda () (get-buffer "*dashboard*"))  ;; It will cause error if you start emacs from Command line with file name
  									  ;; https://github.com/rakanalh/emacs-dashboard/issues/69
  )
#+END_SRC

**** Visual

#+BEGIN_SRC elisp
  (setq-default
   fill-column                    80
   visual-fill-column-width       100
   word-wrap                      t
   highlight-indent-guides-method 'column
   tab-width                      8
   tooltip-delay                  1.5)
#+END_SRC

**** Whitespace

#+BEGIN_SRC elisp
  (setq-default
   whitespace-line-column 80
   whitespace-style       '(face spaces tabs newline
  			  space-mark tab-mark newline-mark
  			  lines-tail empty))
#+END_SRC

*** Mess

#+BEGIN_SRC elisp
  (setq-default
     bookmark-default-file (no-littering-expand-var-file-name ".bookmarks.el")
     buffers-menu-max-size 30
     case-fold-search      t
     column-number-mode    t
     dired-dwim-target     t
     ediff-split-window-function 'split-window-horizontally
     ediff-window-setup-function 'ediff-setup-windows-plain
     indent-tabs-mode      nil
     line-move-visual      t
     make-backup-files     nil
     mouse-yank-at-point   t
     require-final-newline t
     save-interprogram-paste-before-kill t
     set-mark-command-repeat-pop    t
     tab-always-indent              'complete
     truncate-lines                 nil
     truncate-partial-width-windows nil)
  
  (fset 'yes-or-no-p 'y-or-n-p)
  
  (global-auto-revert-mode t)
  
  (delete-selection-mode t)
#+END_SRC

*** Config After initialization

#+BEGIN_SRC elisp
  (defun nasy/config-after ()
    "Set configuration need to be set after init."
    (setq-default
     ;; helm-allow-mouse                  t
     ;; helm-follow-mode-persistent       t
     ;; helm-move-to-line-cycle-in-source nil
     ;; helm-source-names-using-follow    '("Buffers" "kill-buffer" "Occur")
     debug-on-error *debug*))
  
  
  (add-hook 'nasy/config-after-hook  #'nasy/config-after)
#+END_SRC

*** Custom Faces

#+BEGIN_SRC elisp
  (defun nasy/set-face ()
    "Set custom face."
    (set-face-attribute 'org-meta-line               nil                                             :slant   'italic)
    (set-face-attribute 'org-block-begin-line        nil                                             :slant   'italic)
    (set-face-attribute 'org-block-end-line          nil                                             :slant   'italic)
    (set-face-attribute 'font-lock-comment-face      nil                                             :slant   'italic)
    (set-face-attribute 'font-lock-keyword-face      nil                                             :slant   'italic)
    (set-face-attribute 'show-paren-match            nil :background "#bfcfff" :foreground "#dc322f" :weight  'ultra-bold)
    (set-face-attribute 'show-paren-match-expression nil :background "#543e5c"                       :inherit 'unspecified)
    (set-face-attribute 'which-func                  nil                       :foreground "#333"))
  (add-hook 'nasy/config-before-hook #'nasy/set-face)
#+END_SRC

*** Load User Custom

#+BEGIN_SRC elisp
  (require 'user-config nil t)
#+END_SRC



** Compile

#+BEGIN_SRC elisp
  (use-package async
    :straight t
    :config
    (dired-async-mode            1)
    (async-bytecomp-package-mode 1))
  
  (use-package auto-compile
    :demand   t
    :straight t
    :config
    (auto-compile-on-load-mode)
    (auto-compile-on-save-mode))
  
  (setq-default compilation-scroll-output t)
  
  (use-package alert
    :defer    t
    :straight t
    :preface
    (defun alert-after-compilation-finish (buf result)
      "Use `alert' to report compilation RESULT if BUF is hidden."
      (when (buffer-live-p buf)
        (unless (catch 'is-visible
  		(walk-windows (lambda (w)
  				(when (eq (window-buffer w) buf)
  				  (throw 'is-visible t))))
  		nil)
  	(alert (concat "Compilation " result)
  	       :buffer buf
  	       :category 'compilation)))))
  
  
  (use-package compile
    :defer t
    :preface
    (defvar nasy/last-compilation-buffer nil
      "The last buffer in which compilation took place.")
  
    (defun nasy/save-compilation-buffer (&rest _)
      "Save the compilation buffer to find it later."
      (setq nasy/last-compilation-buffer next-error-last-buffer))
    (advice-add 'compilation-start :after 'nasy/save-compilation-buffer)
  
    (defun nasy/find-prev-compilation (orig &rest args)
      "Find the previous compilation buffer, if present, and recompile there."
      (if (and (null edit-command)
  	     (not (derived-mode-p 'compilation-mode))
  	     nasy:last-compilation-buffer
  	     (buffer-live-p (get-buffer nasy/last-compilation-buffer)))
  	(with-current-buffer nasy/last-compilation-buffer
  	  (apply orig args))
        (apply orig args)))
    :bind (([f6] . recompile))
    :hook ((compilation-finish-functions . alert-after-compilation-finish)))
  
  
  (use-package ansi-color
    :defer    t
    :after    compile
    :straight t
    :hook ((compilation-filter . colourise-compilation-buffer))
    :config
    (defun colourise-compilation-buffer ()
      (when (eq major-mode 'compilation-mode)
        (ansi-color-apply-on-region compilation-filter-start (point-max)))))
#+END_SRC

** Auto Compression

#+BEGIN_SRC elisp
  (require 'jka-compr)
  (auto-compression-mode)
#+END_SRC

** History, Saving and Session

#+BEGIN_SRC elisp
  (setq desktop-path              (list user-emacs-directory no-littering-var-directory)
        desktop-auto-save-timeout 600)
  (desktop-save-mode t)
  (setq desktop-save 'if-exists)
  
  
  (defun nasy:desktop-time-restore (orig &rest args)
    (let ((start-time (current-time)))
      (prog1
  	(apply orig args)
        (message "Desktop restored in %.2fms"
  	       (benchmark-init/time-subtract-millis (current-time)
  					       start-time)))))
  (advice-add 'desktop-read :around 'nasy:desktop-time-restore)
  
  (defun nasy:desktop-time-buffer-create (orig ver filename &rest args)
    (let ((start-time (current-time)))
      (prog1
  	(apply orig ver filename args)
        (message "Desktop: %.2fms to restore %s"
  	       (benchmark-init/time-subtract-millis (current-time)
  					       start-time)
  	       (when filename
  		 (abbreviate-file-name filename))))))
  (advice-add 'desktop-create-buffer :around 'nasy:desktop-time-buffer-create)
  
  (setq-default kill-ring-max 300)
  
  (setq-default history-length 3000
  	      history-delete-duplicates t
  	      savehist-additional-variables
  	      '(mark-ring
  		global-mark-ring
  		search-ring
  		regexp-search-ring
  		extended-command-history)
  	      savehist-autosave-interval 60)
  
  (add-hook #'after-init-hook #'savehist-mode)
  
  (use-package session
    :defer    t
    :straight t
    :hook ((after-init . session-initialize))
    :init
    (setq session-save-file (no-littering-expand-var-file-name ".session")
  	session-name-disable-regexp "\\(?:\\`'/tmp\\|\\.git/[A-Z_]+\\'\\)"
  	session-save-file-coding-system 'utf-8
  	desktop-globals-to-save
  	(append '((comint-input-ring        . 50)
  		  (compile-history          . 30)
  		  desktop-missing-file-warning
  		  (dired-regexp-history     . 20)
  		  (extended-command-history . 30)
  		  (face-name-history        . 20)
  		  (file-name-history        . 100)
  		  (grep-find-history        . 30)
  		  (grep-history             . 30)
  		  (ivy-history              . 100)
  		  (magit-revision-history   . 50)
  		  (minibuffer-history       . 50)
  		  (org-clock-history        . 50)
  		  (org-refile-history       . 50)
  		  (org-tags-history         . 50)
  		  (query-replace-history    . 60)
  		  (read-expression-history  . 60)
  		  (regexp-history           . 60)
  		  (regexp-search-ring       . 20)
  		  register-alist
  		  (search-ring              . 20)
  		  (shell-command-history    . 50)
  		  tags-file-name
  		  tags-table-list
  		  kill-ring))))
#+END_SRC

** Auto Save (Super Save)

I use super save to auto save files.

#+BEGIN_SRC elisp
  (use-package super-save
    :straight t
    :ghook 'after-init-hook
    :init (gsetq super-save-auto-save-when-idle nil
  	       super-save-remote-files        nil))
#+END_SRC

** Text Scale

#+BEGIN_SRC elisp
  (use-package default-text-scale
    :defer    t
    :straight t)
#+END_SRC

** Custom Functions

*** Reload the init-file

#+BEGIN_SRC elisp
  (defun radian-reload-init ()
    "Reload init.el."
    (interactive)
    (straight-transaction
      (straight-mark-transaction-as-init)
      (message "Reloading init.el...")
      (load user-init-file nil 'nomessage)
      (message "Reloading init.el... done.")))
  
  (defun radian-eval-buffer ()
    "Evaluate the current buffer as Elisp code."
    (interactive)
    (message "Evaluating %s..." (buffer-name))
    (straight-transaction
      (if (null buffer-file-name)
  	(eval-buffer)
        (when (string= buffer-file-name user-init-file)
  	(straight-mark-transaction-as-init))
        (load-file buffer-file-name)))
    (message "Evaluating %s... done." (buffer-name)))
#+END_SRC

*** Insert Date

#+BEGIN_SRC elisp
  (defun nasy:insert-current-date ()
    "Insert current date."
    (interactive)
    (insert (shell-command-to-string "echo -n $(date +'%b %d, %Y')")))
  
  (defun nasy:insert-current-filename ()
    "Insert current buffer filename."
    (interactive)
    (insert (file-relative-name buffer-file-name)))
#+END_SRC

*** Posframe Helper

#+BEGIN_SRC elisp
  (defun posframe-poshandler-frame-top-center (info)
    (cons (/ (- (plist-get info :parent-frame-width)
  	      (plist-get info :posframe-width))
  	   2)
  	(round (* 0.02 (x-display-pixel-height)))))
#+END_SRC

*** Basic

** Dashboard

#+BEGIN_SRC elisp
  (use-package dashboard
    :demand   t
    :after    org
    :straight t
    :bind
    ;; https://github.com/rakanalh/emacs-dashboard/issues/45
    (:map dashboard-mode-map
  	("<down-mouse-1>" . nil)
  	("<mouse-1>"      . widget-button-click)
  	("<mouse-2>"      . widget-button-click))
    :init (setq dashboard-startup-banner 'official
  	      dashboard-center-content t
  	      show-week-agenda-p       t
  	      dashboard-items '((recents   . 10)
  				(bookmarks . 3 )
  				(projects  . 5 )
  				(agenda    . 5 )
  				;; (registers . 5 )
  				))
    :config (dashboard-setup-startup-hook))
#+END_SRC

** Disable Mouse

#+BEGIN_SRC elisp
  (use-package disable-mouse
    :straight t
    :config
    (general-define-key
     "<mouse-4>" (lambda! (scroll-down 1))
     "<mouse-5>" (lambda! (scroll-up 1))))
#+END_SRC

** Minibuffer

#+BEGIN_SRC elisp
  (setq enable-recursive-minibuffers t)
  
  (minibuffer-depth-indicate-mode)
  
  ;; https://www.reddit.com/r/emacs/comments/4d8gvt/how_do_i_automatically_close_the_minibuffer_after/
  (defun helper:kill-minibuffer ()
    "Exit the minibuffer if it is active."
    (when (and (>= (recursion-depth) 1)
  	   (active-minibuffer-window))
      (abort-recursive-edit)))
  
  (add-hook #'mouse-leave-buffer-hook #'helper:kill-minibuffer)
#+END_SRC

** Scratch Message

#+BEGIN_SRC elisp
  (use-package scratch
    :demand   t
    :straight t)
#+END_SRC

** Shell & Term

*** Shell

#+BEGIN_SRC elisp
  (require 'shell)
  
  (use-package cmd-to-echo
    :defer    t
    :straight t)
  
  
  (use-package command-log-mode
    :defer    t
    :straight t)
  
  
  (defun nasy:shell-command-in-view-mode (start end command &optional output-buffer replace &rest other-args)
    "Put \"*Shell Command Output*\" buffers into view-mode."
    (unless (or output-buffer replace)
      (with-current-buffer "*Shell Command Output*"
        (view-mode 1))))
  (advice-add 'shell-command-on-region :after 'nasy:shell-command-in-view-mode)
  
  
  (use-package exec-path-from-shell
    :demand   *is-a-mac*
    :straight t
    :preface
    ;; Non-Forking Shell Command To String
    ;; https://github.com/bbatsov/projectile/issues/1044
    ;;--------------------------------------------------------------------------
  
    (defun call-process-to-string (program &rest args)
      (with-temp-buffer
        (apply 'call-process program nil (current-buffer) nil args)
        (buffer-string)))
  
    (defun get-call-process-args-from-shell-command (command)
      (cl-destructuring-bind
  	(the-command . args) (split-string command " ")
        (let ((binary-path (executable-find the-command)))
  	(when binary-path
  	  (cons binary-path args)))))
  
    (defun shell-command-to-string (command)
      (let ((call-process-args
  	   (get-call-process-args-from-shell-command command)))
        (if call-process-args
  	  (apply 'call-process-to-string call-process-args)
  	(shell-command-to-string command))))
  
    (defun try-call-process (command)
      (let ((call-process-args
  	   (get-call-process-args-from-shell-command command)))
        (if call-process-args
  	  (apply 'call-process-to-string call-process-args))))
  
    (advice-add 'shell-command-to-string :before-until 'try-call-process)
  
    (use-package noflet :straight t)
  
    (defun call-with-quick-shell-command (fn &rest args)
      (noflet ((shell-command-to-string
  	      (&rest args)
  	      (or (apply 'try-call-process args) (apply this-fn args))))
  	    (apply fn args)))
  
    (advice-add 'projectile-find-file :around 'call-with-quick-shell-command)
    :init (setq shell-command-switch "-ic")
    :config
    (when nil (message "PATH: %s, INFO: %s" (getenv "PATH")
  		     (getenv "ENVIRONMENT_SETUP_DONE"))
  	(setq exec-path-from-shell-debug t))
    (setq exec-path-from-shell-arguments (list "-l"))
    (setq exec-path-from-shell-check-startup-files nil)
    (add-to-list 'exec-path-from-shell-variables "SHELL")
    (add-to-list 'exec-path-from-shell-variables "GOPATH")
    (add-to-list 'exec-path-from-shell-variables "ENVIRONMENT_SETUP_DONE")
    (add-to-list 'exec-path-from-shell-variables "PYTHONPATH")
    (exec-path-from-shell-initialize))
#+END_SRC

*** Term

Emacs libvterm intergration

https://github.com/akermu/emacs-libvterm

#+BEGIN_SRC elisp
  (when *vterm*
    (progn
      (add-to-list 'load-path *vterm*)
      (let (vterm-install)
        (require 'vterm))))
#+END_SRC

** Window

#+BEGIN_SRC elisp
  (add-hook 'after-init-hook 'winner-mode)
  
  (use-package switch-window
    :straight t
    :init (setq-default switch-window-shortcut-style 'alphabet
  		      switch-window-timeout nil))
  
  ;; When splitting window, show (other-buffer) in the new window
  (defun split-window-func-with-other-buffer (split-function)
    "Split window with `SPLIT-FUNCTION'."
    (lambda (&optional arg)
      "Split this window and switch to the new window unless ARG is provided."
      (interactive "P")
      (funcall split-function)
      (let ((target-window (next-window)))
        (set-window-buffer target-window (other-buffer))
        (unless arg
  	(select-window target-window)))))
  
  (defun toggle-delete-other-windows ()
    "Delete other windows in frame if any, or restore previous window config."
    (interactive)
    (if (and winner-mode
  	   (equal (selected-window) (next-window)))
        (winner-undo)
      (delete-other-windows)))
  
  (defun split-window-horizontally-instead ()
    "Kill any other windows and re-split such that the current window is on the top half of the frame."
    (interactive)
    (let ((other-buffer (and (next-window) (window-buffer (next-window)))))
      (delete-other-windows)
      (split-window-horizontally)
      (when other-buffer
        (set-window-buffer (next-window) other-buffer))))
  
  (defun split-window-vertically-instead ()
    "Kill any other windows and re-split such that the current window is on the left half of the frame."
    (interactive)
    (let ((other-buffer (and (next-window) (window-buffer (next-window)))))
      (delete-other-windows)
      (split-window-vertically)
      (when other-buffer
        (set-window-buffer (next-window) other-buffer))))
  
  ;; Borrowed from http://postmomentum.ch/blog/201304/blog-on-emacs
  (defun nasy/split-window()
    "Split the window to see the most recent buffer in the other window.
  Call a second time to restore the original window configuration."
    (interactive)
    (if (eq last-command 'nasy-split-window)
        (progn
  	(jump-to-register :nasy-split-window)
  	(setq this-command 'nasy-unsplit-window))
      (window-configuration-to-register :nasy/split-window)
      (switch-to-buffer-other-window nil)))
  
  (general-define-key
   :prefix "C-x"
   "1" 'toggle-delete-other-windows
   "2" '(split-window-func-with-other-buffer 'split-window-vertically)
   "3" '(split-window-func-with-other-buffer 'split-window-horizontally)
   "|" 'split-window-horizontally-instead
   "_" 'split-window-vertically-instead
   "x" 'nasy/split-window
   "o" 'switch-window)
#+END_SRC

** Editor

Here is the editor config, including some features and functions.

#+BEGIN_SRC elisp
  ;;----------------------------------------------------------------------------
  ;; Editor
  ;;----------------------------------------------------------------------------
#+END_SRC

*** Diminish

#+BEGIN_SRC elisp
  (use-package diminish
    :demand   t
    :straight t)
#+END_SRC

*** FLX

#+BEGIN_SRC elisp
  (use-package flx
    :defer    t
    :straight t)
#+END_SRC

*** Advance Words Count

#+BEGIN_SRC elisp
  (use-package advance-words-count
    :defer    t
    :straight (advance-words-count :type git :host github :repo "LdBeth/advance-words-count.el"))
#+END_SRC

*** Anzu

#+BEGIN_SRC elisp
  (use-package anzu
    :defer    t
    :straight t
    :hook ((after-init . global-anzu-mode))
    :bind ([remap query-replace] . anzu-query-replace-regexp))
#+END_SRC

*** Auto Insert

#+BEGIN_SRC elisp
  (use-package autoinsert
    :init
    (define-auto-insert
      '("\\.py" . "Python Language")
      '("Python Language"
        "#!/usr/bin/env python3\n"
        "# -*- coding: utf-8 -*-\n"
        "r\"\"\"\n"
        "Life's pathetic, have fun (\"▔□▔)/hi~♡ Nasy.\n\n"
        "Excited without bugs::\n\n"
        "    |             *         *\n"
        "    |                  .                .\n"
        "    |           .\n"
        "    |     *                      ,\n"
        "    |                   .\n"
        "    |\n"
        "    |                               *\n"
        "    |          |\\___/|\n"
        "    |          )    -(             .              ·\n"
        "    |         =\\ -   /=\n"
        "    |           )===(       *\n"
        "    |          /   - \\\n"
        "    |          |-    |\n"
        "    |         /   -   \\     0.|.0\n"
        "    |  NASY___\\__( (__/_____(\\=/)__+1s____________\n"
        "    |  ______|____) )______|______|______|______|_\n"
        "    |  ___|______( (____|______|______|______|____\n"
        "    |  ______|____\\_|______|______|______|______|_\n"
        "    |  ___|______|______|______|______|______|____\n"
        "    |  ______|______|______|______|______|______|_\n"
        "    |  ___|______|______|______|______|______|____\n\n"
        "author   : Nasy https://nasy.moe\n"
        "date     : " (format-time-string "%b %e, %Y") \n
        "email    : Nasy <nasyxx+python@gmail.com>" \n
        "filename : " (file-name-nondirectory (buffer-file-name)) \n
        "project  : " (file-name-nondirectory (directory-file-name (or projectile-project-root default-directory))) \n
        "license  : GPL-3.0+\n\n"
        "There are more things in heaven and earth, Horatio, than are dreamt.\n"
        " --  From \"Hamlet\"\n"
        "\"\"\"\n"))
  
    (define-auto-insert
      '("\\.hs" . "Haskell Language")
      '("Haskell Language"
        "{-\n"
        " Excited without bugs, have fun (\"▔□▔)/hi~♡ Nasy.\n"
        " ------------------------------------------------\n"
        " |             *         *\n"
        " |                  .                .\n"
        " |           .\n"
        " |     *                      ,\n"
        " |                   .\n"
        " |\n"
        " |                               *\n"
        " |          |\\___/|\n"
        " |          )    -(             .              ·\n"
        " |         =\\ -   /=\n"
        " |           )===(       *\n"
        " |          /   - \\\n"
        " |          |-    |\n"
        " |         /   -   \\     0.|.0\n"
        " |  NASY___\\__( (__/_____(\\=/)__+1s____________\n"
        " |  ______|____) )______|______|______|______|_\n"
        " |  ___|______( (____|______|______|______|____\n"
        " |  ______|____\\_|______|______|______|______|_\n"
        " |  ___|______|______|______|______|______|____\n"
        " |  ______|______|______|______|______|______|_\n"
        " |  ___|______|______|______|______|______|____\n\n"
        "There are more things in heaven and earth, Horatio, than are dreamt.\n"
        "   -- From \"Hamlet\"\n"
        "--------------------------------------------------------------------------------\n\n-}\n\n"
        "--------------------------------------------------------------------------------\n-- |\n"
        "-- Filename   : " (file-name-nondirectory (buffer-file-name)) \n
        "-- Project    : " (file-name-nondirectory (directory-file-name (or projectile-project-root default-directory))) \n
        "-- Author     : Nasy\n"
        "-- License    : GPL-3.0+\n--\n"
        "-- Maintainer : Nasy <nasyxx+haskell@gmail.com>\n"
        "--\n--\n--\n--------------------------------------------------------------------------------\n")))
#+END_SRC

*** Beacon (Disabled)

#+BEGIN_SRC elisp
  (use-package beacon
    :disabled t
    :straight t
    :init (setq beacon-size  7
  	      beacon-color "#f85e9f")
    :hook ((after-init . beacon-mode)))
#+END_SRC

*** Beginend

#+BEGIN_SRC elisp
  (use-package beginend
    :straight t
    :hook ((after-init . beginend-global-mode)))
#+END_SRC

*** Carbon Now sh

Emacs to carbon.now.sh integration.

https://github.com/veelenga/carbon-now-sh.el

Try: 

#+BEGIN_SRC elisp
  ;; Emacs to carbon.now.sh integration
  ;; https://github.com/veelenga/carbon-now-sh.el
  ;; (carbon-now-sh)
  (use-package carbon-now-sh
    :defer    t
    :straight t)
#+END_SRC

*** Cheat Sh

#+BEGIN_SRC elisp
  (use-package cheat-sh
    :defer    t
    :straight t)
#+END_SRC

*** Company

** Company

#+BEGIN_SRC elisp
  (use-package company
    :straight t
    :init
    (setq-default company-minimum-prefix-length .2
  		company-transformers '(company-sort-by-backend-importance)
  		company-require-match nil
  		company-tooltip-align-annotations t
  		company-dabbrev-other-buffers 'all
  		company-dabbrev-downcase nil
  		company-dabbrev-ignore-case t
  		company-gtags-executable "gtags")
    :hook ((after-init . global-company-mode))
    :bind (("M-C-/" . company-complete)
  	 :map company-mode-map
  	 ("M-/"   . company-complete)
  	 :map company-active-map
  	 ("M-/"   . company-complete)
  	 ("<tab>" . company-other-backend)
  	 ("C-n"   . company-select-next)
  	 ("C-p"   . company-select-previous))
    :config
    (defvar my-prev-whitespace-mode nil)
    (make-variable-buffer-local 'my-prev-whitespace-mode)
    (defun pre-popup-draw ()
      "Turn off whitespace mode before showing company complete tooltip"
      (if whitespace-mode
  	(progn
  	  (setq my-prev-whitespace-mode t)
  	  (whitespace-mode -1)
  	  (setq my-prev-whitespace-mode t))))
    (defun post-popup-draw ()
      "Restore previous whitespace mode after showing company tooltip"
      (if my-prev-whitespace-mode
  	(progn
  	  (whitespace-mode 1)
  	  (setq my-prev-whitespace-mode nil))))
    (advice-add 'company-pseudo-tooltip-unhide :before #'pre-popup-draw)
    (advice-add 'company-pseudo-tooltip-hide :after #'post-popup-draw)
  
    (diminish 'company-mode "CMP")
    (defun company-backend-with-yas (backends)
      "Add :with company-yasnippet to company BACKENDS.
    Taken from https://github.com/syl20bnr/spacemacs/pull/179."
      (if (and (listp backends) (memq 'company-yasnippet backends))
  	backends
        (append (if (consp backends)
  		  backends
  		(list backends))
  	      '(:with company-yasnippet))))
    ;; add yasnippet to all backends
    (gsetq company-backends
  	(mapcar #'company-backend-with-yas company-backends)))
#+END_SRC

** Company Try Hard

#+BEGIN_SRC elisp
  (use-package company-try-hard
    :straight t
    :bind (:map company-active-map
  	 ("C-z" . company-try-hard)))
#+END_SRC

** Company Quickhelp

#+BEGIN_SRC elisp
  (use-package company-quickhelp
    :after company
    :straight t
    :bind (:map company-active-map
  	      ("C-c h" . company-quickhelp-manual-begin))
    :ghook #'after-init-hook
    :init (setq pos-tip-use-relative-coordinates t))
#+END_SRC

** Company Math

#+BEGIN_SRC elisp
  (use-package company-math
    :defer    t
    :straight t)
#+END_SRC

** Company Flx

#+BEGIN_SRC elisp
  (use-package company-flx
    :straight t
    :after company
    :ghook #'after-init-hook)
#+END_SRC

** Company Box

#+BEGIN_SRC elisp
  (when *c-box*
    (use-package company-box
      :defer    t
      :straight t
      :after (all-the-icons company)
      :init
      (setq company-box-icons-alist 'company-box-icons-all-the-icons)
      :ghook 'company-mode-hook
      :config
      (setq company-box-backends-colors '((company-lsp      . "#e0f9b5")
  					(company-elisp    . "#e0f9b5")
  					(company-files    . "#ffffc2")
  					(company-keywords . "#ffa5a5")
  					(company-capf     . "#bfcfff")
  					(company-dabbrev  . "#bfcfff")))
      (setq company-box-icons-unknown (concat (all-the-icons-material "find_in_page") " "))
      (setq company-box-icons-elisp
  	  (list
  	   (concat (all-the-icons-faicon "tag") " ")
  	   (concat (all-the-icons-faicon "cog") " ")
  	   (concat (all-the-icons-faicon "cube") " ")
  	   (concat (all-the-icons-material "color_lens") " ")))
      (setq company-box-icons-yasnippet (concat (all-the-icons-faicon "bookmark") " "))
      (setq company-box-icons-lsp
  	  `((1 .  ,(concat (all-the-icons-faicon   "text-height")    " ")) ;; Text
  	    (2 .  ,(concat (all-the-icons-faicon   "tags")           " ")) ;; Method
  	    (3 .  ,(concat (all-the-icons-faicon   "tag" )           " ")) ;; Function
  	    (4 .  ,(concat (all-the-icons-faicon   "tag" )           " ")) ;; Constructor
  	    (5 .  ,(concat (all-the-icons-faicon   "cog" )           " ")) ;; Field
  	    (6 .  ,(concat (all-the-icons-faicon   "cog" )           " ")) ;; Variable
  	    (7 .  ,(concat (all-the-icons-faicon   "cube")           " ")) ;; Class
  	    (8 .  ,(concat (all-the-icons-faicon   "cube")           " ")) ;; Interface
  	    (9 .  ,(concat (all-the-icons-faicon   "cube")           " ")) ;; Module
  	    (10 . ,(concat (all-the-icons-faicon   "cog" )           " ")) ;; Property
  	    (11 . ,(concat (all-the-icons-material "settings_system_daydream") " ")) ;; Unit
  	    (12 . ,(concat (all-the-icons-faicon   "cog" )           " ")) ;; Value
  	    (13 . ,(concat (all-the-icons-material "storage")        " ")) ;; Enum
  	    (14 . ,(concat (all-the-icons-material "closed_caption") " ")) ;; Keyword
  	    (15 . ,(concat (all-the-icons-faicon   "bookmark")       " ")) ;; Snippet
  	    (16 . ,(concat (all-the-icons-material "color_lens")     " ")) ;; Color
  	    (17 . ,(concat (all-the-icons-faicon   "file-text-o")    " ")) ;; File
  	    (18 . ,(concat (all-the-icons-material "refresh")        " ")) ;; Reference
  	    (19 . ,(concat (all-the-icons-faicon   "folder-open")    " ")) ;; Folder
  	    (20 . ,(concat (all-the-icons-material "closed_caption") " ")) ;; EnumMember
  	    (21 . ,(concat (all-the-icons-faicon   "square")         " ")) ;; Constant
  	    (22 . ,(concat (all-the-icons-faicon   "cube")           " ")) ;; Struct
  	    (23 . ,(concat (all-the-icons-faicon   "calendar")       " ")) ;; Event
  	    (24 . ,(concat (all-the-icons-faicon   "square-o")       " ")) ;; Operator
  	    (25 . ,(concat (all-the-icons-faicon   "arrows")         " "))) ;; TypeParameter
  	  )))
#+END_SRC

*** Dash

#+BEGIN_SRC elisp
  (use-package dash
    :defer    t
    :straight t)
#+END_SRC

*** Dash Functional

#+BEGIN_SRC elisp
  (use-package dash-functional
    :defer    t
    :straight t)
#+END_SRC

*** Dired

** Dired

#+BEGIN_SRC elisp
  (use-package dired
    :init
    (let ((gls (executable-find "gls")))
      (when gls (setq insert-directory-program gls)))
    (setq dired-recursive-deletes 'top)
    :bind (:map dired-mode-map
  	      ([mouse-2] . dired-find-file             )
  	      ("C-c C-p" . wdired-change-to-wdired-mode)))
#+END_SRC

** Diredfl

#+BEGIN_SRC elisp
  (use-package diredfl
    :after dired
    :straight t
    :hook ((after-init . diredfl-global-mode)))
#+END_SRC

** Uniquify

#+BEGIN_SRC elisp
  (use-package uniquify
    :init  ;; nicer naming of buffers for files with identical names
    (setq uniquify-buffer-name-style   'reverse
  	uniquify-separator           " • "
  	uniquify-after-kill-buffer-p t
  	uniquify-ignore-buffers-re   "^\\*"))
#+END_SRC

** Diff-hl (only for dired)

#+BEGIN_SRC elisp
  (use-package diff-hl
    :after dired
    :straight t
    :hook ((dired-mode . diff-hl-dired-mode)
  	 (magit-post-refresh . diff-hl-magit-post-refresh)))
#+END_SRC

** Dired Hacks Utils

#+BEGIN_SRC elisp
  (use-package dired-hacks-utils
    :after    dired
    :straight t)
#+END_SRC

** Dired Filter

#+BEGIN_SRC elisp
  (use-package dired-filter
    :after    dired
    :straight t
    :bind (:map dired-mode-map
  	      ("/" . dired-filter-map))
    :hook ((dired-mode . dired-filter-mode)
  	 (dired-mode . dired-filter-group-mode))
    :init (setq dired-filter-revert 'never
  	      dired-filter-group-saved-groups
  	      '(("default")
  		("PDF"
  		 (extension . "pdf"))
  		("LaTeX"
  		 (extension "tex" "bib"))
  		("Source"
  		 (extension "c" "cpp" "hs" "rb" "py" "r" "cs" "el" "lisp" "html" "js" "css"))
  		("Doc"
  		 (extension "md" "rst" "txt"))
  		("Org"
  		 (extension . "org"))
  		("Archives"
  		 (extension "zip" "rar" "gz" "bz2" "tar")))))
#+END_SRC

** Dired avfs

#+BEGIN_SRC elisp
  (when (executable-find "avfsd")
    (use-package dired-avfs
      :after    dired
      :straight t))
#+END_SRC

** Dired Rainbow

#+BEGIN_SRC elisp
  (use-package dired-rainbow
    :after    dired
    :commands dired-rainbow-define dired-rainbow-define-chmod
    :straight t
    :config
    (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
    (dired-rainbow-define html        "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
    (dired-rainbow-define xml         "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
    (dired-rainbow-define document    "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
    (dired-rainbow-define markdown    "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
    (dired-rainbow-define database    "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
    (dired-rainbow-define media       "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
    (dired-rainbow-define image       "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
    (dired-rainbow-define log         "#c17d11" ("log"))
    (dired-rainbow-define shell       "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
    (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
    (dired-rainbow-define compiled    "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
    (dired-rainbow-define executable  "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed  "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define packaged    "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
    (dired-rainbow-define encrypted   "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
    (dired-rainbow-define fonts       "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
    (dired-rainbow-define partition   "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
    (dired-rainbow-define vc          "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
    (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))
#+END_SRC

** Dired Subtree/ranger

#+BEGIN_SRC elisp
  (use-package dired-subtree
    :defer    t
    :straight t)
  
  (use-package dired-ranger
    :defer    t
    :straight t)
#+END_SRC

** Dired Narrow

#+BEGIN_SRC elisp
  (use-package dired-narrow
    :after    dired
    :straight t
    :bind (:map dired-narrow-map
  	      ("<down>"  . dired-narrow-next-file)
  	      ("<up>"    . dired-narrow-previous-file)
  	      ("<right>" . dired-narrow-enter-directory)))
#+END_SRC

** Dired Collapse

#+BEGIN_SRC elisp
  (use-package dired-collapse
    :after    dired
    :straight t
    :ghook 'dired-mode-hook)
#+END_SRC

*** Easy Kill

#+BEGIN_SRC elisp
  (use-package easy-kill
    :straight t
    :bind (([remap kill-ring-save] . easy-kill)
  	 ([remap mark-sexp]      . easy-mark)))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package thingopt
    :defer    t
    :straight t)
#+END_SRC

*** Eldoc Box

Disabled by default due to it causes lots of cpu.

#+BEGIN_SRC elisp
  (when *eldoc-box*
    (use-package eldoc-box
      :straight t
      :hook ((eldoc-mode . eldoc-box-hover-mode)
  	   (eldoc-mode . eldoc-box-hover-at-point-mode))))
#+END_SRC

*** Fill Column

**** Unfill

#+BEGIN_SRC elisp
  (use-package unfill
    :straight t
    :bind (("M-q" . unfill-toggle)))
#+END_SRC

**** Visual-fill-column

#+BEGIN_SRC elisp
  (use-package visual-fill-column
    :straight t
    :preface
    (defun maybe-adjust-visual-fill-column ()
      "Readjust visual fill column when the global font size is modified.
  This is helpful for writeroom-mode, in particular."
      (if visual-fill-column-mode
  	(add-hook 'after-setting-font-hook 'visual-fill-column--adjust-window nil t)
        (remove-hook 'after-setting-font-hook 'visual-fill-column--adjust-window t)))
    :hook ((visual-line-mode        . visual-fill-column-mode        )
  	 (visual-fill-column-mode . maybe-adjust-visual-fill-column)))
#+END_SRC

*** Flycheck

#+BEGIN_SRC elisp
  (use-package flycheck
    :straight t
    :preface
    (defun save-buffer-maybe-show-errors ()
      "Save buffer and show errors if any."
      (interactive)
      (save-buffer)
      (when (not flycheck-current-errors)
        (flycheck-list-errors)))
    :commands (flycheck-mode
  	     flycheck-next-error
  	     flycheck-previous-error)
    ;; :bind (("C-x C-s" . save-buffer-maybe-show-errors))
    :hook ((after-init . global-flycheck-mode))
    :init (setq flycheck-display-errors-function
  	      #'flycheck-display-error-messages-unless-error-list)
    :config (defalias 'show-error-at-point-soon
  	    'flycheck-show-error-at-point)
    (add-to-list 'flycheck-emacs-lisp-checkdoc-variables 'sentence-end-double-space))
  
  
  (use-package flycheck-package
    :after flycheck
    :straight t
    :config
    (with-eval-after-load 'elisp-mode
      (flycheck-package-setup)))
#+END_SRC

*** Grab Mac Link

#+BEGIN_SRC elisp
  (use-package grab-mac-link
    :defer    t
    :straight t)
#+END_SRC

*** Grep

#+BEGIN_SRC elisp
  (setq-default grep-highlight-matches t
  	      grep-scroll-output t)
  
  (when *is-a-mac*
    (setq-default locate-command "mdfind"))
#+END_SRC

*** Highlight

** cl-lib-highlight

#+BEGIN_SRC elisp
  (use-package cl-lib-highlight
    :after lisp-mode
    :straight t
    :config
    (cl-lib-highlight-initialize))
#+END_SRC

** Color Identifiers Mode

#+BEGIN_SRC elisp
  (use-package color-identifiers-mode
    :straight t
    :hook ((after-init . global-color-identifiers-mode)))
#+END_SRC

** hl-line

#+BEGIN_SRC elisp
  (use-package hl-line
    :hook ((after-init . global-hl-line-mode)))
#+END_SRC

** Highlight Indent Guides

#+BEGIN_SRC elisp
  (use-package highlight-indent-guides
    :straight t
    :init (setq highlight-indent-guides-responsive 'stack)
    :ghook '(prog-mode-hook text-mode-hook org-mode-hook))
#+END_SRC

** Highlight Number

#+BEGIN_SRC elisp
  (use-package highlight-numbers
    :straight t
    :ghook '(after-init-hook prog-mode-hook text-mode-hook org-mode-hook))
#+END_SRC

*** Helpful

[[https://github.com/Wilfred/helpful]]

#+BEGIN_SRC elisp
  (use-package helpful
    :straight t
    :bind (("C-c C-d" . helpful-at-point))
    :config (general-define-key
  	   :prefix "C-h"
  	   "f" 'helpful-callable
  	   "v" 'helpful-variable
  	   "k" 'helpful-key
  	   "F" 'helpful-function
  	   "C" 'helpful-command))
#+END_SRC

*** Htmlize

#+BEGIN_SRC elisp
  (use-package htmlize
    :defer t
    :straight t
    :init (setq htmlize-pre-style t))
#+END_SRC

*** Hydra

#+BEGIN_SRC elisp
  (use-package hydra
    :straight t
    :config
    (general-define-key
     :prefix "C-x"
     "9" 'hydra-unicode/body
     "|" 'hydra-window/body)
    (general-define-key
     :keymaps 'dired-mode-map
     "." 'hydra-dired/body)
    ;; insert unicode
    (defun nasy:insert-unicode (unicode-name)
      "Same as C-x 8 enter UNICODE-NAME."
      (insert-char (gethash unicode-name (ucs-names))))
    (defhydra hydra-unicode (:hint nil)
      "
      Unicode  _e_ €  _s_ ZERO WIDTH SPACE
  	     _f_ ♀  _o_ °   _m_ µ
  	     _r_ ♂  _a_ →   _l_ λ
      "
      ("e" (nasy:insert-unicode "EURO SIGN"))
      ("r" (nasy:insert-unicode "MALE SIGN"))
      ("f" (nasy:insert-unicode "FEMALE SIGN"))
      ("s" (nasy:insert-unicode "ZERO WIDTH SPACE"))
      ("o" (nasy:insert-unicode "DEGREE SIGN"))
      ("a" (nasy:insert-unicode "RIGHTWARDS ARROW"))
      ("m" (nasy:insert-unicode "MICRO SIGN"))
      ("l" (nasy:insert-unicode "GREEK SMALL LETTER LAMBDA")))
  
  
    (defhydra hydra-dired (:hint nil :color pink)
      "
    _+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
    _C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
    _D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
    _R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
    _Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
    _S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
    _r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
    _z_ compress-file  _A_ find regexp
    _Z_ compress       _Q_ repl regexp
  
    T - tag prefix
    "
      ("\\" dired-do-ispell)
      ("(" dired-hide-details-mode)
      (")" dired-omit-mode)
      ("+" dired-create-directory)
      ("=" diredp-ediff)         ;; smart diff
      ("?" dired-summary)
      ("$" diredp-hide-subdir-nomove)
      ("A" dired-do-find-regexp)
      ("C" dired-do-copy)        ;; Copy all marked files
      ("D" dired-do-delete)
      ("E" dired-mark-extension)
      ("e" dired-ediff-files)
      ("F" dired-do-find-marked-files)
      ("G" dired-do-chgrp)
      ("g" revert-buffer)        ;; read all directories again (refresh)
      ("i" dired-maybe-insert-subdir)
      ("l" dired-do-redisplay)   ;; relist the marked or singel directory
      ("M" dired-do-chmod)
      ("m" dired-mark)
      ("O" dired-display-file)
      ("o" dired-find-file-other-window)
      ("Q" dired-do-find-regexp-and-replace)
      ("R" dired-do-rename)
      ("r" dired-do-rsynch)
      ("S" dired-do-symlink)
      ("s" dired-sort-toggle-or-edit)
      ("t" dired-toggle-marks)
      ("U" dired-unmark-all-marks)
      ("u" dired-unmark)
      ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
      ("w" dired-kill-subdir)
      ("Y" dired-do-relsymlink)
      ("z" diredp-compress-this-file)
      ("Z" dired-do-compress)
      ("q" nil)
      ("." nil :color blue))
  
    (defhydra hydra-window ()
      "
    Movement^^        ^Split^         ^Switch^		^Resize^
    ----------------------------------------------------------------
    _<left>_ ←       	_v_ ertical    	_b_uffer	_h_ X←
    _<down>_ ↓        	_x_ horizontal	_f_ind files	_j_ X↓
    _<up>_ ↑        	_z_ undo      	_a_ce 1		_k_ X↑
    _<right>_ →        	_Z_ reset      	_s_wap		_l_ X→
    _F_ ollow		_D_lt Other   	_S_ave		max_i_mize
    _q_ cancel	_o_nly this   	_d_elete
    "
      ("<left>" windmove-left)
      ("<down>" windmove-down)
      ("<up>" windmove-up)
      ("<right>" windmove-right)
      ("h" hydra-move-splitter-left)
      ("j" hydra-move-splitter-down)
      ("k" hydra-move-splitter-up)
      ("l" hydra-move-splitter-right)
      ("b" helm-mini)
      ("f" helm-find-files)
      ("F" follow-mode)
      ("a" (lambda!
  	   (ace-window 1)
  	   (add-hook #'ace-window-end-once-hook
  		     #'hydra-window/body)))
      ("v" (lambda!
  	   (split-window-right)
  	   (windmove-right)))
  
      ("x" (lambda!
  	   (split-window-below)
  	   (windmove-down)))
  
      ("s" (lambda!
  	   (ace-window 4)
  	   (add-hook #'ace-window-end-once-hook
  		     #'hydra-window/body)))
      ("S" save-buffer)
      ("d" delete-window)
      ("D" (lambda!
  	   (ace-window 16)
  	   (add-hook #'ace-window-end-once-hook
  		     #'hydra-window/body)))
  
      ("o" delete-other-windows)
      ("i" ace-maximize-window)
      ("z" (progn
  	   (winner-undo)
  	   (setq this-command 'winner-undo)))
      ("Z" winner-redo)
      ("q" nil)))
#+END_SRC

*** iBuffer

** ibuffer

#+BEGIN_SRC elisp
  (use-package ibuffer
    :bind (("C-x C-b" . ibuffer))
    :init
    (setq ibuffer-saved-filter-groups
  	'(("Normal"
  	   ("Dired"      (mode . dired-mode))
  	   ("Emacs"     (or
  			 (name . "^\\*dashboard\\*$" )
  			 (name . "^\\*scratch\\*$"   )
  			 (name . "^\\*Messages\\*$"  )
  			 (name . "^\\*Backtrace\\*$" )
  			 (name . "^\\*Pp Eval Output\\*$")))
  	   ("Text"      (or
  			 (mode . org-mode)
  			 (mode . markdown)
  			 (mode . rst-mode)
  			 (mode . text-mode)))
  	   ("TeX"        (mode . tex-mode))
  	   ("Languages" (or
  			 (mode . emacs-lisp-mode)
  			 (mode . haskell-mode)
  			 (mode . javascript-mode)
  			 (mode . lisp-mode)
  			 (mode . python-mode)
  			 (mode . ruby-mode)
  			 (mode . rust-mode)
  			 (mode . html-mode)
  			 (mode . css-mode)
  			 (mode . prog-mode)))
  	   ("GNUs"      (or
  			 (mode . message-mode)
  			 (mode . bbdb-mode)
  			 (mode . mail-mode)
  			 (mode . gnus-group-mode)
  			 (mode . gnus-summary-mode)
  			 (mode . gnus-article-mode)
  			 (name . "^\\.bbdb$")
  			 (name . "^\\.newsrc-dribble")))
  	   ("Helm"       (mode . helm-major-mode))
  	   ))
  	ibuffer-show-empty-filter-groups nil
  	ibuffer-default-sorting-mode     'filename/process)
    :hook ((ibuffer-mode . (lambda () (ibuffer-switch-to-saved-filter-groups "Normal")))))
#+END_SRC

** ibuffer vc

#+BEGIN_SRC elisp
  (use-package ibuffer-vc
    :after ibuffer
    :straight t)
#+END_SRC

** Other settings

#+BEGIN_SRC elisp
  (use-package ibuffer
    :config
    (define-ibuffer-column size-h
      (:name "Size" :inline t)
      (file-size-human-readable (buffer-size)))
    (setq
     ibuffer-formats
     '((mark modified read-only vc-status-mini " "
  	   (name 22 22 :left :elide)
  	   " "
  	   (size-h 9 -1 :right)
  	   " "
  	   (mode 12 12 :left :elide)
  	   " "
  	   vc-relative-file)
       (mark modified read-only vc-status-mini " "
  	   (name 22 22 :left :elide)
  	   " "
  	   (size-h 9 -1 :right)
  	   " "
  	   (mode 14 14 :left :elide)
  	   " "
  	   (vc-status 12 12 :left)
  	   " "
  	   vc-relative-file))))
#+END_SRC

*** imenu list

#+BEGIN_SRC elisp
  (use-package imenu-list
    :straight t
    :bind (("C-." . imenu-list-smart-toggle))
    :init (setq imenu-list-auto-resize t))
#+END_SRC

*** indent-tools

#+BEGIN_SRC elisp
  (use-package indent-tools
    :straight t
    :bind (("C-c TAB" . indent-tools-hydra/body)))
#+END_SRC

*** iSearch

I only use ~rg~ to search, so I disabled the key-map of isearch.

#+BEGIN_SRC elisp
  (use-package isearch
    :preface
    ;; Search back/forth for the symbol at point
    ;; See http://www.emacswiki.org/emacs/SearchAtPoint
    (defun isearch-yank-symbol ()
      "*Put symbol at current point into search string."
      (interactive)
      (let ((sym (thing-at-point 'symbol)))
        (if sym
  	  (progn
  	    (setq isearch-regexp t
  		  isearch-string (concat "\\_<" (regexp-quote sym) "\\_>")
  		  isearch-message (mapconcat 'isearch-text-char-description isearch-string "")
  		  isearch-yank-flag t))
  	(ding)))
      (isearch-search-and-update))
  
    ;; http://www.emacswiki.org/emacs/ZapToISearch
    (defun isearch-exit-other-end (rbeg rend)
      "Exit isearch, but at the other end of the search string.
  This is useful when followed by an immediate kill."
      (interactive "r")
      (isearch-exit)
      (goto-char isearch-other-end))
  
    :bind (:map isearch-mode-map
  	      ([remap isearch-delete-char] . isearch-del-char)
  	      ("C-M-w"                     . isearch-yank-symbol)
  	      ([(control return)]              . isearch-exit-other-end)
  	      ("C-c C-o"                   . isearch-occur)))
#+END_SRC

*** Ivy, Counsel and Swiper

** Ivy

#+BEGIN_SRC elisp
  (use-package ivy
    :straight t
    :ghook 'after-init-hook
    :init (gsetq
  	 ivy-wrap                     t
  	 ivy-use-virtual-buffers      t
  	 ivy-virtual-abbreviate       'fullpath
  	 ivy-count-format             ""
  	 projectile-completion-system 'ivy
  	 ivy-magic-tilde              nil
  	 ivy-initial-inputs-alist '((Man-completion-table . "^")
  				    (woman . "^"))
  	 ivy-re-builders-alist    '((t . ivy--regex-fuzzy)))
    :bind (("C-c C-r" . ivy-resume)
  	 :map ivy-minibuffer-map
  	 ("RET"   . ivy-alt-done)
  	 ("C-j"   . ivy-immediate-done)
  	 ("C-RET" . ivy-immediate-done)
  	 ("<up>"  . ivy-previous-line-or-history)
  	 :map ivy-occur-mode-map
  	 ("C-c C-q" . ivy-wgrep-change-to-wgrep-mode))
    :diminish ivy-mode)
#+END_SRC

** Counsel

#+BEGIN_SRC elisp
  (use-package counsel
    :straight t
    :ghook 'after-init-hook
    :bind (("M-x"   . counsel-M-x)
  	 ("C-x :" . counsel-minibuffer-history)
  	 :map counsel-find-file-map
  	 ("<left>"  . counsel-up-directory)
  	 ("<right>" . counsel-down-directory))
    :init (gsetq counsel-mode-override-describe-bindings t
  	       counsel-find-file-at-point t
  	       counsel-grep-base-command
  	       "rg -i -M 120 --no-heading --line-number --color never %s %s")
    :config
    (gsetq counsel-yank-pop-height ivy-height)
    (general-define-key
     :prefix "C-c C-a"
     "o" 'counsel-outline
     "i" 'counsel-imenu
     "p" 'counsel-list-processes
     "d" 'counsel-dash
     "u" 'counsel-unicode-char)
    :diminish counsel-mode)
#+END_SRC

** Swiper

#+BEGIN_SRC elisp
  (use-package swiper
    :straight t
    :init (defun nasy/swiper-at-point (sym)
  	  "Use `swiper' to search for the `sym' at point."
  	  (interactive (list (thing-at-point 'symbol)))
  	  (swiper-isearch sym))
    :bind (("C-s" . nasy/swiper-at-point)
  	 :map swiper-map
  	 ("C-s" . nasy/swiper-isearch-forward)
  	 ("C-r" . nasy/swiper-isearch-backward))
    :config
    (defun nasy*ivy--insert-minibuffer (text)
      "Insert TEXT into minibuffer with appropriate cleanup."
      (let ((resize-mini-windows nil)
  	  (update-fn (ivy-state-update-fn ivy-last))
  	  (old-mark (marker-position (mark-marker)))
  	  deactivate-mark)
        (ivy--cleanup)
        (when (and update-fn (not (memq this-command '(ivy-call nasy/swiper-isearch-forward nasy/swiper-isearch-backward))))
  	(funcall update-fn))
        (ivy--insert-prompt)
        ;; Do nothing if while-no-input was aborted.
        (when (stringp text)
  	(if ivy-display-function
  	    (funcall ivy-display-function text)
  	  (ivy-display-function-fallback text)))
        (unless (frame-root-window-p (minibuffer-window))
  	(with-selected-window (minibuffer-window)
  	  (set-window-text-height nil
  				  (+ ivy-height
  				     (if ivy-add-newline-after-prompt
  					 1
  				       0)))))
        ;; prevent region growing due to text remove/add
        (when (region-active-p)
  	(set-mark old-mark))))
    (advice-add #'ivy--insert-minibuffer :override #'nasy*ivy--insert-minibuffer)
  
    (defun nasy*swiper-isearch-function (str)
      "Collect STR matches in the current buffer for `swiper-isearch'."
      (let* ((re-full (funcall ivy--regex-function str))
  	   (re (ivy-re-to-str re-full)))
        (unless (string= re "")
  	(let ((re (if (string-match "\\`\\(.*\\)[\\]|\\'" re)
  		      (match-string 1 re)
  		    re))
  	      (pt-hist (cdr (assoc str swiper--isearch-point-history)))
  	      cands
  	      idx-found
  	      (prev-lb -1)
  	      prev-line
  	      (i 0)
  	      (idx 0))
  	  (with-ivy-window
  	    (save-excursion
  	      (goto-char (point-min))
  	      (while (re-search-forward re nil t)
  		(unless idx-found
  		  (when (or
  			 (eq (match-beginning 0) pt-hist)
  			 (>= (match-beginning 0) (cdar swiper--isearch-point-history)))
  		    (push (cons str (match-beginning 0)) swiper--isearch-point-history)
  		    (setq idx-found idx)))
  		(let* ((lb (line-beginning-position))
  		       (line
  			(if (= lb prev-lb)
  			    prev-line
  			  (setq i 0)
  			  (buffer-substring
  			   lb
  			   (line-end-position)))))
  		  (put-text-property i (1+ i) 'point (point) line)
  		  (put-text-property 0 1 'num i line)
  		  (when (= i 0)
  		    (cl-incf idx)
  		    (push line cands)
  		    (setq prev-lb lb)
  		    (setq prev-line line))
  		  (cl-incf i)))))
  	  (setq ivy--old-re re)
  	  (when idx-found
  	    (ivy-set-index idx-found))
  	  (setq ivy--old-cands (nreverse cands))))))
    (advice-add #'swiper-isearch-function :override #'nasy*swiper-isearch-function)
  
    (defvar-local nasy-swiper-isearch-last-line nil)
    (defvar-local nasy-swiper-isearch-last-point nil)
  
    (defun nasy-swiper-isearch-forward (x)
      (let ((i 1)
  	  (l (length x))
  	  (p (get-text-property 0 'point x)))
        (goto-char p)
        (when (and nasy-swiper-isearch-last-line (= nasy-swiper-isearch-last-line (line-beginning-position)))
  	;; finding the right pos
  	(while (and p nasy-swiper-isearch-last-point (<= p nasy-swiper-isearch-last-point) (< i l))
  	  (setq p (get-text-property i 'point x))
  	  (cl-incf i))
  	(if p (goto-char p)))
        (setq nasy-swiper-isearch-last-line (line-beginning-position))
        (setq nasy-swiper-isearch-last-point p)))
  
    (defun nasy-swiper-isearch-backward (x)
      (let* ((l (length x))
  	   (i (get-text-property 0 'num x))
  	   (p (get-text-property i 'point x))
  	   (lb (progn (goto-char p) (line-beginning-position))))
        (while (and p nasy-swiper-isearch-last-point (>= p nasy-swiper-isearch-last-point) (<= 0 i))
  	(cl-decf i)
  	(setq p (if (< i 0) nil (get-text-property i 'point x))))
        (if p
  	  (progn
  	    (goto-char p)
  	    (setq nasy-swiper-isearch-last-line (line-beginning-position))
  	    (setq nasy-swiper-isearch-last-point p))
  	(setq nasy-swiper-isearch-last-line nil)
  	(setq nasy-swiper-isearch-last-point nil))))
  
    (defun nasy-swiper-isearch-action (x)
      "Move to X for `swiper-isearch'."
      (if (> (length x) 0)
  	(with-ivy-window
  	  (unless (eq ivy-exit 'done)
  	    (if (string= "C-r" (key-description (this-command-keys)))
  		(nasy-swiper-isearch-backward x)
  	      (nasy-swiper-isearch-forward x)))
  	  (isearch-range-invisible (line-beginning-position)
  				   (line-end-position))
  	  (unless (eq ivy-exit 'done)
  	    (swiper--cleanup)
  	    (swiper--add-overlays (ivy--regex ivy-text))
  	    (swiper--add-cursor-overlay)))
        (swiper--cleanup)))
    (advice-add #'swiper-isearch-action :override #'nasy-swiper-isearch-action)
  
    (defun nasy/swiper-isearch-forward ()
      (interactive)
      (ivy-call)
      (unless (with-ivy-window nasy-swiper-isearch-last-point)
        (let ((ivy-calling t))
  	(ivy-next-line-or-history))))
  
    (defun nasy/swiper-isearch-backward ()
      (interactive)
      (ivy-call)
      (unless (with-ivy-window nasy-swiper-isearch-last-point)
        (let ((ivy-calling t))
  	(ivy-previous-line-or-history 1))))
    (advice-add #'swiper--init :before (lambda! (setq nasy-swiper-isearch-last-point nil nasy-swiper-isearch-last-line nil))))
#+END_SRC

** Ivy Rich

#+BEGIN_SRC elisp
  (use-package ivy-rich
    :after    counsel
    :demand   t
    :straight t
    :config
    (defun ivy-rich-switch-buffer-icon (candidate)
      "ivy rich switch-buffer icon"
      (with-current-buffer
  	(get-buffer candidate)
        (let ((icon (all-the-icons-icon-for-mode major-mode)))
  	(if (symbolp icon)
  	    (all-the-icons-icon-for-mode 'fundamental-mode)
  	  icon))))
    (gsetq ivy-rich--display-transformers-list
  	 '(ivy-switch-buffer
  	   (:columns
  	    ((ivy-rich-switch-buffer-icon :width 2)
  	     (ivy-rich-candidate (:width 30))
  	     (ivy-rich-switch-buffer-size (:width 7))
  	     (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
  	     (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
  	     (ivy-rich-switch-buffer-project (:width 15 :face success))
  	     (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
  	    :predicate
  	    (lambda (cand) (get-buffer cand)))))
    (ivy-rich-mode))
#+END_SRC

** Ivy Posframe

#+BEGIN_SRC elisp
  (use-package ivy-posframe
    :demand   t
    :straight t
    :config
    (defun ivy-posframe-display-at-frame-top-center (str)
      (ivy-posframe--display str #'posframe-poshandler-frame-top-center))
  
    (gsetq ivy-display-function #'ivy-posframe-display-at-frame-top-center)
  
    (ivy-posframe-enable))
#+END_SRC

** Ivy Yasnippets

#+BEGIN_SRC elisp
  (use-package ivy-yasnippet
    :straight t
    :bind (("C-:" . ivy-yasnippet)))
#+END_SRC

** Counsel Projectile

#+BEGIN_SRC elisp
  (use-package counsel-projectile
    :after    projectile
    :straight t
    :bind (:map projectile-command-map ("/" . counsel-projectile-rg))
    :ghook 'after-init-hook)
#+END_SRC

*** Large File

#+BEGIN_SRC elisp
  (use-package vlf
    :straight t
    :init
    (defun ffap-vlf ()
      "Find file at point with VLF."
      (interactive)
      (let ((file (ffap-file-at-point)))
        (unless (file-exists-p file)
  	(error "File does not exist: %s" file))
        (vlf file))))
#+END_SRC

*** Link Hint

#+BEGIN_SRC elisp
  (use-package link-hint
    :straight t
    :bind (("C-c l o" . link-hint-open-link)
  	 ("C-c l c" . link-hint-copy-link))
    :config
    (general-define-key
     :prefix "C-c l")
    "o" 'link-hint-open-link
    "c" 'link-hint-copy-link)
#+END_SRC

*** List Unicode Display

#+BEGIN_SRC elisp
  (use-package list-unicode-display
    :defer    t
    :straight t)
#+END_SRC

*** mmm-mode

#+BEGIN_SRC elisp
  (use-package mmm-auto
    :demand t
    :straight mmm-mode
    :init (gsetq
  	 mmm-global-mode
  	 'buffers-with-submode-classes
  	 mmm-submode-decoration-level 2))
#+END_SRC

*** Multiple Cursors

#+BEGIN_SRC elisp
  (use-package multiple-cursors
    :straight t
    :bind (("C-<"     . mc/mark-previous-like-this)
  	 ("C->"     . mc/mark-next-like-this)
  	 ("C-+"     . mc/mark-next-like-this)
  	 ("C-c C-<" . mc/mark-all-like-this))
    :config
    ;; From active region to multiple cursors:
    (general-define-key
     :preface "C-c m"
     "r" 'set=rectangular-region-anchor
     "c" 'mc/edit-lines
     "e" 'mc/edit-ends-of-lines
     "a" 'mc/edit-beginnings-of-lines))
#+END_SRC

*** Pangu Spacing

#+BEGIN_SRC elisp
  (use-package pangu-spacing
    :straight t
    :init (gsetq pangu-spacing-real-insert-separtor t)
    :hook ((after-init . global-pangu-spacing-mode)))
#+END_SRC

*** Paper Break Lines

#+BEGIN_SRC elisp
  (use-package page-break-lines
    :straight t
    :hook ((after-init . global-page-break-lines-mode))
    :diminish page-break-lines-mode)
#+END_SRC

*** Parens

I use ~smartparens~, ~parinfer~ with ~rainbow-delimiters~ instead of ~paredit~.

#+BEGIN_SRC elisp
  (add-hook 'after-init-hook 'show-paren-mode)
#+END_SRC

** Smartparens

#+BEGIN_SRC elisp
  (use-package smartparens-config
    :straight smartparens
    :hook ((after-init . show-smartparens-global-mode)
  	 (after-init . smartparens-global-mode))
    :init (gsetq sp-hybrid-kill-entire-symbol nil))
#+END_SRC

** Parinfer

#+BEGIN_SRC elisp
  (use-package parinfer
    :straight t
    :bind (("C-," . parinfer-toggle-mode))
    :init (gsetq parinfer-extensions
  	       '(defaults       ; should be included.
  		  pretty-parens  ; different paren styles for different modes.
  		  ;; evil           ; If you use Evil.
  		  ;; lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
  		  ;; paredit        ; Introduce some paredit commands.
  		  smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
  		  smart-yank))   ; Yank behavior depend on mode.
    :ghook lisp-modes-hooks)
#+END_SRC

** Rainbow Delimiters

#+BEGIN_SRC elisp
  (use-package rainbow-delimiters
    :straight t
    :ghook '(prog-mode-hook text-mode-hook org-src-mode-hook))
#+END_SRC

** Highlight Parentheses

#+BEGIN_SRC elisp
  (use-package highlight-parentheses
    :straight t
    :init (gsetq hl-paren-highlight-adjacent t)
    :hook ((after-init . global-highlight-parentheses-mode)))
#+END_SRC

*** PDF Tools

#+BEGIN_SRC elisp
  (use-package pdf-tools
    :defer t
    :straight t
    :config
    (setq-default pdf-view-display-size 'fit-width)
    (bind-keys :map pdf-view-mode-map
  	     ("\\" . hydra-pdftools/body)
  	     ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
  	     ("g"  . pdf-view-first-page)
  	     ("G"  . pdf-view-last-page)
  	     ("l"  . image-forward-hscroll)
  	     ("h"  . image-backward-hscroll)
  	     ("j"  . pdf-view-next-page)
  	     ("k"  . pdf-view-previous-page)
  	     ("e"  . pdf-view-goto-page)
  	     ("u"  . pdf-view-revert-buffer)
  	     ("al" . pdf-annot-list-annotations)
  	     ("ad" . pdf-annot-delete)
  	     ("aa" . pdf-annot-attachment-dired)
  	     ("am" . pdf-annot-add-markup-annotation)
  	     ("at" . pdf-annot-add-text-annotation)
  	     ("y"  . pdf-view-kill-ring-save)
  	     ("i"  . pdf-misc-display-metadata)
  	     ("s"  . pdf-occur)
  	     ("b"  . pdf-view-set-slice-from-bounding-box)
  	     ("r"  . pdf-view-reset-slice)))
#+END_SRC

*** Pretty

** Pretty Mode

#+BEGIN_SRC elisp
  (use-package pretty-mode
    :demand t
    :straight t
    :hook (((text-mode
  	   org-mode)  . turn-on-pretty-mode)
  	 (after-init  . global-prettify-symbols-mode)
  	 (prog-mode . (lambda () (mapc (lambda (pair) (push pair prettify-symbols-alist))
  				  '(;; Data Type             P N
  				    ("Float"  . #x211d)  ;; ℝxxxx
  				    ("float"  . #x211d)  ;; ℝxxx
  				    ("Int"    . #x2124)  ;; ℤxxx
  				    ("int"    . #x2124)  ;; 𝕫xxx
  				    ;; ("String" . #x1d57e)  ;; 𝕊 𝕾
  				    ;; ("string" . #x1d598)  ;; 𝕤 𝖘
  				    ;; ("str"    . #x1d598)  ;; 𝕤 𝖘
  				    ("String" . (#x1d54a (Br . Bl) #x2006))  ;; 𝕊 xxxxxx
  				    ("string" . (#x1d564 (Br . Bl) #x2006))  ;; 𝕤 xxxxxx
  				    ("str"    . (#x1d564 (Br . Bl) #x2006))  ;; 𝕤 xxxx
  				    ("Char"   . #x2102)   ;; ℂx
  				    ("char"   . (#x1d554 (Br . Bl) #x2006))  ;; 𝕔 x
  
  				    ("False"  . #x1d53d)  ;; 𝕱 𝔽
  				    ("True"   . #x1d54b)  ;; 𝕿 𝕋
  
  				    ("Any"    . #x2203)  ;; ∃
  				    ("any"    . #x2203)  ;; ∃
  				    ("any_"   . #x2203)  ;; ∃
  				    ("And"    . #x22c0)  ;; ⋀
  				    ("and"    . #x22cf)  ;; ⋏
  				    ("Or"     . #x22c1)  ;; ⋁
  				    ("or"     . #x22cE)  ;; ⋎
  				    ("not"    . #x00ac)  ;; ¬
  				    ("not_"   . #x00ac)  ;; ¬
  
  				    ("All"    . #x2200)  ;; ∀
  				    ("all"    . #x2200)  ;; ∀
  				    ("all_"   . #x2200)  ;; ∀
  				    ("for"    . #x2200)  ;; ∀
  				    ("forall" . #x2200)  ;; ∀
  				    ("forM"   . #x2200)  ;; ∀
  
  				    ("pi"     . #x03c0)  ;; π
  
  				    ("sum"    . #x2211)  ;; ∑
  				    ("Sum"    . #x2211)  ;; ∑
  				    ("Product" . #x220F) ;; ∏
  				    ("product" . #x220F) ;; ∏
  
  				    ("None"   . #x2205)  ;; ∅
  				    ("none"   . #x2205)  ;; ∅
  
  				    ("in"     . #x2286)  ;; ⊆
  				    ("`elem`" . #x2286)  ;; ⊆
  				    ("not in"    . #x2288)  ;; ⊈
  				    ("`notElem`" . #x2288)  ;; ⊈
  
  				    ("return" . (#x21d2 (Br . Bl) #x2006 (Br . Bl) #x2004))  ;; ⇒  x
  				    ("yield"  . (#x21d4 (Br . Bl) #x2004))  ;; ⇔ x
  				    ("pure"   . (#x21f0 (Br . Bl)))))))          ;; ⇰ x
  
  	 ((prog-mode
  	   emacs-lisp-mode
  	   org-mode) . (lambda () (mapc (lambda (pair) (push pair prettify-symbols-alist))
  				   '(;; Global
  				     ;; Pipes
  				     ("<|"  . (?\s (Br . Bl) #Xe14d))
  				     ("<>"  . (?\s (Br . Bl) #Xe15b))
  				     ("<|>" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe14e))
  				     ("|>"  . (?\s (Br . Bl) #Xe135))
  
  				     ;; Brackets
  				     ("<*"  . (?\s (Br . Bl) #Xe14b))
  				     ("<*>" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe14c))
  				     ("*>"  . (?\s (Br . Bl) #Xe104))
  				     ("<$"  . (?\s (Br . Bl) #Xe14f))
  				     ("<$>" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe150))
  				     ("$>"  . (?\s (Br . Bl) #Xe137))
  				     ("<+"  . (?\s (Br . Bl) #Xe155))
  				     ("<+>" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe156))
  				     ("+>"  . (?\s (Br . Bl) #Xe13a))
  				     ("[]"  . (#x2005 (Br . Bl) #x1d731 (Br . Bl) #x2005))
  
  				     ;; Equality
  				     ("=/="  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe143))
  				     ("/="   . (?\s (Br . Bl) #Xe12c))
  				     ("/=="  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe12d))
  				     ("/==>" . (?\s (Br . Bl) ?\s (Br . Bl) ?\s (Br . Bl) #Xe13c))
  				     ("!==>" . (?\s (Br . Bl) ?\s (Br . Bl) ?\s (Br . Bl) #Xe13c))
  				     ;; Special
  				     ("||="  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe133))
  				     ("|="   . (?\s (Br . Bl) #Xe134))
  				     ("~="   . (?\s (Br . Bl) #Xe166))
  				     ("^="   . (?\s (Br . Bl) #Xe136))
  				     ("=:="  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe13b))
  
  				     ;; Comparisons
  				     ("</"   . (?\s (Br . Bl) #Xe162))
  				     ("</>"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe163))
  
  				     ;; Shifts
  				     ("=>>"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe147))
  				     ("->>"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe147))
  				     (">>>"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe14a))
  				     (">>>"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe14a))
  				     ("=<<"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe15c))
  				     ("-<<"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe15c))
  				     ("<<<"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe15f))
  
  				     ;; Dots
  				     (".-"   . (?\s (Br . Bl) #Xe122))
  				     (".="   . (?\s (Br . Bl) #Xe123))
  				     ("..<"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe125))
  
  				     ;; Hashes
  				     ("#{"   . (?\s (Br . Bl) #Xe119))
  				     ("#("   . (?\s (Br . Bl) #Xe11e))
  				     ("#_"   . (?\s (Br . Bl) #Xe120))
  				     ("#_("  . (?\s (Br . Bl) #Xe121))
  				     ("#?"   . (?\s (Br . Bl) #Xe11f))
  				     ("#["   . (?\s (Br . Bl) #Xe11a))
  
  				     ;; REPEATED CHARACTERS
  				     ;; 2-Repeats
  				     ("!!"   . (?\s (Br . Bl) #Xe10d))
  				     ("%%"   . (?\s (Br . Bl) #Xe16a))
  
  				     ;; 2+3-Repeats
  				     ("##"   . (?\s (Br . Bl) #Xe11b))
  				     ("###"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe11c))
  				     ("####" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe11d))
  				     ("---"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe112))
  				     ("{-"   . (?\s (Br . Bl) #Xe108))
  				     ("-}"   . (?\s (Br . Bl) #Xe110))
  				     ("\\\\" . (?\s (Br . Bl) #Xe106))
  				     ("\\\\\\" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe107))
  				     (".."   . (?\s (Br . Bl) #Xe124))
  				     ("..."  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe126))
  				     ("+++"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe139))
  				     ("//"   . (?\s (Br . Bl) #Xe12f))
  				     ("///"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe130))
  				     ("::"   . (?\s (Br . Bl) #Xe10a))  ;; 
  				     (":::"  . (?\s (Br . Bl) ?\s (Br . Bl) #Xe10b))
  
  				     ;; Arrows
  				     ;; Direct
  				     ;; ("->"  . (?\s (Br . Bl) #Xe114))  ;; 
  				     ;; ("=>"  . (?\s (Br . Bl) #Xe13f))
  				     ("->>" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe115))
  				     ("=>>" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe140))
  				     ("<<-" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe15d))
  				     ("<<=" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe15e))
  				     ("<->" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe154))
  				     ("<=>" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe159))
  				     ;; Branches
  				     ("-<"  . (?\s (Br . Bl) #Xe116))
  				     ("-<<" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe117))
  				     (">-"  . (?\s (Br . Bl) #Xe144))
  				     (">>-" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe148))
  				     ("=<<" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe142))
  				     (">=>" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe146))
  				     (">>=" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe149))
  				     ("<=<" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe15a))
  				     ;; Squiggly
  				     ("<~"  . (?\s (Br . Bl) #Xe160))
  				     ("<~~" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe161))
  				     ("~>"  . (?\s (Br . Bl) #Xe167))
  				     ("~~>" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe169))
  				     ("-~"  . (?\s (Br . Bl) #Xe118))
  				     ("~-"  . (?\s (Br . Bl) #Xe165))
  
  				     ;; MISC
  				     ("www" . (?\s (Br . Bl) ?\s (Br . Bl) #Xe100))
  				     ("~@"  . (?\s (Br . Bl) #Xe164))
  				     ("~~"  . (?\s (Br . Bl) #Xe168))
  				     ("?="  . (?\s (Br . Bl) #Xe127))
  				     (":="  . (?\s (Br . Bl) #Xe10c))
  				     ("/>"  . (?\s (Br . Bl) #Xe12e))
  				     ("+"   . #Xe16d)
  				     ("(:"  . (?\s (Br . Bl) #Xe16c))))))
  
  
  	 (python-mode . (lambda ()
  			  (mapc (lambda (pair) (push pair prettify-symbols-alist))
  				'(;; Syntax
  				  ("def"    . (#x1d521 (Br . Bl) #x1d522 (Br . Bl) #x1d523))
  				  ("List"   . #x1d543)  ;; 𝕃 𝕷
  				  ("list"   . #x1d55d)  ;; 𝕝 𝖑
  				  ("Dict"   . #x1d53B)  ;; 𝔻 𝕯
  				  ("dict"   . #x1d555)  ;; 𝕕 𝖉
  				  ("Set"    . #x1d61a)  ;; 𝔖 𝘚
  				  ("set"    . #x1d634)  ;; 𝔰 𝘴
  				  ("Tuple"  . #x1d61b)  ;; 𝕋 𝕿 𝘛
  				  ("tuple"  . #x1d635)  ;; 𝕥 𝖙 𝘵
  
  				  ("Union"  . #x22c3)  ;; ⋃
  				  ("union"  . #x22c3)))))  ;; ⋃
  
  	 (haskell-mode . (lambda ()
  			   (mapc (lambda (pair) (push pair prettify-symbols-alist))
  				 '(;; Syntax
  				   ("pure" . (#x21f0 (Br . Bl) #x2006))))))) ;; ⇰  x
  				   ;; (" . "  . (?\s (Br . Bl) #x2218 (Br . Bl) ?\s (Br . Bl) #x2006)) ;; ∘
  
    :config
    (pretty-activate-groups
     '(:sub-and-superscripts :greek :arithmetic))
  
    (pretty-deactivate-groups
     '(:equality :ordering :ordering-double :ordering-triple
  	       :arrows :arrows-twoheaded :punctuation
  	       :logic :sets :arithmetic-double :arithmetic-triple)))
#+END_SRC

** ipretty

#+BEGIN_SRC elisp
  (use-package ipretty
    :defer    t
    :straight t
    :ghook 'after-init-hook)
#+END_SRC

** Pretty Font

#+BEGIN_SRC elisp
  ;; https://github.com/tonsky/FiraCode/wiki/Emacs-instructions
  ;; This works when using emacs --daemon + emacsclient
  (add-hook 'after-make-frame-functions (lambda (frame) (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")))
  ;; This works when using emacs without server/client
  (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")
  ;; I haven't found one statement that makes both of the above situations work, so I use both for now
  
  (defun pretty-fonts-set-fontsets (CODE-FONT-ALIST)
    "Utility to associate many unicode points with specified `CODE-FONT-ALIST'."
    (--each CODE-FONT-ALIST
      (-let (((font . codes) it))
        (--each codes
  	(set-fontset-font nil `(,it . ,it) font)
  	(set-fontset-font t `(,it . ,it) font)))))
  
  (defun pretty-fonts--add-kwds (FONT-LOCK-ALIST)
    "Exploits `font-lock-add-keywords'(`FONT-LOCK-ALIST') to apply regex-unicode replacements."
    (font-lock-add-keywords
     nil (--map (-let (((rgx uni-point) it))
  	       `(,rgx (0 (progn
  			   (compose-region
  			    (match-beginning 1) (match-end 1)
  			    ,(concat "\t" (list uni-point)))
  			   nil))))
  	     FONT-LOCK-ALIST)))
  
  (defmacro pretty-fonts-set-kwds (FONT-LOCK-HOOKS-ALIST)
    "Set regex-unicode replacements to many modes(`FONT-LOCK-HOOKS-ALIST')."
    `(--each ,FONT-LOCK-HOOKS-ALIST
       (-let (((font-locks . mode-hooks) it))
         (--each mode-hooks
  	 (add-hook it (-partial 'pretty-fonts--add-kwds
  				(symbol-value font-locks)))))))
  
  (defconst pretty-fonts-fira-font
    '(;; OPERATORS
      ;; Pipes
      ("\\(<|\\)" #Xe14d) ("\\(<>\\)" #Xe15b) ("\\(<|>\\)" #Xe14e) ("\\(|>\\)" #Xe135)
  
      ;; Brackets
      ("\\(<\\*\\)" #Xe14b) ("\\(<\\*>\\)" #Xe14c) ("\\(\\*>\\)" #Xe104)
      ("\\(<\\$\\)" #Xe14f) ("\\(<\\$>\\)" #Xe150) ("\\(\\$>\\)" #Xe137)
      ("\\(<\\+\\)" #Xe155) ("\\(<\\+>\\)" #Xe156) ("\\(\\+>\\)" #Xe13a)
  
      ;; Equality
      ("\\(!=\\)" #Xe10e) ("\\(!==\\)"         #Xe10f) ("\\(=/=\\)" #Xe143)
      ("\\(/=\\)" #Xe12c) ("\\(/==\\)"         #Xe12d)
      ("\\(===\\)" #Xe13d) ("[^!/]\\(==\\)[^>]" #Xe13c)
  
      ;; Equality Special
      ("\\(||=\\)"  #Xe133) ("[^|]\\(|=\\)" #Xe134)
      ("\\(~=\\)"   #Xe166)
      ("\\(\\^=\\)" #Xe136)
      ("\\(=:=\\)"  #Xe13b)
  
      ;; Comparisons
      ("\\(<=\\)" #Xe141) ("\\(>=\\)" #Xe145)
      ("\\(</\\)" #Xe162) ("\\(</>\\)" #Xe163)
  
      ;; Shifts
      ("[^-=]\\(>>\\)" #Xe147) ("\\(>>>\\)" #Xe14a)
      ("[^-=]\\(<<\\)" #Xe15c) ("\\(<<<\\)" #Xe15f)
  
      ;; Dots
      ("\\(\\.-\\)"    #Xe122) ("\\(\\.=\\)" #Xe123)
      ("\\(\\.\\.<\\)" #Xe125)
  
      ;; Hashes
      ("\\(#{\\)"  #Xe119) ("\\(#(\\)"   #Xe11e) ("\\(#_\\)"   #Xe120)
      ("\\(#_(\\)" #Xe121) ("\\(#\\?\\)" #Xe11f) ("\\(#\\[\\)" #Xe11a)
  
      ;; REPEATED CHARACTERS
      ;; 2-Repeats
      ("\\(||\\)" #Xe132)
      ("\\(!!\\)" #Xe10d)
      ("\\(%%\\)" #Xe16a)
      ("\\(&&\\)" #Xe131)
  
      ;; 2+3-Repeats
      ("\\(##\\)"       #Xe11b) ("\\(###\\)"          #Xe11c) ("\\(####\\)" #Xe11d)
      ("\\(--\\)"       #Xe111) ("\\(---\\)"          #Xe112)
      ("\\({-\\)"       #Xe108) ("\\(-}\\)"           #Xe110)
      ("\\(\\\\\\\\\\)" #Xe106) ("\\(\\\\\\\\\\\\\\)" #Xe107)
      ("\\(\\.\\.\\)"   #Xe124) ("\\(\\.\\.\\.\\)"    #Xe126)
      ("\\(\\+\\+\\)"   #Xe138) ("\\(\\+\\+\\+\\)"    #Xe139)
      ("\\(//\\)"       #Xe12f) ("\\(///\\)"          #Xe130)
      ("\\(::\\)"       #Xe10a) ("\\(:::\\)"          #Xe10b)
  
      ;; ARROWS
      ;; Direct
      ("[^-]\\(->\\)" #Xe114) ("[^=]\\(=>\\)" #Xe13f)
      ("\\(<-\\)"     #Xe152)
      ("\\(-->\\)"    #Xe113) ("\\(->>\\)"    #Xe115)
      ("\\(==>\\)"    #Xe13e) ("\\(=>>\\)"    #Xe140)
      ("\\(<--\\)"    #Xe153) ("\\(<<-\\)"    #Xe15d)
      ("\\(<==\\)"    #Xe158) ("\\(<<=\\)"    #Xe15e)
      ("\\(<->\\)"    #Xe154) ("\\(<=>\\)"    #Xe159)
  
      ;; Branches
      ("\\(-<\\)"  #Xe116) ("\\(-<<\\)" #Xe117)
      ("\\(>-\\)"  #Xe144) ("\\(>>-\\)" #Xe148)
      ("\\(=<<\\)" #Xe142) ("\\(>>=\\)" #Xe149)
      ("\\(>=>\\)" #Xe146) ("\\(<=<\\)" #Xe15a)
  
      ;; Squiggly
      ("\\(<~\\)" #Xe160) ("\\(<~~\\)" #Xe161)
      ("\\(~>\\)" #Xe167) ("\\(~~>\\)" #Xe169)
      ("\\(-~\\)" #Xe118) ("\\(~-\\)"  #Xe165)
  
      ;; MISC
      ("\\(www\\)"                   #Xe100)
      ("\\(<!--\\)"                  #Xe151)
      ("\\(~@\\)"                    #Xe164)
      ("[^<]\\(~~\\)"                #Xe168)
      ("\\(\\?=\\)"                  #Xe127)
      ("[^=]\\(:=\\)"                #Xe10c)
      ("\\(/>\\)"                    #Xe12e)
      ("[^\\+<>]\\(\\+\\)[^\\+<>]"   #Xe16d)
      ("[^:=]\\(:\\)[^:=]"           #Xe16c)
      ("\\(<=\\)"                    #Xe157))
    "Fira font ligatures and their regexes.")
  
  (if (fboundp 'mac-auto-operator-composition-mode)
      (mac-auto-operator-composition-mode)
    (pretty-fonts-set-kwds
     '((pretty-fonts-fira-font prog-mode-hook org-mode-hook))))
#+END_SRC

*** Prescient

#+BEGIN_SRC elisp
  (use-package prescient
    :straight t
    :hook ((after-init . prescient-persist-mode)))
  
  
  (use-package ivy-prescient
    :straight t
    :init (gsetq ivy-prescient-retain-classic-highlighting t)
    :ghook 'after-init-hook)
  
  
  (use-package company-prescient
    :straight t
    :ghook 'after-init-hook)
#+END_SRC

*** Projectile

#+BEGIN_SRC elisp
  (use-package projectile
    :defer    t
    :straight t
    :diminish
    :bind-keymap ("C-c C-p" . projectile-command-map)
    :hook ((after-init . projectile-global-mode))
    :config (gsetq projectile-indexing-method      'hybrid
  		 projectile-require-project-root 'prompt
  		 projectile-project-root-files-top-down-recurring
  		 (append '("compile_commands.json"
  			   ".cquery")
  			 projectile-project-root-files-top-down-recurring)))
#+END_SRC

*** Recentf

#+BEGIN_SRC elisp
  (use-package recentf
    :hook ((after-init . recentf-mode))
    :init (gsetq
  	 recentf-save-file       "~/.emacs.d/var/recentf"
  	 recentf-max-saved-items 100
  	 recentf-exclude         '("/tmp/" "/ssh:"))
    :config
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory))
#+END_SRC

*** Smex/Amx

Now use amx instead of smex.

#+BEGIN_SRC elisp
  (use-package smex
    :disabled t
    :straight t
    :init (setq-default smex-save-file (no-littering-expand-var-file-name ".smex-items"))
    :bind (("<remap> <execute-extended-command>" . smex)))
  
  (use-package amx
    :straight t
    :init (setq-default amx-save-file (no-littering-expand-var-file-name ".amx-items"))
    :bind (("<remap> <execute-extended-command>" . amx)))
#+END_SRC

*** Subword

#+BEGIN_SRC elisp
  (use-package subword
    :defer t
    :diminish (subword-mode))
#+END_SRC

*** Symbol Overlay

#+BEGIN_SRC elisp
  (use-package symbol-overlay
    :straight t
    :bind (("M-i"  . symbol-overlay-put)
  	 ("M-n"  . symbol-overlay-switch-forward)
  	 ("M-p"  . symbol-overlay-switch-backward)
  	 ("<f8>" . symbol-overlay-remove-all)
  	 ("<f7>" . symbol-overlay-mode)))
#+END_SRC

*** Treemacs

#+BEGIN_SRC elisp
  (use-package treemacs
    :defer t
    :straight t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (gsetq treemacs-collapse-dirs                 (if (executable-find "python3") 3 0)
  	 treemacs-deferred-git-apply-delay      0.5
  	 treemacs-display-in-side-window        t
  	 treemacs-eldoc-display                 t
  	 treemacs-file-event-delay              5000
  	 treemacs-file-follow-delay             0.2
  	 treemacs-follow-after-init             t
  	 treemacs-follow-recenter-distance      0.1
  	 treemacs-git-command-pipe              ""
  	 treemacs-goto-tag-strategy             'refetch-index
  	 treemacs-indentation                   2
  	 treemacs-indentation-string            " "
  	 treemacs-is-never-other-window         nil
  	 treemacs-max-git-entries               5000
  	 treemacs-missing-project-action        'ask
  	 treemacs-no-png-images                 nil
  	 treemacs-no-delete-other-windows       t
  	 treemacs-project-follow-cleanup        nil
  	 treemacs-persist-file
  	 (no-littering-expand-var-file-name "treemacs-persist")
  	 treemacs-recenter-distance             0.1
  	 treemacs-recenter-after-file-follow    nil
  	 treemacs-recenter-after-tag-follow     nil
  	 treemacs-recenter-after-project-jump   'always
  	 treemacs-recenter-after-project-expand 'on-distance
  	 treemacs-show-cursor                   nil
  	 treemacs-show-hidden-files             t
  	 treemacs-silent-filewatch              nil
  	 treemacs-silent-refresh                nil
  	 treemacs-sorting                       'alphabetic-desc
  	 treemacs-space-between-root-nodes      t
  	 treemacs-tag-follow-cleanup            t
  	 treemacs-tag-follow-delay              1.5
  	 treemacs-width                         35)
  
    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;; (treemacs-resize-icons 44)
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
  	       (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))
    :config
    (general-define-key
     :keymaps 'global-map
     "M-0" 'treemacs-select-window)
    (general-define-key
     :prefix "C-x t"
     :keymaps 'global-map
     "1"   'treemacs-delete-other-windows
     "t"   'treemacs
     "B"   'treemacs-bookmark
     "C-t" 'treemacs-find-file
     "M-t" 'treemacs-find-tag))
  
  
  (use-package treemacs-projectile
    :after treemacs projectile
    :straight t)
  
  (use-package treemacs-icons-dired
    :after treemacs dired
    :straight t
    :config (treemacs-icons-dired-mode))
  
  (use-package treemacs-magit
    :after treemacs magit
    :straight t)
#+END_SRC

*** Undo/Redo

**** Undo Propose

#+BEGIN_SRC elisp
  (use-package undo-propose
    :straight t
    :config (undo-propose-wrap redo))
#+END_SRC

*** Version Control

** Useful Simple Packages

#+BEGIN_SRC elisp
  (dolist (package '(git-blamed
  		   git-timemachine))
    (straight-use-package package)
    (require package nil t))
#+END_SRC

** Git Modes

#+BEGIN_SRC elisp
  (use-package git-modes
    :defer    t
    :straight t)
#+END_SRC

** Magit

#+BEGIN_SRC elisp
  (use-package magit
    :straight t
    :hook ((magit-popup-mode-hook . no-trailing-whitespace))
    :init (gsetq magit-diff-refine-hunk t)
    :bind (([(meta f12)] . magit-status)  ;; Hint: customize `magit-repository-directories' so that you can use C-u M-F12 to
  	 ("C-x g"      . magit-status)
  	 ("C-x M-g"    . magit-dispatch-popup)
  	 :map magit-status-mode-map
  	 ("C-M-<up>"   . magit-section-up)
  	 :map vc-prefix-map
  	 ("f"          . vc-git-grep))
    :config (with-eval-after-load 'magit-todos
  	    (magit-todos-mode))
    (when *is-a-mac* (add-hook 'magit-mode-hook (lambda () (local-unset-key [(meta h)])))))
  
  (straight-use-package 'magit-todos)
#+END_SRC

** Magit Org Todos

#+BEGIN_SRC elisp
  (use-package magit-org-todos
    :after    org
    :straight t
    :config   (magit-org-todos-autoinsert))
#+END_SRC

** Forge

#+BEGIN_SRC elisp
  (use-package forge
    :defer    t
    :straight t)
#+END_SRC

** Transient

#+BEGIN_SRC elisp
  (use-package transient
    :straight t
    :init (gsetq transient-default-level 5))
#+END_SRC

** Git Commit

#+BEGIN_SRC elisp
  (use-package git-commit
    :straight t
    :hook ((git-commit-mode . goto-address-mode)))
#+END_SRC

** Git Messenger

#+BEGIN_SRC elisp
  (use-package git-messenger
    :straight t
    :init (gsetq git-messenger:show-detail t)
    :bind (:map vc-prefix-map
  	 ("p" . git-messenger:popup-message)))
#+END_SRC

** Git Gutter

#+BEGIN_SRC elisp
  (use-package git-gutter
    :straight t
    :diminish
    :hook (after-init . global-git-gutter-mode)
    :init (setq git-gutter:visual-line t
  	      git-gutter:disabled-modes '(asm-mode image-mode)
  	      git-gutter:modified-sign "■"
  	      git-gutter:added-sign "●"
  	      git-gutter:deleted-sign "✘")
  
    :config (general-define-key
  	   :prefix "C-x"
  	   "v =" 'git-gutter:popup-hunk
  	   "p"   'git-gutter:previous-hunk
  	   "n"   'git-gutter:next-hunk))
#+END_SRC

** Github Gist

#+BEGIN_SRC elisp
  (use-package gist
    :defer    t
    :straight t)
#+END_SRC

*** Which Function

#+BEGIN_SRC elisp
  (use-package which-func
    :defer t
    :ghook 'after-init-hook)
#+END_SRC

*** Which Key

#+BEGIN_SRC elisp
  (use-package which-key
    :straight t
    :ghook 'after-init-hook)
#+END_SRC

*** Whitespace

#+BEGIN_SRC elisp
  (use-package whitespace
    :preface
    (defun no-trailing-whitespace ()
      "Turn off display of trailing whitespace in this buffer."
      (setq show-trailing-whitespace nil))
    :init
    (gsetq-default show-trailing-whitespace t)
  
    ;; But don't show trailing whitespace in SQLi, inf-ruby etc.
    (dolist (hook '(artist-mode-hook
  		  picture-mode-hook
  		  special-mode-hook
  		  Info-mode-hook
  		  eww-mode-hook
  		  term-mode-hook
  		  vterm-mode-hook
  		  comint-mode-hook
  		  compilation-mode-hook
  		  twittering-mode-hook
  		  minibuffer-setup-hook
  		  fundamental-mode))
      (add-hook hook #'no-trailing-whitespace))
    :diminish whitespace-mode)
  
  
  (use-package whitespace-cleanup-mode
    :straight t
    :init (gsetq whitespace-cleanup-mode-only-if-initially-clean nil)
    :hook ((after-init . global-whitespace-cleanup-mode))
    :diminish (whitespace-cleanup-mode)
    :bind (("<remap> <just-one-space>" . cycle-spacing)))
#+END_SRC

*** Writeroom Mode

#+BEGIN_SRC elisp
  (use-package writeroom-mode
    :defer t
    :straight t
    :preface
    (define-minor-mode prose-mode
      "Set up a buffer for prose editing.
  This enables or modifies a number of settings so that the
  experience of editing prose is a little more like that of a
  typical word processor."
      nil " Prose" nil
      (if prose-mode
  	(progn
  	  (when (fboundp 'writeroom-mode)
  	    (writeroom-mode 1))
  	  (setq truncate-lines nil)
  	  (setq word-wrap t)
  	  (setq cursor-type 'bar)
  	  (when (eq major-mode 'org)
  	    (kill-local-variable 'buffer-face-mode-face))
  	  (buffer-face-mode 1)
  	  ;;(delete-selection-mode 1)
  	  (set (make-local-variable 'blink-cursor-interval) 0.6)
  	  (set (make-local-variable 'show-trailing-whitespace) nil)
  	  (set (make-local-variable 'line-spacing) 0.2)
  	  (set (make-local-variable 'electric-pair-mode) nil)
  	  (ignore-errors (flyspell-mode 1))
  	  (visual-line-mode 1))
        (kill-local-variable 'truncate-lines)
        (kill-local-variable 'word-wrap)
        (kill-local-variable 'cursor-type)
        (kill-local-variable 'show-trailing-whitespace)
        (kill-local-variable 'line-spacing)
        (kill-local-variable 'electric-pair-mode)
        (buffer-face-mode -1)
        ;; (delete-selection-mode -1)
        (flyspell-mode -1)
        (visual-line-mode -1)
        (when (fboundp 'writeroom-mode)
  	(writeroom-mode 0)))))
#+END_SRC

*** Yasnipeet

#+BEGIN_SRC elisp
  (use-package yasnippet
    :straight t
    :hook (after-init . yas-global-mode))
  
  (use-package yasnippet-snippets
    :defer    t
    :straight t)
#+END_SRC

** Languages

*** English

** Dict

#+BEGIN_SRC elisp
  (use-package bing-dict
    :straight t
    :bind (("C-c d" . bing-dict-brief))
    :init (setq bing-dict-show-thesaurus  'both
  	      bing-dict-vocabulary-save t
  	      bing-dict-cache-auto-save t
  	      bing-dict-vocabulary-file
  	      (no-littering-expand-var-file-name "bing-dict/vocabulary.org")
  	      bing-dict-cache-file
  	      (no-littering-expand-var-file-name "bing-dict/bing-dict-save.el")))
#+END_SRC

** Spell

#+BEGIN_SRC elisp
  (if *ispell*
      (use-package ispell
        :init
        (setq-default ispell-program-name   *ispell*
  		    ispell-silently-savep t
  		    ispell-dictionary     "english"
  		    ispell-personal-dictionary
  		    (no-littering-expand-var-file-name "ispell/dictionary"))
        (when (string-suffix-p "aspell" *ispell*)
  	(setq-default ispell-extra-args '("--reverse"))))
    (message "if you want to use ispell, try\n brew install aspell\n brew install ispell"))
#+END_SRC

*** Simple Supported Languages

#+BEGIN_SRC elisp
  (let ((languages '(elvish-mode
  		   fish-mode
  		   toml-mode
  		   yaml-mode))
        (extras    '(fish-completion
  		   ob-elvish)))
    (dolist (language languages)
      (straight-use-package language)
      (require language nil t))
    (dolist (extra extras)
      (straight-use-package extra)
      (require extra nil t)))
#+END_SRC

*** Language Server Protocol & Debug Adapter Protocol

** lsp-mode

#+BEGIN_SRC elisp
  (use-package lsp-mode
    :straight t
    :commands lsp
    :preface
    (defun delete-company-lsp ()
      "Delete company-lsp added by lsp-mode from company-backends"
      (when 'company-backends
        (gsetq company-backends (delete 'company-lsp company-backends)
  	     company-backends (delete 'intero-company company-backends))))
    :hook ((lsp-after-open . lsp-enable-imenu)
  	 ((lsp-mode
  	   lsp-after-open
  	   prog-mode
  	   company-box-mode
  	   company-mode) . delete-company-lsp))
    :init (gsetq lsp-prefer-flymake            nil
  	       lsp-enable-on-type-formatting nil))
#+END_SRC

** lsp-ui

#+BEGIN_SRC elisp
  (use-package lsp-ui
    :after lsp-mode
    :straight t
    :commands lsp-ui-mode
    :bind (:map lsp-ui-mode-map
  	      ("M-,"  . lsp-ui-peek-find-definitions)
  	      ("M-?"  . lsp-ui-peek-find-references)
  	      ("C-c u"   . lsp-ui-imenu)
  	      ("C-c C-a" . lsp-ui-sideline-apply-code-actions))
    :ghook 'lsp-mode-hook
    :init
    (gsetq lsp-ui-doc-position 'at-point
  	 lsp-ui-doc-header nil
  	 lsp-ui-doc-border "violet"
  	 ;; lsp-ui-doc-include-signature t
  	 lsp-ui-sideline-update-mode 'point
  	 lsp-ui-sideline-delay 1
  	 lsp-ui-sideline-ignore-duplicate t
  	 lsp-ui-peek-always-show t
  	 lsp-ui-flycheck-enable t))
#+END_SRC

** company-lsp

#+BEGIN_SRC elisp
  (use-package company-lsp
    :defer t
    :after (lsp-mode company)
    :straight t
    :commands company-lsp
    :init
    (general-pushnew
     '(company-lsp
       company-files
       company-dabbrev-code
       company-gtags
       company-etags
       company-keywords
       :with company-yasnippet)
     company-backends)
    (gsetq company-lsp-async               t
  	 company-lsp-enable-recompletion t
  	 company-lsp-enable-snippet      t
  	 company-lsp-cache-candidates    nil))
#+END_SRC

** Dap Mode

#+BEGIN_SRC elisp
  (use-package dap-mode
    :defer    t
    :straight t
    :config
    (require 'dap-python))
#+END_SRC

*** C/C++/Object-C (Clangd)

I use clangd.

#+BEGIN_SRC elisp
  (when *clangd*
    (use-package lsp-mode
      :straight t
      :hook (((c-mode c++-mode objc-mode) . lsp))
      :init (setq-default lsp-clients-clangd-executable *clangd*)))
#+END_SRC

*** Haskell

Include haskell-mode, lsp-haskell, intero and structured haskell mode.  Also
inlcude haskell-snippets.

** Haskell-Mode

#+BEGIN_SRC elisp
  (use-package haskell-mode
    :straight t
    :preface
    (define-minor-mode stack-exec-path-mode
      "If this is a stack project, set `exec-path' to the path \"stack exec\" would use."
      nil
      :lighter ""
      :global nil
      (if stack-exec-path-mode
  	(when (and (executable-find "stack")
  		   (locate-dominating-file default-directory "stack.yaml"))
  	  (setq-local
  	   exec-path
  	   (seq-uniq
  	    (append (list (concat (string-trim-right (shell-command-to-string "stack path --local-install-root")) "/bin"))
  		    (parse-colon-path
  		     (replace-regexp-in-string "[\r\n]+\\'" ""
  					       (shell-command-to-string "stack path --bin-path"))))
  	    'string-equal)))
        (kill-local-variable 'exec-path)))
  
    :gfhook '(subword-mode
  	    haskell-auto-insert-module-template
  	    haskell-collapse-mode
  	    stack-exec-path-mode
  	    interactive-haskell-mode
  	    (lambda () (getq-local tab-width 4)))
    :bind (("C-x a a" . align)
  	 :map haskell-mode-map
  	 ("C-c h" . hoogle)
  	 ("C-o"   . open-line))
    :init
    (gsetq haskell-mode-stylish-haskell-path            "stylish-haskell"
  	 haskell-indentation-layout-offset            4
  	 haskell-indentation-left-offset              4
  	 haskell-process-suggest-haskell-docs-imports t
  	 haskell-process-suggest-remove-import-lines  t
  	 haskell-process-auto-import-loaded-modules   t
  	 haskell-process-log                          t
  	 haskell-process-suggest-hayoo-imports        t
  	 haskell-process-suggest-hoogle-imports       t
  	 haskell-process-suggest-remove-import-lines  t
  	 haskell-tags-on-save                         t
  	 haskell-completing-read-function             'helm--completing-read-default
  	 haskell-doc-show-global-types                t
  	 haskell-svg-render-images                    t
  	 haskell-doc-chop-off-context                 nil)
  
    (unless *struct-hs*
      (add-hook #'haskell-mode-hook #'haskell-indentation-mode))
  
    (unless (fboundp 'align-rules-list)
      (defvar align-rules-list nil))
  
    (add-to-list 'align-rules-list
  	       '(haskell-types
  		 (regexp . "\\(\\s-+\\)\\(::\\|∷\\)\\s-+")
  		 (modes quote (haskell-mode literate-haskell-mode))))
    (add-to-list 'align-rules-list
  	       '(haskell-assignment
  		 (regexp . "\\(\\s-+\\)=\\s-+")
  		 (modes quote (haskell-mode literate-haskell-mode))))
    (add-to-list 'align-rules-list
  	       '(haskell-arrows
  		 (regexp . "\\(\\s-+\\)\\(->\\|→\\)\\s-+")
  		 (modes quote (haskell-mode literate-haskell-mode))))
    (add-to-list 'align-rules-list
  	       '(haskell-left-arrows
  		 (regexp . "\\(\\s-+\\)\\(<-\\|←\\)\\s-+")
  		 (modes quote (haskell-mode literate-haskell-mode))))
  
    :config
    (push 'haskell-mode page-break-lines-modes)
    (defun haskell-mode-generate-tags (&optional and-then-find-this-tag)
      "Generate tags using Hasktags.  This is synchronous function.
  
    If optional AND-THEN-FIND-THIS-TAG argument is present it is used
    with function `xref-find-definitions' after new table was
    generated."
      (interactive)
      (let* ((dir (haskell-cabal--find-tags-dir))
  	   (command (haskell-cabal--compose-hasktags-command dir)))
        (if (not command)
  	  (error "Unable to compose hasktags command")
  	;; I disabled the noisy shell command output.
  	;; The original is (shell-command command)
  	(call-process-shell-command command nil "*Shell Command Output*" t)
  	(haskell-mode-message-line "Tags generated.")
  	(when and-then-find-this-tag
  	  (let ((tags-file-name dir))
  	    (xref-find-definitions and-then-find-this-tag)))))))
#+END_SRC

** LSP Haskell

#+BEGIN_SRC elisp
  (use-package lsp-haskell
    :demand   t
    :straight t
    :hook ((haskell-mode   . lsp)
  	 (lsp-after-open . (lambda () (add-hook 'before-save-hook #'lsp-format-buffer nil t)))
  	 (haskell-mode   . delete-company-lsp))
    ;; You can set the lsp-haskell settings here
    ;; (lsp-haskell-set-hlint-on)                    ;; default on
    ;; (lsp-haskell-set-max-number-of-problems 100)  ;; default 100
    ;; (lsp-haskell-set-liquid-on)                   ;; default off
    ;; (lsp-haskell-set-completion-snippets-on)      ;; default on
    )
#+END_SRC

** intero

#+BEGIN_SRC elisp
  (when *intero*
    (use-package intero
      :straight t
      :after haskell-mode
      :hook (haskell-mode . (lambda () (intero-global-mode 1)))
      :config
      (define-key intero-mode-map (kbd "M-?") nil)
      (define-key intero-mode-map (kbd "C-c C-r") nil)))
#+END_SRC

** Structured Haskell Mode

#+BEGIN_SRC elisp
  (if *struct-hs*
      (progn
        (add-to-list 'load-path *struct-hs-path*)
        (require 'shm)
        (setq shm-program-name *struct-hs*)
        (add-hook #'haskell-mode-hook #'structured-haskell-mode))
    (progn
      (when *struct-hs*
        (message (concat "*NOTE* about structured-haskell-mode:\n"
  		       "https://github.com/projectional-haskell/structured-haskell-mode\n"
  		       "No structured-haskell-mode elisp find.\n"
  		       "If you want to use it, \n"
  		       "please install it and config its variables *struct-hs-path* in user-config.el\n")))))
#+END_SRC

** haskell snippets

#+BEGIN_SRC elisp
  (use-package haskell-snippets
    :defer    t
    :straight t)
#+END_SRC

*** HTML

#+BEGIN_SRC elisp
  (use-package lsp-mode
    :straight t
    :hook ((html-mode . lsp)))
#+END_SRC

*** JavaScript & TypeScript

#+BEGIN_SRC elisp
  (use-package lsp-mode
    :disabled t
    :straight t
    :hook ((javascript-mode . lsp)))
#+END_SRC

*** Lisp

** lisp-mode

#+BEGIN_SRC elisp
  (use-package lisp-mode
    :preface
    (defun eval-last-sexp-or-region (prefix)
      "Eval region from BEG to END if active, otherwise the last sexp."
      (interactive "P")
      (if (and (mark) (use-region-p))
  	(eval-region (min (point) (mark)) (max (point) (mark)))
        (pp-eval-last-sexp prefix)))
    :bind (("<remap> <eval-expression>" . pp-eval-expression)
  	 :map emacs-lisp-mode-map
  	 ("C-x C-e" . eval-last-sexp-or-region)))
#+END_SRC

** Highlight-quoted

#+BEGIN_SRC elisp
  (use-package highlight-quoted
    :defer t
    :straight t
    :hook ((emacs-lisp-mode . highlight-quoted-mode)))
#+END_SRC

** elisp-def

#+BEGIN_SRC elisp
  (use-package elisp-def
    :straight t
    :hook (((emacs-lisp-mode ielm-mode) . elisp-def-mode)))
#+END_SRC

*** Markdown

#+BEGIN_SRC elisp
  (use-package markdown-mode
    :defer t
    :straight t
    :mode ("INSTALL\\'"
  	 "CONTRIBUTORS\\'"
  	 "LICENSE\\'"
  	 "README\\'"
  	 "\\.markdown\\'"
  	 "\\.md\\'"))
#+END_SRC

*** Pandoc

#+BEGIN_SRC elisp
  (use-package pandoc-mode
    :defer    t
    :straight t)
#+END_SRC

*** Python

Include python-mode, black, py-isort, python-docstring and sphinx-doc.

** Python Mode

#+BEGIN_SRC elisp
  (require 'python)
  
  (use-package python-mode
    :straight t
    :commands python-mode
    :mode ("\\.py\\'" . python-mode)
    :interpreter (("python"  . python-mode)
  		("python3" . python-mode))
    :preface
    ;; TODO: Need improve.
    (defun setq-after ()
      "setq after python mode."
      (when (projectile-file-exists-p "mypy.ini")
        (gsetq flycheck-python-mypy-ini "mypy.ini"
  	     flycheck-mypy.ini        "mypy.ini"))
  
      (when (projectile-file-exists-p "pylintrc")
        (gsetq flycheck-pylintrc "pylintrc")))
  
    (defcustom nasy*python-buffer "vterm"
      "Nasy Python Buffer"
      :group 'python-mode
      :type 'string)
  
    (defun nasy/python-send-buffer ()
      "Send current buffer to the running python process."
      (interactive)
      (let ((proc (get-buffer-process nasy*python-buffer)))
        (unless proc
  	(error "No process found"))
        (save-buffer)
        (comint-simple-send proc
  			  (format "\%load %s" (buffer-file-name)))
        (pop-to-buffer nasy*python-buffer)))
  
    (defun nasy/python-send-region (begin end)
      "Evaluate the code in region from BEGIN to END in the python repl.
  if the region is unset, the current line will be used."
      (interactive "r")
      (unless (use-region-p)
        (setq begin (line-beginning-position)
  	    end (line-end-position)))
      (let* ((text (buffer-substring-no-properties begin end))
  	   (proc (get-buffer-process nasy*python-buffer)))
        (unless proc
  	(error "No process found"))
        (comint-simple-send proc text)
        (display-buffer nasy*python-buffer)))
  
    (defun nasy/python-send-defun (&optional arg)
      "Send the current defun to inferior Python process.
  When ARG is non-nil do not include decorators."
      (interactive (list current-prefix-arg t))
      (nasy:python-send-region
       (progn
         (end-of-line 1)
         (while (and (or (python-nav-beginning-of-defun)
  		    (beginning-of-line 1))
  		 (> (current-indentation) 0)))
         (when (not arg)
  	 (while (and (forward-line -1)
  		   (looking-at (python-rx decorator))))
  	 (forward-line 1))
         (point-marker)
         (progn
  	 (or (python-nav-end-of-defun)
  	    (end-of-line 1))
  	 (point-marker)))))
  
    (defun nasy/python-switch-to-shell ()
      "Switch to inferior Python process buffer."
      (interactive "p")
      (let ((proc (get-buffer-process nasy:python-buffer)))
        (unless proc
  	(error "No process found"))
        (pop-to-buffer nasy*python-buffer)))
    :gfhook '(lsp
  	    delete-company-lsp
  	    setq-after)
    :init
    (gsetq python-indent-offset                  4
  	 indent-tabs-mode                      nil
  	 python-indent-guess-indent-offset     nil
  	 python-shell-completion-native-enable nil
  	 python-shell-interpreter              "ipython3"
  	 python-shell-interpreter-args         "-i"
  	 py-ipython-command-args               "-i"
  	 py-python-command                     "python3"
  	 flycheck-python-pycompile-executable  "python3"
  	 flycheck-python-pylint-executable     "python3"
  	 python-mode-modeline-display          "Python"
  	 python-skeleton-autoinsert            t
  	 py-python-command                     "python3"
  	 py-python2-command                    "python2"
  	 py-python3-command                    "python3"
  	 py-ipython-command                    "ptipython"
  	 py-ipython2-command                   "ipython2"
  	 py-ipython3-command                   "ipython3"
  	 py-set-fill-column-p                  t
  	 py-shell-name                         nasy*python-buffer)
  
    ;; A list here https://github.com/palantir/python-language-server/blob/develop/vscode-client/package.json#L23-L230
    ;; I prefer pydocstyle and black, so disabled yapf, though, pydocstyle still cannot be abled.
    ;; pip install black pyls-black -U
    ;; The default line-length is 88 when using black, you can add a file named "pyproject.yaml" that contains
    ;; [tool.black]
    ;; line-length = 79
    (with-eval-after-load 'lsp-pyls
      (gsetq lsp-pyls-configuration-sources                          ["pydocstyle" "pycodestyle" "pyflakes" "pylint"]
  	   lsp-pyls-plugins-pydocstyle-enabled                     t
  	   lsp-pyls-plugins-yapf-enabled                           t
  	   lsp-pyls-plugins-jedi-definition-follow-imports         t
  	   lsp-pyls-plugins-jedi-definition-follow-builtin-imports t
  	   lsp-pyls-plugins-jedi-signature-help-enabled            t
  	   lsp-pyls-plugins-jedi-symbols-enabled                   t
  	   lsp-pyls-plugins-pyls_mypy-live-mode                    nil))
    :config
    (general
     :prefix "C-c"
     :keymaps 'python-mode-map
     "C-b" 'nasy/python-send-buffer
     "C-r" 'nasy/python-send-region
     "C-c" 'nasy/python-send-defun
     "C-z" 'nasy/python-switch-to-shell)
    (unless *blacken*
      (add-hook #'before-save-hook #'lsp-format-buffer nil t)))
#+END_SRC

** black

#+BEGIN_SRC elisp
  ;; Now you can use it in lsp.
  ;; NOTICE you have to config black though pyproject.toml.
  (when *blacken*
    (use-package blacken
      :straight t
      :hook ((python-mode    . blacken-mode))))
#+END_SRC

** py-isort

#+BEGIN_SRC elisp
  (use-package py-isort
    :straight t
    :hook (before-save . py-isort-before-save))
#+END_SRC

** Python Docstring

#+BEGIN_SRC elisp
  (use-package python-docstring
    :straight t
    :hook ((python-mode . python-docstring-mode)))
#+END_SRC

** Sphinx Doc

#+BEGIN_SRC elisp
  (use-package sphinx-doc
    :straight t
    :hook ((python-mode . sphinx-doc-mode)))
#+END_SRC

** pyimport

#+BEGIN_SRC elisp
  (use-package pyimport
    :straight t
    :bind (:map python-mode-map
  	      ("C-c C-i" . pyimport-insert-missing)))
#+END_SRC

*** Rust

Include rust-mode, rls and Cargo.

#+BEGIN_SRC elisp
  (when *rust*
    (use-package rust-mode
      :defer t
      :straight t
      :hook ((rust-mode . (lambda () (setq-local tab-width 4)))
  	   (rust-mode . lsp))
      :config
      (when *rls*
        (add-hook #'rust-mode-hook #'lsp)
        (add-hook #'rust-mode-hook #'(lambda () (add-to-list 'flycheck-disabled-checkers 'rust-cargo))))))
  
  (use-package cargo
    :after rust-mode
    :straight t
    :hook ((toml-mode . cargo-minor-mode)
  	 (rust-mode . cargo-minor-mode)))
#+END_SRC

** Org Mode

*** Load

I use ~org~ with ~org-plus-contrib~

#+BEGIN_SRC elisp
  (use-package org
    :straight org-plus-contrib)
  
  (require 'org-tempo nil t)
#+END_SRC

*** OX Org

Other ~ox-_~ packages.

#+BEGIN_SRC elisp
  (straight-use-package 'ox-rst)
  
  
  (with-eval-after-load 'ox
    (let ((oxs '(ox-md
  	       ox-rst)))
      (dolist (language oxs)
        (require language nil t))))
  
  
  (use-package ox-pandoc
    :after    ox
    :straight t)
#+END_SRC

*** Basic Configs

#+BEGIN_SRC elisp
  (use-package org
    :demand t
    :preface
    (advice-add 'org-refile :after (lambda (&rest _) (org-save-all-org-buffers)))
  
    ;; Exclude DONE state tasks from refile targets
    (defun verify-refile-target ()
      "Exclude todo keywords with a done state from refile targets."
      (not (member (nth 2 (org-heading-components)) org-done-keywords)))
    (setq org-refile-target-verify-function 'verify-refile-target)
  
    (defun org-refile-anywhere (&optional goto default-buffer rfloc msg)
      "A version of `org-refile' which allows refiling to any subtree."
      (interactive "P")
      (let ((org-refile-target-verify-function))
        (org-refile goto default-buffer rfloc msg)))
  
    (defun org-agenda-refile-anywhere (&optional goto rfloc no-update)
      "A version of `org-agenda-refile' which allows refiling to any subtree."
      (interactive "P")
      (let ((org-refile-target-verify-function))
        (org-agenda-refile goto rfloc no-update)))
  
    ;; The original from spacemacs chinese layer shows as follow.
    ;;   (defadvice org-html-paragraph (before org-html-paragraph-advice
    ;;                                         (paragraph contents info) activate)
    ;;     "Join consecutive Chinese lines into a single long line without
    ;; unwanted space when exporting org-mode to html."
    ;;     (let* ((origin-contents (ad-get-arg 1))
    ;;            (fix-regexp "[[:multibyte:]]")
    ;;            (fixed-contents
    ;;             (replace-regexp-in-string
    ;;              (concat
    ;;               "\\(" fix-regexp "\\) *\n *\\(" fix-regexp "\\)") "\\1\\2" origin-contents)))
    ;;       (ad-set-arg 1 fixed-contents)))
  
    (defun nasy/org-html-paragraph-advice (orig paragraph contents &rest args)
      "Join consecutive Chinese lines into a single long line without
  unwanted space when exporting org-mode to html."
      (let* ((fix-regexp "[[:multibyte:]]")
  	   (fixed-contents
  	    (replace-regexp-in-string
  	     (concat
  	      "\\(" fix-regexp "\\) *\n *\\(" fix-regexp "\\)") "\\1\\2" contents)))
        (apply orig paragraph fixed-contents args)))
    (advice-add #'org-html-paragraph :around #'nasy/org-html-paragraph-advice)
  
    (defun nasy/org-fix-saveplace ()
      "Fix a problem with saveplace.el putting you back in a folded position"
      (when (outline-invisible-p)
        (save-excursion
  	(outline-previous-visible-heading 1)
  	(org-show-subtree))))
  
    :bind (("C-c l" . org-store-link)
  	 ("C-c a" . org-agenda)
  	 ("C-c c" . org-capture)
  	 :map org-mode-map
  	 ("C-M-<up>" . org-up-element)
  	 ("M-h"      . nil)
  	 ("C-c g"    . org-mac-grab-link)
  	 ("C-c _"    . org-edit-special)
  	 :map org-src-mode-map
  	 ("C-c _"    . org-edit-src-exit))
    :hook ((org-mode . auto-fill-mode)
  	 (org-mode . nasy/org-fix-saveplace))
    :init
    (gsetq
     org-archive-mark-done nil
     org-archive-location  "%s_archive::* Archive"
     org-archive-mark-done nil
  
     org-catch-invisible-edits 'smart
  
     org-default-notes-file "~/notes/default.org"
  
     org-edit-timestamp-down-means-later t
  
     org-ellipsis " ﹅"
  
     org-export-backends                           '(ascii html latex md)
     org-export-coding-system                      'utf-8
     org-export-kill-product-buffer-when-displayed t
     org-export-with-broken-links                  'mark
     org-export-with-sub-superscripts              '{}
     org-use-sub-superscripts                      '{}
  
     org-fast-tag-selection-single-key 'expert
  
     org-highlight-latex-and-related: '(native latex script entities)
  
     org-hide-emphasis-markers t
     org-hide-leading-stars    nil
  
     org-html-checkbox-type       'uncode
     org-html-doctype             "html5"
     org-html-html5-fancy         t
     org-html-htmlize-output-type 'inline-css
     org-html-klipsify-src        t
     org-html-mathjax-options     '((path          "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/latest.js?config=TeX-AMS-MML_HTMLorMML")
  				  (scale         "100")
  				  (align         "center")
  				  (font          "Neo-Euler")
  				  (linebreaks    "false")
  				  (autonumber    "AMS")
  				  (indent        "0em")
  				  (multlinewidth "85%")
  				  (tagindent     ".8em")
  				  (tagside       "right"))
     org-html-with-latex          'mathjax
     org-html-validation-link     nil
  
     org-indent-mode-turns-on-hiding-stars nil
  
     org-pretty-entities t
  
     ;; org time
     ;; org-display-custom-times         t  ;; should setq-default
     org-time-stamp-custom-formats    '("<%a %b %d, %Y>" . "<%a %b %d %H:%M:%S %Y>")
     org-export-date-timestamp-format "%b %d, %Y"
  
     ;; org latex
     org-latex-compiler "lualatex"
     org-latex-default-packages-alist
     (quote
      (("AUTO" "inputenc" t
        ("pdflatex"))
       ("T1" "fontenc" t
        ("pdflatex"))
       ("" "graphicx" t nil)
       ("" "grffile" t nil)
       ("" "longtable" t nil)
       ("" "wrapfig" nil nil)
       ("" "rotating" nil nil)
       ("normalem" "ulem" t nil)
       ("" "amsmath" t nil)
       ("" "textcomp" t nil)
       ("" "amssymb" t nil)
       ("" "capt-of" nil nil)
       ("colorlinks,unicode,linkcolor=blue,anchorcolor=blue,citecolor=green,filecolor=black,urlcolor=blue"
        "hyperref" t nil)
       ("" "luatexja-fontspec" t nil)
       ("" "listings" t nil)))
     org-latex-default-table-environment "longtable"
     org-latex-listings t
     org-latex-listings-langs
     (quote
      ((emacs-lisp   "Lisp")
       (lisp         "Lisp")
       (clojure      "Lisp")
       (c            "C")
       (cc           "C++")
       (fortran      "fortran")
       (perl         "Perl")
       (cperl        "Perl")
       (Python       "python")
       (python       "Python")
       (ruby         "Ruby")
       (html         "HTML")
       (xml          "XML")
       (tex          "TeX")
       (latex        "[LaTeX]TeX")
       (sh           "bash")
       (shell-script "bash")
       (gnuplot      "Gnuplot")
       (ocaml        "Caml")
       (caml         "Caml")
       (sql          "SQL")
       (sqlite       "sql")
       (makefile     "make")
       (R            "r")))
     org-latex-pdf-process
     (quote
      ("lualatex -shell-escape -interaction nonstopmode %f"
       "lualatex -shell-escape -interaction nonstopmode %f"))
     org-latex-tables-booktabs t
  
     org-level-color-stars-only nil
     org-list-indent-offset 2
     org-log-done t
  
     org-outline-path-complete-in-steps nil
  
     org-refile-allow-creating-parent-nodes 'confirm
     org-refile-targets                     '((nil :maxlevel . 5) (org-agenda-files :maxlevel . 5))
     org-refile-use-cache                   nil
     org-refile-use-outline-path            t
  
     org-startup-indented  t
     org-startup-folded    'content
     org-startup-truncated nil
  
     org-src-lang-modes '(("C"         . c)
  			("C++"       . c++)
  			("asymptote" . asy)
  			("bash"      . sh)
  			("beamer"    . latex)
  			("calc"      . fundamental)
  			("cpp"       . c++)
  			("ditaa"     . artist)
  			("dot"       . fundamental)
  			("elisp"     . emacs-lisp)
  			("ocaml"     . tuareg)
  			("screen"    . shell-script)
  			("shell"     . sh)
  			("sqlite"    . sql))
  
     org-support-shift-select t
  
     org-tags-column 80
  
     ;; to-do settings
     org-todo-keywords        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)")
  				    (sequence "PROJECT(p)" "|" "DONE(d!/!)" "CANCELLED(c@/!)")
  				    (sequence "WAITING(w@/!)" "DELEGATED(e!)" "HOLD(h)" "|" "CANCELLED(c@/!)")))
     org-todo-repeat-to-state "NEXT"
     org-todo-keyword-faces   (quote (("NEXT" :inherit warning)
  				    ("PROJECT" :inherit font-lock-string-face))))
    (gsetq org-display-custom-times t)
    :config
    ;; --------
    (org-babel-do-load-languages
     'org-babel-load-languages
     `((ditaa      . t)
       (dot        . t)
       (elvish     . t)
       (emacs-lisp . t)
       (gnuplot    . t)
       (haskell    . nil)
       (latex      . t)
       (ledger     . t)
       (ocaml      . nil)
       (octave     . t)
       (plantuml   . t)
       (python     . t)
       (R          . t)
       (ruby       . t)
       (screen     . nil)
       (,(if (locate-library "ob-sh") 'sh 'shell) . t)
       (sql . nil)
       (sqlite . t)))
  
    (gsetq org-babel-python-command "python3")
  
    ;; --------
    (gsetq luamagick
  	 '(luamagick
  	   :programs ("lualatex" "convert")
  	   :description "pdf > png"
  	   :message "you need to install lualatex and imagemagick."
  	   :use-xcolor t
  	   :image-input-type "pdf"
  	   :image-output-type "png"
  	   :image-size-adjust (1.0 . 1.0)
  	   :latex-compiler ("lualatex -interaction nonstopmode -output-directory %o %f")
  	   :image-converter ("convert -density %D -trim -antialias %f -quality 100 %O")))
    (add-to-list 'org-preview-latex-process-alist luamagick)
  
    (gsetq luasvg
  	 '(luasvg
  	   :programs ("lualatex" "dvisvgm")
  	   :description "dvi > svg"
  	   :message "you need to install lualatex and dvisvgm."
  	   :use-xcolor t
  	   :image-input-type "dvi"
  	   :image-output-type "svg"
  	   :image-size-adjust (1.7 . 1.5)
  	   :latex-compiler ("lualatex -interaction nonstopmode -output-format dvi -output-directory %o %f")
  	   :image-converter ("dvisvgm %f -n -b min -c %S -o %O")))
    (add-to-list 'org-preview-latex-process-alist luasvg)
    (gsetq org-preview-latex-default-process 'luasvg))
#+END_SRC

*** Org Agenda

#+BEGIN_SRC elisp
  (use-package org-agenda
    :init (gsetq-default org-agenda-clockreport-parameter-plist '(:link t :maxlevel 3))
    :hook ((org-agenda-mode . (lambda () (add-hook 'window-configuration-change-hook 'org-agenda-align-tags nil t)))
  	 (org-agenda-mode . hl-line-mode))
    :config (add-to-list 'org-agenda-after-show-hook 'org-show-entry)
    (let ((active-project-match "-INBOX/PROJECT"))
  
      (gsetq org-stuck-projects
  	   `(,active-project-match ("NEXT")))
  
      (gsetq
       org-agenda-compact-blocks t
       org-agenda-sticky t
       org-agenda-start-on-weekday nil
       org-agenda-span 'day
       org-agenda-include-diary nil
       org-agenda-sorting-strategy
       '((agenda habit-down time-up user-defined-up effort-up category-keep)
         (todo category-up effort-up)
         (tags category-up effort-up)
         (search category-up))
       org-agenda-window-setup 'current-window
       org-agenda-custom-commands
       `(("N" "Notes" tags "NOTE"
  	((org-agenda-overriding-header "Notes")
  	 (org-tags-match-list-sublevels t)))
         ("g" "GTD"
  	((agenda "" nil)
  	 (tags "INBOX"
  	       ((org-agenda-overriding-header "Inbox")
  		(org-tags-match-list-sublevels nil)))
  	 (stuck ""
  		((org-agenda-overriding-header "Stuck Projects")
  		 (org-agenda-tags-todo-honor-ignore-options t)
  		 (org-tags-match-list-sublevels t)
  		 (org-agenda-todo-ignore-scheduled 'future)))
  	 (tags-todo "-INBOX"
  		    ((org-agenda-overriding-header "Next Actions")
  		     (org-agenda-tags-todo-honor-ignore-options t)
  		     (org-agenda-todo-ignore-scheduled 'future)
  		     (org-agenda-skip-function
  		      '(lambda ()
  			 (or (org-agenda-skip-subtree-if 'todo '("HOLD" "WAITING"))
  			     (org-agenda-skip-entry-if 'nottodo '("NEXT")))))
  		     (org-tags-match-list-sublevels t)
  		     (org-agenda-sorting-strategy
  		      '(todo-state-down effort-up category-keep))))
  	 (tags-todo ,active-project-match
  		    ((org-agenda-overriding-header "Projects")
  		     (org-tags-match-list-sublevels t)
  		     (org-agenda-sorting-strategy
  		      '(category-keep))))
  	 (tags-todo "-INBOX/-NEXT"
  		    ((org-agenda-overriding-header "Orphaned Tasks")
  		     (org-agenda-tags-todo-honor-ignore-options t)
  		     (org-agenda-todo-ignore-scheduled 'future)
  		     (org-agenda-skip-function
  		      '(lambda ()
  			 (or (org-agenda-skip-subtree-if 'todo '("PROJECT" "HOLD" "WAITING" "DELEGATED"))
  			     (org-agenda-skip-subtree-if 'nottododo '("TODO")))))
  		     (org-tags-match-list-sublevels t)
  		     (org-agenda-sorting-strategy
  		      '(category-keep))))
  	 (tags-todo "/WAITING"
  		    ((org-agenda-overriding-header "Waiting")
  		     (org-agenda-tags-todo-honor-ignore-options t)
  		     (org-agenda-todo-ignore-scheduled 'future)
  		     (org-agenda-sorting-strategy
  		      '(category-keep))))
  	 (tags-todo "/DELEGATED"
  		    ((org-agenda-overriding-header "Delegated")
  		     (org-agenda-tags-todo-honor-ignore-options t)
  		     (org-agenda-todo-ignore-scheduled 'future)
  		     (org-agenda-sorting-strategy
  		      '(category-keep))))
  	 (tags-todo "-INBOX"
  		    ((org-agenda-overriding-header "On Hold")
  		     (org-agenda-skip-function
  		      '(lambda ()
  			 (or (org-agenda-skip-subtree-if 'todo '("WAITING"))
  			     (org-agenda-skip-entry-if 'nottodo '("HOLD")))))
  		     (org-tags-match-list-sublevels nil)
  		     (org-agenda-sorting-strategy
  		      '(category-keep))))))))))
#+END_SRC

*** Org Bullets

#+BEGIN_SRC elisp
  (use-package org-bullets
    :straight t
    :hook ((org-mode . (lambda () (org-bullets-mode 1)))))
#+END_SRC

*** Org Capture

#+BEGIN_SRC elisp
  (use-package org-capture
    :demand t
    :init
    (unless (boundp 'org-capture-templates)
      (defvar org-capture-templates nil))
  
    (add-to-list 'org-capture-templates '("t" "Tasks"))
  
    (add-to-list 'org-capture-templates
  	       '("tr" "Book Reading Task" entry
  		 (file+olp "~/notes/task.org" "Reading" "Book")
  		 "* TODO %^{book name}\n%u\n%a\n" :clock-in t :clock-resume t))
  
    (add-to-list 'org-capture-templates
  	       '("tw" "Work Task" entry
  		 (file+headline "~/notes/task.org" "Work")
  		 "* TODO %^{task name}\n%u\n%a\n" :clock-in t :clock-resume t))
  
    (add-to-list 'org-capture-templates
  	       '("T" "Thoughts" entry
  		 (file "~/notes/thoughts.org")
  		 "* %t - %^{heading}\n\n%?"))
  
    (add-to-list 'org-capture-templates
  	       '("j" "Journal" entry
  		 (file "~/notes/journal.org")
  		 "* %U - %^{heading}\n  %?"))
  
    (add-to-list 'org-capture-templates
  	       '("i" "Inbox" entry
  		 (file "~/notes/inbox.org")
  		 "* %U - %^{heading} %^g\n %?\n"))
  
    (add-to-list 'org-capture-templates
  	       '("n" "Notes" entry
  		 (file "~/notes/notes.org")
  		 "* %^{heading} %t %^g\n  %?\n")))
#+END_SRC

*** Org Cliplink

#+BEGIN_SRC elisp
  (use-package org-cliplink
    :defer    t
    :straight t)
#+END_SRC

*** Org clock

#+BEGIN_SRC elisp
  (use-package org-clock
    :preface
    (defun show-org-clock-in-header-line ()
      "Show the clocked-in task in header line"
      (setq-default header-line-format '((" " org-mode-line-string ""))))
  
    (defun hide-org-clock-from-header-line ()
      "Hide the clocked-in task from header line"
      (setq-default header-line-format nil))
    :init
    (gsetq org-clock-persist t
  	 org-clock-in-resume t
  	 ;; Save clock data and notes in the LOGBOOK drawer
  	 org-clock-into-drawer t
  	 ;; Save state changes in the LOGBOOK drawer
  	 org-log-into-drawer t
  	 ;; Removes clocked tasks with 0:00 duration
  	 org-clock-out-remove-zero-time-clocks t
  	 ;; Show clock sums as hours and minutes, not "n days" etc.
  	 org-time-clocksum-format
  	 '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))
    :hook ((org-clock-in . show-org-clock-in-header-line)
  	 ((org-clock-out . org-clock-cancel) . hide-org-clock-from-header))
    :bind (:map org-clock-mode-line-map
  	     ([header-line mouse-2] . org-clock-goto)
  	     ([header-line mouse-1] . org-clock-menu))
    :config
    (when (and *is-a-mac* (file-directory-p "/Applications/org-clock-statusbar.app"))
      (add-hook 'org-clock-in-hook
  	      (lambda () (call-process "/usr/bin/osascript" nil 0 nil "-e"
  				  (concat "tell application \"org-clock-statusbar\" to clock in \""
  					  org-clock-current-task "\""))))
      (add-hook 'org-clock-out-hook
  	      (lambda () (call-process "/usr/bin/osascript" nil 0 nil "-e"
  				  "tell application \"org-clock-statusbar\" to clock out")))))
#+END_SRC

*** Org Extra Jar -- ob-ditaa & ob-plantuml

Include ob-ditaa and ob-plantuml

#+BEGIN_SRC elisp
  (use-package org
    :preface
    (defun grab-ditaa (url jar-name)
      "Download URL and extract JAR-NAME as `org-ditaa-jar-path'."
      (message "Grabbing " jar-name " for org.")
      (let ((zip-temp (make-temp-name (no-littering-expand-var-file-name "emacs-ditaa"))))
        (unwind-protect
  	  (progn
  	    (when (executable-find "unzip")
  	      (url-copy-file url zip-temp)
  	      (shell-command (concat "unzip -p " (shell-quote-argument zip-temp)
  				     " " (shell-quote-argument jar-name) " > "
  				     (shell-quote-argument org-ditaa-jar-path)))))
  	(when (file-exists-p zip-temp)
  	  (delete-file zip-temp)))))
    :config
    (unless (and (boundp 'org-ditaa-jar-path)
  	       (file-exists-p org-ditaa-jar-path))
      (let ((jar-name "ditaa0_9.jar")
  	  (url "http://jaist.dl.sourceforge.net/project/ditaa/ditaa/0.9/ditaa0_9.zip"))
        (setq org-ditaa-jar-path (no-littering-expand-var-file-name jar-name))
        (unless (file-exists-p org-ditaa-jar-path)
  	(grab-ditaa url jar-name))))
  
    (let ((jar-name "plantuml.jar")
  	(url "http://jaist.dl.sourceforge.net/project/plantuml/plantuml.jar"))
      (setq org-plantuml-jar-path (no-littering-expand-var-file-name jar-name))
      (unless (file-exists-p org-plantuml-jar-path)
        (url-copy-file url org-plantuml-jar-path))))
#+END_SRC

*** Org PDF view

#+BEGIN_SRC elisp
  (use-package org-pdfview
    :defer    t
    :straight t)
#+END_SRC

*** Org Pomodoro

#+BEGIN_SRC elisp
  (use-package org-pomodoro
    :after org-agenda
    :init (gsetq org-pomodoro-keep-killed-pomodoro-time t)
    :bind (:map org-agenda-mode-map
  	      ("P" . org-pomodoro)))
#+END_SRC

*** Org Toc

#+BEGIN_SRC elisp
  (use-package toc-org
    :defer    t
    :straight t)
#+END_SRC

*** Org Wc

#+BEGIN_SRC elisp
  (use-package org-wc
    :defer    t
    :straight t)
#+END_SRC

** Themes

*** Main Theme

I use doom-themes.

#+BEGIN_SRC elisp
  (use-package doom-themes
    :demand   t
    :straight t
    :config
    (load-theme *theme* t)
    (doom-themes-treemacs-config)  ;; The doom themes havn't finished it yet.
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
#+END_SRC

*** Font

#+BEGIN_SRC elisp
  (use-package emojify
    :straight t
    :commands emojify-mode
    :hook ((after-init . global-emojify-mode))
    :init (setq emojify-emoji-styles '(unicode github)
  	      emojify-display-style 'unicode))
  
  (use-package all-the-icons
    :demand t
    :init (setq inhibit-compacting-font-caches t)
    :straight t)
#+END_SRC

*** Mode Line

#+BEGIN_SRC elisp
  (use-package nyan-mode
    :demand t
    :straight t
    :init (setq nyan-animate-nyancat t
  	      nyan-bar-length 16
  	      nyan-wavy-trail t)
    :config (nyan-mode 1))
  
  
  (use-package spaceline-config
    :init
    (setq-default
     mode-line-format '("%e" (:eval (spaceline-ml-main)))
     powerline-default-separator 'contour
     powerline-gui-use-vcs-glyph t
     powerline-height 22
     spaceline-highlight-face-func 'spaceline-highlight-face-modified
     spaceline-workspace-numbers-unicode t
     spaceline-window-numbers-unicode t
     spaceline-separator-dir-left '(left . right)
     spaceline-separator-dir-right '(right . left)
     spaceline-flycheck-bullet "❀ %s")
    ;; (spaceline-helm-mode 1)
    (spaceline-info-mode 1)
    :straight spaceline
    :config
    (spaceline-define-segment nasy:version-control
      "Version control information."
      (when vc-mode
        (let ((branch (mapconcat 'concat (cdr (split-string vc-mode "[:-]")) "-")))
  	(powerline-raw
  	 (s-trim (concat "  "
  			 branch
  			 (when (buffer-file-name)
  			   (pcase (vc-state (buffer-file-name))
  			     (`up-to-date " ✓")
  			     (`edited " ❓")
  			     (`added " ➕")
  			     (`unregistered " ■")
  			     (`removed " ✘")
  			     (`needs-merge " ↓")
  			     (`needs-update " ↑")
  			     (`ignored " ✦")
  			     (_ " ⁇")))))))))
  
    (spaceline-define-segment nasy-time
      "Time"
      (format-time-string "%b %d, %Y - %H:%M ")
      :tight-right t)
  
    (spaceline-define-segment flycheck-status
      "An `all-the-icons' representaiton of `flycheck-status'"
      (let* ((text
  	    (pcase flycheck-last-status-change
  	      (`finished (if flycheck-current-errors
  			     (let ((count (let-alist (flycheck-count-errors flycheck-current-errors)
  					    (+ (or .warning 0) (or .error 0)))))
  			       (format "✖ %s Issue%s" count (if (eq 1 count) "" "s")))
  			   "✔ No Issues"))
  	      (`running     "⟲ Running")
  	      (`no-checker  "⚠")
  	      (`not-checked "✣ Disabled")
  	      (`errored     "⚠ Error")
  	      (`interrupted "⛔ Interrupted")
  	      (`suspicious  "")))
  	   (f (cond
  	       ((string-match "⚠" text) `(:height 0.9 :foreground ,(face-attribute 'spaceline-flycheck-warning :foreground)
  						  :background "#1d5464"))
  	       ((string-match "✖ [0-9]" text) `(:height 0.9 :foreground ,(face-attribute 'spaceline-flycheck-error :foreground)
  							:background "#333333"))
  	       ((string-match "✣ Disabled" text) `(:height 0.9))
  	       (t '(:height 0.9 :inherit)))))
        (propertize (format " %s " text)
  		  'face f
  		  'help-echo "Show Flycheck Errors"
  		  'mouse-face '(:box 1)
  		  'local-map (make-mode-line-mouse-map 'mouse-1 (lambda () (interactive) (flycheck-list-errors)))))
      :when active)
  
    ;; (spaceline-define-segment nasy:keycast-keys
    ;;   "Keycast modeline segment."
    ;;   (and (funcall keycast-window-predicate)
    ;;        (let* ((key (ignore-errors
    ;;                      (key-description keycast--this-command-keys)))
    ;;               (cmd keycast--this-command)
    ;;               (elt (or (assoc cmd keycast-substitute-alist)
    ;;                        (assoc key keycast-substitute-alist))))
    ;;          (when elt
    ;;            (pcase-let ((`(,_ ,k ,c) elt))
    ;;              (unless (eq k t) (setq key k))
    ;;              (unless (eq c t) (setq cmd c))))
    ;;          (and key cmd
    ;;               (concat
    ;;                (propertize (let ((pad (max 2 (- 5 (length key)))))
    ;;                              (concat (make-string (ceiling pad 2) ?\s) key
    ;;                                      (make-string (floor   pad 2) ?\s)))
    ;;                            'face 'keycast-key)
    ;;                ;; (format " %s" (propertize (symbol-name cmd)
    ;;                ;;                           'face 'keycast-command))
    ;;                )))))
  
    (spaceline-define-segment lsp
      "The LSP server state."
      (when (bound-and-true-p lsp-mode)
        (concat (lsp-mode-line) " "))
      :when active)
  
    (add-hook
     'after-init-hook
     (lambda () (spaceline-compile
  	   `(((buffer-modified major-mode buffer-size) :face highlight-face)
  	     (anzu)
  	     (auto-compile)
  	     ((nasy:version-control project-name) :separator " in " :face 'spaceline-flycheck-warning :when active)
  	     ((nasy:version-control project-name) :separator " in " :when (not active))
  	     (buffer-id)
  	     (lsp)
  	     (nyan-cat :tight t))
  	   `((selection-info)
  	     (line-column :when active)
  	     (line-column :when (not active))
  	     (global :when active)
  	     (process)
  	     ;; (minor-modes)
  	     (buffer-position
  	      hud)
  	     ((flycheck-status (flycheck-error flycheck-warning flycheck-info)) :when active)
  	     (nasy-time :face 'spaceline-evil-replace :when active)
  	     (nasy-time :when (not active)))))))
#+END_SRC

#+BEGIN_SRC elisp
  (use-package minions
    :straight t
    :hook ((after-init . minions-mode)))
#+END_SRC

* Epilogue

#+BEGIN_SRC elisp
  (run-hooks 'nasy/config-before-hook)
  
  (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
  
  (when (file-exists-p custom-file)
    (load custom-file))
  
  (when *server*
    (server-start))
  ;;; init.el ends here
#+END_SRC

Hope you enjoy it.
